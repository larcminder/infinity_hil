
hil_0_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007858  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08007a28  08007a28  00017a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ccc  08007ccc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007ccc  08007ccc  00017ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cd4  08007cd4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cd4  08007cd4  00017cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b88  20000074  08007d50  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bfc  08007d50  00024bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da6c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038d0  00000000  00000000  0003db10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  000413e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001690  00000000  00000000  00042b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000443d  00000000  00000000  00044208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a53b  00000000  00000000  00048645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd900  00000000  00000000  00062b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00140480  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068ec  00000000  00000000  001404d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007a10 	.word	0x08007a10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007a10 	.word	0x08007a10

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fd33 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f847 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f925 	bl	8000804 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ba:	f000 f8fb 	bl	80007b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f8cf 	bl	8000760 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005c2:	f000 f89f 	bl	8000704 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, UART_rxBuffer, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	4914      	ldr	r1, [pc, #80]	; (800061c <main+0x74>)
 80005ca:	4815      	ldr	r0, [pc, #84]	; (8000620 <main+0x78>)
 80005cc:	f003 fbcf 	bl	8003d6e <HAL_UART_Receive_DMA>

  //Set up all I2C Devices:
  //Digital Input: Set all to input
  uint8_t i2c_buffer[3] = {0x06,0x00,0x00};
 80005d0:	4a14      	ldr	r2, [pc, #80]	; (8000624 <main+0x7c>)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	6812      	ldr	r2, [r2, #0]
 80005d6:	4611      	mov	r1, r2
 80005d8:	8019      	strh	r1, [r3, #0]
 80005da:	3302      	adds	r3, #2
 80005dc:	0c12      	lsrs	r2, r2, #16
 80005de:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) adress_out, i2c_buffer, 3, 1000);
 80005e0:	1d3a      	adds	r2, r7, #4
 80005e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2303      	movs	r3, #3
 80005ea:	2120      	movs	r1, #32
 80005ec:	480e      	ldr	r0, [pc, #56]	; (8000628 <main+0x80>)
 80005ee:	f001 fc99 	bl	8001f24 <HAL_I2C_Master_Transmit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f2:	f003 ffbb 	bl	800456c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task01 */
  task01Handle = osThreadNew(StartTask01, NULL, &task01_attributes);
 80005f6:	4a0d      	ldr	r2, [pc, #52]	; (800062c <main+0x84>)
 80005f8:	2100      	movs	r1, #0
 80005fa:	480d      	ldr	r0, [pc, #52]	; (8000630 <main+0x88>)
 80005fc:	f004 f800 	bl	8004600 <osThreadNew>
 8000600:	4603      	mov	r3, r0
 8000602:	4a0c      	ldr	r2, [pc, #48]	; (8000634 <main+0x8c>)
 8000604:	6013      	str	r3, [r2, #0]

  /* creation of task02 */
  task02Handle = osThreadNew(StartTask02, NULL, &task02_attributes);
 8000606:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <main+0x90>)
 8000608:	2100      	movs	r1, #0
 800060a:	480c      	ldr	r0, [pc, #48]	; (800063c <main+0x94>)
 800060c:	f003 fff8 	bl	8004600 <osThreadNew>
 8000610:	4603      	mov	r3, r0
 8000612:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <main+0x98>)
 8000614:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000616:	f003 ffcd 	bl	80045b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061a:	e7fe      	b.n	800061a <main+0x72>
 800061c:	20004b18 	.word	0x20004b18
 8000620:	20004b1c 	.word	0x20004b1c
 8000624:	08007a38 	.word	0x08007a38
 8000628:	20004a34 	.word	0x20004a34
 800062c:	08007b30 	.word	0x08007b30
 8000630:	080009f5 	.word	0x080009f5
 8000634:	20004a30 	.word	0x20004a30
 8000638:	08007b54 	.word	0x08007b54
 800063c:	08000b5d 	.word	0x08000b5d
 8000640:	20004ab4 	.word	0x20004ab4

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2234      	movs	r2, #52	; 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f006 fd12 	bl	800707c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b23      	ldr	r3, [pc, #140]	; (80006fc <SystemClock_Config+0xb8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a22      	ldr	r2, [pc, #136]	; (80006fc <SystemClock_Config+0xb8>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <SystemClock_Config+0xb8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <SystemClock_Config+0xbc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000690:	4a1b      	ldr	r2, [pc, #108]	; (8000700 <SystemClock_Config+0xbc>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <SystemClock_Config+0xbc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 fd2d 	bl	8003118 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006c4:	f000 fa84 	bl	8000bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 fa70 	bl	8002bc8 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ee:	f000 fa6f 	bl	8000bd0 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_I2C1_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <MX_I2C1_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_I2C1_Init+0x50>)
 8000710:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_I2C1_Init+0x58>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_I2C1_Init+0x50>)
 8000722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000726:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_I2C1_Init+0x50>)
 8000742:	f001 faab 	bl	8001c9c <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800074c:	f000 fa40 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20004a34 	.word	0x20004a34
 8000758:	40005400 	.word	0x40005400
 800075c:	000186a0 	.word	0x000186a0

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_USART2_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800076c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000798:	f003 fa0a 	bl	8003bb0 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 fa15 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20004b1c 	.word	0x20004b1c
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_DMA_Init+0x4c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <MX_DMA_Init+0x4c>)
 80007c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_DMA_Init+0x4c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2105      	movs	r1, #5
 80007da:	2010      	movs	r0, #16
 80007dc:	f000 fd16 	bl	800120c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007e0:	2010      	movs	r0, #16
 80007e2:	f000 fd2f 	bl	8001244 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2105      	movs	r1, #5
 80007ea:	2011      	movs	r0, #17
 80007ec:	f000 fd0e 	bl	800120c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80007f0:	2011      	movs	r0, #17
 80007f2:	f000 fd27 	bl	8001244 <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a25      	ldr	r2, [pc, #148]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <MX_GPIO_Init+0xb4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_GPIO_Init+0xb4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <MX_GPIO_Init+0xb4>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_GPIO_Init+0xb4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	4812      	ldr	r0, [pc, #72]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000874:	f001 f9f8 	bl	8001c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	4619      	mov	r1, r3
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_GPIO_Init+0xbc>)
 800088e:	f001 f857 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000892:	2320      	movs	r3, #32
 8000894:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	4619      	mov	r1, r3
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_GPIO_Init+0xb8>)
 80008aa:	f001 f849 	bl	8001940 <HAL_GPIO_Init>

}
 80008ae:	bf00      	nop
 80008b0:	3720      	adds	r7, #32
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020000 	.word	0x40020000
 80008c0:	40020800 	.word	0x40020800

080008c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// DMA-Interrupt nach empfangenem ASCII-Zeichen (muss noch gekürzt werden)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	if (UART_rxBuffer[0] == '*') {
 80008cc:	4b27      	ldr	r3, [pc, #156]	; (800096c <HAL_UART_RxCpltCallback+0xa8>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b2a      	cmp	r3, #42	; 0x2a
 80008d2:	d110      	bne.n	80008f6 <HAL_UART_RxCpltCallback+0x32>
		uart_buf_pos = 0;
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <HAL_UART_RxCpltCallback+0xac>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 30; i++) {
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	e007      	b.n	80008f0 <HAL_UART_RxCpltCallback+0x2c>
			uart_buf[i] = 0;
 80008e0:	4a24      	ldr	r2, [pc, #144]	; (8000974 <HAL_UART_RxCpltCallback+0xb0>)
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	4413      	add	r3, r2
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 30; i++) {
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	3301      	adds	r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b1d      	cmp	r3, #29
 80008f4:	ddf4      	ble.n	80008e0 <HAL_UART_RxCpltCallback+0x1c>
		}
	}

	if (UART_rxBuffer[0] == '*' || uart_buf[0] == '*') {
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <HAL_UART_RxCpltCallback+0xa8>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b2a      	cmp	r3, #42	; 0x2a
 80008fc:	d003      	beq.n	8000906 <HAL_UART_RxCpltCallback+0x42>
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <HAL_UART_RxCpltCallback+0xb0>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b2a      	cmp	r3, #42	; 0x2a
 8000904:	d129      	bne.n	800095a <HAL_UART_RxCpltCallback+0x96>
		uart_buf[uart_buf_pos] = UART_rxBuffer[0];
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <HAL_UART_RxCpltCallback+0xac>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a18      	ldr	r2, [pc, #96]	; (800096c <HAL_UART_RxCpltCallback+0xa8>)
 800090c:	7811      	ldrb	r1, [r2, #0]
 800090e:	4a19      	ldr	r2, [pc, #100]	; (8000974 <HAL_UART_RxCpltCallback+0xb0>)
 8000910:	54d1      	strb	r1, [r2, r3]
		if (UART_rxBuffer[0] == '#') {
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <HAL_UART_RxCpltCallback+0xa8>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b23      	cmp	r3, #35	; 0x23
 8000918:	d11a      	bne.n	8000950 <HAL_UART_RxCpltCallback+0x8c>
			uart_buf_pos = 0;
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_UART_RxCpltCallback+0xac>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 30; i++) {
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	e010      	b.n	8000948 <HAL_UART_RxCpltCallback+0x84>
				UART_command[i] = uart_buf[i];
 8000926:	4a13      	ldr	r2, [pc, #76]	; (8000974 <HAL_UART_RxCpltCallback+0xb0>)
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	4413      	add	r3, r2
 800092c:	7819      	ldrb	r1, [r3, #0]
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <HAL_UART_RxCpltCallback+0xb4>)
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	4413      	add	r3, r2
 8000934:	460a      	mov	r2, r1
 8000936:	701a      	strb	r2, [r3, #0]
				uart_buf[i] = 0;
 8000938:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_UART_RxCpltCallback+0xb0>)
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	4413      	add	r3, r2
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 30; i++) {
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	3301      	adds	r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	2b1d      	cmp	r3, #29
 800094c:	ddeb      	ble.n	8000926 <HAL_UART_RxCpltCallback+0x62>
 800094e:	e004      	b.n	800095a <HAL_UART_RxCpltCallback+0x96>
			}
		}
		else {
			uart_buf_pos++;
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <HAL_UART_RxCpltCallback+0xac>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	3301      	adds	r3, #1
 8000956:	4a06      	ldr	r2, [pc, #24]	; (8000970 <HAL_UART_RxCpltCallback+0xac>)
 8000958:	6013      	str	r3, [r2, #0]
		}
	}
	HAL_UART_Receive_DMA(&huart2, UART_rxBuffer, 1);
 800095a:	2201      	movs	r2, #1
 800095c:	4903      	ldr	r1, [pc, #12]	; (800096c <HAL_UART_RxCpltCallback+0xa8>)
 800095e:	4807      	ldr	r0, [pc, #28]	; (800097c <HAL_UART_RxCpltCallback+0xb8>)
 8000960:	f003 fa05 	bl	8003d6e <HAL_UART_Receive_DMA>
}
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20004b18 	.word	0x20004b18
 8000970:	20000090 	.word	0x20000090
 8000974:	20004a94 	.word	0x20004a94
 8000978:	20004a10 	.word	0x20004a10
 800097c:	20004b1c 	.word	0x20004b1c

08000980 <transmit>:

void transmit(char msg[30]) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b094      	sub	sp, #80	; 0x50
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	char commMsg[32] = "*";
 8000988:	232a      	movs	r3, #42	; 0x2a
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800098c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	615a      	str	r2, [r3, #20]
 800099e:	619a      	str	r2, [r3, #24]
	strncat(commMsg, msg, 30);
 80009a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a4:	221e      	movs	r2, #30
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f006 fb8f 	bl	80070cc <strncat>
	char tmp[1] = "#";
 80009ae:	2323      	movs	r3, #35	; 0x23
 80009b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	strncat(commMsg, tmp, 1);
 80009b4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80009b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009bc:	2201      	movs	r2, #1
 80009be:	4618      	mov	r0, r3
 80009c0:	f006 fb84 	bl	80070cc <strncat>
	char msgTarget[32];
	int len = sprintf(msgTarget, commMsg);
 80009c4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f006 fb5c 	bl	800708c <siprintf>
 80009d4:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, (uint8_t *)msgTarget, len, 500);
 80009d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009d8:	b29a      	uxth	r2, r3
 80009da:	f107 0108 	add.w	r1, r7, #8
 80009de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009e2:	4803      	ldr	r0, [pc, #12]	; (80009f0 <transmit+0x70>)
 80009e4:	f003 f931 	bl	8003c4a <HAL_UART_Transmit>
}
 80009e8:	bf00      	nop
 80009ea:	3750      	adds	r7, #80	; 0x50
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20004b1c 	.word	0x20004b1c

080009f4 <StartTask01>:

/* USER CODE END 4 */

//Analysiert den UART Befehl, sobald dieser vorliegt
void StartTask01(void *argument)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b090      	sub	sp, #64	; 0x40
 80009f8:	af02      	add	r7, sp, #8
 80009fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  int delay = 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
	  if (UART_command[0] == '*') {
 8000a00:	4b4b      	ldr	r3, [pc, #300]	; (8000b30 <StartTask01+0x13c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b2a      	cmp	r3, #42	; 0x2a
 8000a06:	f040 808b 	bne.w	8000b20 <StartTask01+0x12c>

		  if (UART_command[1] == 'a') {				//Analog IOs
 8000a0a:	4b49      	ldr	r3, [pc, #292]	; (8000b30 <StartTask01+0x13c>)
 8000a0c:	785b      	ldrb	r3, [r3, #1]
 8000a0e:	2b61      	cmp	r3, #97	; 0x61
 8000a10:	d103      	bne.n	8000a1a <StartTask01+0x26>
			  transmit("pDo something with the Analog IOs");
 8000a12:	4848      	ldr	r0, [pc, #288]	; (8000b34 <StartTask01+0x140>)
 8000a14:	f7ff ffb4 	bl	8000980 <transmit>
 8000a18:	e06c      	b.n	8000af4 <StartTask01+0x100>
		  }

		  else if (UART_command[1] == 'd') {		//Digital IOs
 8000a1a:	4b45      	ldr	r3, [pc, #276]	; (8000b30 <StartTask01+0x13c>)
 8000a1c:	785b      	ldrb	r3, [r3, #1]
 8000a1e:	2b64      	cmp	r3, #100	; 0x64
 8000a20:	d127      	bne.n	8000a72 <StartTask01+0x7e>
			  if (UART_command[2] == 'w') {				//Digital Out
 8000a22:	4b43      	ldr	r3, [pc, #268]	; (8000b30 <StartTask01+0x13c>)
 8000a24:	789b      	ldrb	r3, [r3, #2]
 8000a26:	2b77      	cmp	r3, #119	; 0x77
 8000a28:	d117      	bne.n	8000a5a <StartTask01+0x66>
				  uint8_t data[3] = {0x02, UART_command[3], UART_command[4]};
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000a30:	4b3f      	ldr	r3, [pc, #252]	; (8000b30 <StartTask01+0x13c>)
 8000a32:	78db      	ldrb	r3, [r3, #3]
 8000a34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000a38:	4b3d      	ldr	r3, [pc, #244]	; (8000b30 <StartTask01+0x13c>)
 8000a3a:	791b      	ldrb	r3, [r3, #4]
 8000a3c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) adress_in, data, 3, 100);
 8000a40:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000a44:	2364      	movs	r3, #100	; 0x64
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	2303      	movs	r3, #3
 8000a4a:	2128      	movs	r1, #40	; 0x28
 8000a4c:	483a      	ldr	r0, [pc, #232]	; (8000b38 <StartTask01+0x144>)
 8000a4e:	f001 fa69 	bl	8001f24 <HAL_I2C_Master_Transmit>
				  transmit("pWrite to a Digital Pin");
 8000a52:	483a      	ldr	r0, [pc, #232]	; (8000b3c <StartTask01+0x148>)
 8000a54:	f7ff ff94 	bl	8000980 <transmit>
 8000a58:	e04c      	b.n	8000af4 <StartTask01+0x100>
			  }
			  else if (UART_command[2] == 'r') {		//Digital In
 8000a5a:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <StartTask01+0x13c>)
 8000a5c:	789b      	ldrb	r3, [r3, #2]
 8000a5e:	2b72      	cmp	r3, #114	; 0x72
 8000a60:	d103      	bne.n	8000a6a <StartTask01+0x76>
				  transmit("pRead from a Digital Pin");
 8000a62:	4837      	ldr	r0, [pc, #220]	; (8000b40 <StartTask01+0x14c>)
 8000a64:	f7ff ff8c 	bl	8000980 <transmit>
 8000a68:	e044      	b.n	8000af4 <StartTask01+0x100>

			  }
			  else {
				  transmit("pInvalid Command");
 8000a6a:	4836      	ldr	r0, [pc, #216]	; (8000b44 <StartTask01+0x150>)
 8000a6c:	f7ff ff88 	bl	8000980 <transmit>
 8000a70:	e040      	b.n	8000af4 <StartTask01+0x100>
			  }
		  }

		  else if (UART_command[1] == 't') {		//Timer Signal
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <StartTask01+0x13c>)
 8000a74:	785b      	ldrb	r3, [r3, #1]
 8000a76:	2b74      	cmp	r3, #116	; 0x74
 8000a78:	d103      	bne.n	8000a82 <StartTask01+0x8e>
			  transmit("pDo something with the Timer");
 8000a7a:	4833      	ldr	r0, [pc, #204]	; (8000b48 <StartTask01+0x154>)
 8000a7c:	f7ff ff80 	bl	8000980 <transmit>
 8000a80:	e038      	b.n	8000af4 <StartTask01+0x100>
		  }

		  else if (UART_command[1] == 'c') {		//CAN Bus
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <StartTask01+0x13c>)
 8000a84:	785b      	ldrb	r3, [r3, #1]
 8000a86:	2b63      	cmp	r3, #99	; 0x63
 8000a88:	d103      	bne.n	8000a92 <StartTask01+0x9e>
			  transmit("pDo something with the CAN Bus");
 8000a8a:	4830      	ldr	r0, [pc, #192]	; (8000b4c <StartTask01+0x158>)
 8000a8c:	f7ff ff78 	bl	8000980 <transmit>
 8000a90:	e030      	b.n	8000af4 <StartTask01+0x100>
		  }

		  else if (UART_command[1] == 'p') {		//Echo zurück an Qt
 8000a92:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <StartTask01+0x13c>)
 8000a94:	785b      	ldrb	r3, [r3, #1]
 8000a96:	2b70      	cmp	r3, #112	; 0x70
 8000a98:	d103      	bne.n	8000aa2 <StartTask01+0xae>
			  transmit(UART_command);
 8000a9a:	4825      	ldr	r0, [pc, #148]	; (8000b30 <StartTask01+0x13c>)
 8000a9c:	f7ff ff70 	bl	8000980 <transmit>
 8000aa0:	e028      	b.n	8000af4 <StartTask01+0x100>
		  }

		  else if (UART_command[1] == 'w') {		//Warte für übermittelte Zeit
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <StartTask01+0x13c>)
 8000aa4:	785b      	ldrb	r3, [r3, #1]
 8000aa6:	2b77      	cmp	r3, #119	; 0x77
 8000aa8:	d121      	bne.n	8000aee <StartTask01+0xfa>
			  char hexArray[2] = {UART_command[2], UART_command[3]};
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <StartTask01+0x13c>)
 8000aac:	789b      	ldrb	r3, [r3, #2]
 8000aae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <StartTask01+0x13c>)
 8000ab4:	78db      	ldrb	r3, [r3, #3]
 8000ab6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			  delay = strtol(hexArray, NULL, 16) * 100;
 8000aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000abe:	2210      	movs	r2, #16
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f006 fb9a 	bl	80071fc <strtol>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2264      	movs	r2, #100	; 0x64
 8000acc:	fb02 f303 	mul.w	r3, r2, r3
 8000ad0:	633b      	str	r3, [r7, #48]	; 0x30
			  char msg[30];
			  sprintf(msg, "pDelay by %i ms", delay);
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ad8:	491d      	ldr	r1, [pc, #116]	; (8000b50 <StartTask01+0x15c>)
 8000ada:	4618      	mov	r0, r3
 8000adc:	f006 fad6 	bl	800708c <siprintf>
			  transmit(msg);
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff4b 	bl	8000980 <transmit>
			  break;
 8000aea:	bf00      	nop
		  osDelay(1);
	  }

  }
  /* USER CODE END 5 */
}
 8000aec:	e01c      	b.n	8000b28 <StartTask01+0x134>
			  transmit("pInvalid Command Identifier");
 8000aee:	4819      	ldr	r0, [pc, #100]	; (8000b54 <StartTask01+0x160>)
 8000af0:	f7ff ff46 	bl	8000980 <transmit>
		  for (int i = 0; i < 30; i++) {
 8000af4:	2300      	movs	r3, #0
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
 8000af8:	e007      	b.n	8000b0a <StartTask01+0x116>
			  UART_command[i] = 0;
 8000afa:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <StartTask01+0x13c>)
 8000afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000afe:	4413      	add	r3, r2
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 30; i++) {
 8000b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b06:	3301      	adds	r3, #1
 8000b08:	637b      	str	r3, [r7, #52]	; 0x34
 8000b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0c:	2b1d      	cmp	r3, #29
 8000b0e:	ddf4      	ble.n	8000afa <StartTask01+0x106>
		  osDelay(delay);
 8000b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 fe06 	bl	8004724 <osDelay>
		  transmit("a"); //Acknowledge, lets the qt script continue
 8000b18:	480f      	ldr	r0, [pc, #60]	; (8000b58 <StartTask01+0x164>)
 8000b1a:	f7ff ff31 	bl	8000980 <transmit>
 8000b1e:	e76d      	b.n	80009fc <StartTask01+0x8>
		  osDelay(1);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f003 fdff 	bl	8004724 <osDelay>
  {
 8000b26:	e769      	b.n	80009fc <StartTask01+0x8>
}
 8000b28:	3738      	adds	r7, #56	; 0x38
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20004a10 	.word	0x20004a10
 8000b34:	08007a3c 	.word	0x08007a3c
 8000b38:	20004a34 	.word	0x20004a34
 8000b3c:	08007a60 	.word	0x08007a60
 8000b40:	08007a78 	.word	0x08007a78
 8000b44:	08007a94 	.word	0x08007a94
 8000b48:	08007aa8 	.word	0x08007aa8
 8000b4c:	08007ac8 	.word	0x08007ac8
 8000b50:	08007ae8 	.word	0x08007ae8
 8000b54:	08007af8 	.word	0x08007af8
 8000b58:	08007b14 	.word	0x08007b14

08000b5c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af02      	add	r7, sp, #8
 8000b62:	6078      	str	r0, [r7, #4]
	  //msg[1] = digi[0];
	  //msg[2] = digi[1];
	  //transmit(msg);

	  //Read from digital In
	  uint8_t input[2] = {};
 8000b64:	2300      	movs	r3, #0
 8000b66:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) adress_in, 0x00, 1, 100);
 8000b68:	2364      	movs	r3, #100	; 0x64
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2128      	movs	r1, #40	; 0x28
 8000b72:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <StartTask02+0x4c>)
 8000b74:	f001 f9d6 	bl	8001f24 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, (uint16_t) adress_in, input, 2, 100);
 8000b78:	f107 020c 	add.w	r2, r7, #12
 8000b7c:	2364      	movs	r3, #100	; 0x64
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	2302      	movs	r3, #2
 8000b82:	2128      	movs	r1, #40	; 0x28
 8000b84:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <StartTask02+0x4c>)
 8000b86:	f001 facb 	bl	8002120 <HAL_I2C_Master_Receive>
	  char msg[3] = {'d',input[0], input[1]};
 8000b8a:	2364      	movs	r3, #100	; 0x64
 8000b8c:	723b      	strb	r3, [r7, #8]
 8000b8e:	7b3b      	ldrb	r3, [r7, #12]
 8000b90:	727b      	strb	r3, [r7, #9]
 8000b92:	7b7b      	ldrb	r3, [r7, #13]
 8000b94:	72bb      	strb	r3, [r7, #10]
	  transmit(msg);
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fef0 	bl	8000980 <transmit>

	  osDelay(100);
 8000ba0:	2064      	movs	r0, #100	; 0x64
 8000ba2:	f003 fdbf 	bl	8004724 <osDelay>
  {
 8000ba6:	e7dd      	b.n	8000b64 <StartTask02+0x8>
 8000ba8:	20004a34 	.word	0x20004a34

08000bac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d101      	bne.n	8000bc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bbe:	f000 fa4d 	bl	800105c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40001000 	.word	0x40001000

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x8>
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_MspInit+0x54>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a11      	ldr	r2, [pc, #68]	; (8000c30 <HAL_MspInit+0x54>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_MspInit+0x54>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_MspInit+0x54>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <HAL_MspInit+0x54>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_MspInit+0x54>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	210f      	movs	r1, #15
 8000c1e:	f06f 0001 	mvn.w	r0, #1
 8000c22:	f000 faf3 	bl	800120c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800

08000c34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a19      	ldr	r2, [pc, #100]	; (8000cb8 <HAL_I2C_MspInit+0x84>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12b      	bne.n	8000cae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c72:	23c0      	movs	r3, #192	; 0xc0
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c76:	2312      	movs	r3, #18
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c82:	2304      	movs	r3, #4
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <HAL_I2C_MspInit+0x8c>)
 8000c8e:	f000 fe57 	bl	8001940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	; 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40005400 	.word	0x40005400
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020400 	.word	0x40020400

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a47      	ldr	r2, [pc, #284]	; (8000e00 <HAL_UART_MspInit+0x13c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	f040 8088 	bne.w	8000df8 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	4b45      	ldr	r3, [pc, #276]	; (8000e04 <HAL_UART_MspInit+0x140>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	4a44      	ldr	r2, [pc, #272]	; (8000e04 <HAL_UART_MspInit+0x140>)
 8000cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf8:	4b42      	ldr	r3, [pc, #264]	; (8000e04 <HAL_UART_MspInit+0x140>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	4b3e      	ldr	r3, [pc, #248]	; (8000e04 <HAL_UART_MspInit+0x140>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	4a3d      	ldr	r2, [pc, #244]	; (8000e04 <HAL_UART_MspInit+0x140>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6313      	str	r3, [r2, #48]	; 0x30
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <HAL_UART_MspInit+0x140>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d20:	230c      	movs	r3, #12
 8000d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d30:	2307      	movs	r3, #7
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4833      	ldr	r0, [pc, #204]	; (8000e08 <HAL_UART_MspInit+0x144>)
 8000d3c:	f000 fe00 	bl	8001940 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d40:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <HAL_UART_MspInit+0x148>)
 8000d42:	4a33      	ldr	r2, [pc, #204]	; (8000e10 <HAL_UART_MspInit+0x14c>)
 8000d44:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d46:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <HAL_UART_MspInit+0x148>)
 8000d48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d4c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d4e:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <HAL_UART_MspInit+0x148>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d54:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <HAL_UART_MspInit+0x148>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d5a:	4b2c      	ldr	r3, [pc, #176]	; (8000e0c <HAL_UART_MspInit+0x148>)
 8000d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d60:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d62:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <HAL_UART_MspInit+0x148>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d68:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <HAL_UART_MspInit+0x148>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d6e:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <HAL_UART_MspInit+0x148>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d74:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <HAL_UART_MspInit+0x148>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d7a:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <HAL_UART_MspInit+0x148>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d80:	4822      	ldr	r0, [pc, #136]	; (8000e0c <HAL_UART_MspInit+0x148>)
 8000d82:	f000 fa6d 	bl	8001260 <HAL_DMA_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000d8c:	f7ff ff20 	bl	8000bd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a1e      	ldr	r2, [pc, #120]	; (8000e0c <HAL_UART_MspInit+0x148>)
 8000d94:	639a      	str	r2, [r3, #56]	; 0x38
 8000d96:	4a1d      	ldr	r2, [pc, #116]	; (8000e0c <HAL_UART_MspInit+0x148>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <HAL_UART_MspInit+0x150>)
 8000d9e:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <HAL_UART_MspInit+0x154>)
 8000da0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <HAL_UART_MspInit+0x150>)
 8000da4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000da8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <HAL_UART_MspInit+0x150>)
 8000dac:	2240      	movs	r2, #64	; 0x40
 8000dae:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_UART_MspInit+0x150>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <HAL_UART_MspInit+0x150>)
 8000db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_UART_MspInit+0x150>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <HAL_UART_MspInit+0x150>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_UART_MspInit+0x150>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dd0:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_UART_MspInit+0x150>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <HAL_UART_MspInit+0x150>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <HAL_UART_MspInit+0x150>)
 8000dde:	f000 fa3f 	bl	8001260 <HAL_DMA_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000de8:	f7ff fef2 	bl	8000bd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <HAL_UART_MspInit+0x150>)
 8000df0:	635a      	str	r2, [r3, #52]	; 0x34
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_UART_MspInit+0x150>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	3728      	adds	r7, #40	; 0x28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40004400 	.word	0x40004400
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	200049b0 	.word	0x200049b0
 8000e10:	40026088 	.word	0x40026088
 8000e14:	20004ab8 	.word	0x20004ab8
 8000e18:	400260a0 	.word	0x400260a0

08000e1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	2036      	movs	r0, #54	; 0x36
 8000e32:	f000 f9eb 	bl	800120c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e36:	2036      	movs	r0, #54	; 0x36
 8000e38:	f000 fa04 	bl	8001244 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <HAL_InitTick+0xa0>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <HAL_InitTick+0xa0>)
 8000e46:	f043 0310 	orr.w	r3, r3, #16
 8000e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <HAL_InitTick+0xa0>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	f003 0310 	and.w	r3, r3, #16
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e58:	f107 0210 	add.w	r2, r7, #16
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 ffca 	bl	8002dfc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e68:	f001 ffa0 	bl	8002dac <HAL_RCC_GetPCLK1Freq>
 8000e6c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e70:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <HAL_InitTick+0xa4>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	0c9b      	lsrs	r3, r3, #18
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_InitTick+0xa8>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <HAL_InitTick+0xac>)
 8000e80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <HAL_InitTick+0xa8>)
 8000e84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e88:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <HAL_InitTick+0xa8>)
 8000e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_InitTick+0xa8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_InitTick+0xa8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e9c:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <HAL_InitTick+0xa8>)
 8000e9e:	f002 fbd9 	bl	8003654 <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d104      	bne.n	8000eb2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ea8:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <HAL_InitTick+0xa8>)
 8000eaa:	f002 fc2d 	bl	8003708 <HAL_TIM_Base_Start_IT>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	e000      	b.n	8000eb4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3730      	adds	r7, #48	; 0x30
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	431bde83 	.word	0x431bde83
 8000ec4:	20004b60 	.word	0x20004b60
 8000ec8:	40001000 	.word	0x40001000

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <DMA1_Stream5_IRQHandler+0x10>)
 8000efe:	f000 fab5 	bl	800146c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200049b0 	.word	0x200049b0

08000f0c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <DMA1_Stream6_IRQHandler+0x10>)
 8000f12:	f000 faab 	bl	800146c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20004ab8 	.word	0x20004ab8

08000f20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <TIM6_DAC_IRQHandler+0x10>)
 8000f26:	f002 fc5f 	bl	80037e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20004b60 	.word	0x20004b60

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d207      	bcs.n	8000f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f64:	f006 f852 	bl	800700c <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20020000 	.word	0x20020000
 8000f94:	00000400 	.word	0x00000400
 8000f98:	20000094 	.word	0x20000094
 8000f9c:	20004c00 	.word	0x20004c00

08000fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ffc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fca:	490e      	ldr	r1, [pc, #56]	; (8001004 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fcc:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe0:	4c0b      	ldr	r4, [pc, #44]	; (8001010 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fee:	f7ff ffd7 	bl	8000fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f006 f811 	bl	8007018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff fad7 	bl	80005a8 <main>
  bx  lr    
 8000ffa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ffc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001008:	08007cdc 	.word	0x08007cdc
  ldr r2, =_sbss
 800100c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001010:	20004bfc 	.word	0x20004bfc

08001014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC_IRQHandler>
	...

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <HAL_Init+0x40>)
 8001022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_Init+0x40>)
 800102e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_Init+0x40>)
 800103a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f8d8 	bl	80011f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff fee8 	bl	8000e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f7ff fdc6 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023c00 	.word	0x40023c00

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008
 8001080:	20004ba8 	.word	0x20004ba8

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20004ba8 	.word	0x20004ba8

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <__NVIC_EnableIRQ+0x38>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	; (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	; (800118c <__NVIC_SetPriority+0x50>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
         );
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ff4c 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800121e:	f7ff ff61 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 8001222:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	6978      	ldr	r0, [r7, #20]
 800122a:	f7ff ffb1 	bl	8001190 <NVIC_EncodePriority>
 800122e:	4602      	mov	r2, r0
 8001230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff80 	bl	800113c <__NVIC_SetPriority>
}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff54 	bl	8001100 <__NVIC_EnableIRQ>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800126c:	f7ff ff0a 	bl	8001084 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e099      	b.n	80013b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2202      	movs	r2, #2
 8001288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0201 	bic.w	r2, r2, #1
 800129a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800129c:	e00f      	b.n	80012be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800129e:	f7ff fef1 	bl	8001084 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d908      	bls.n	80012be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2220      	movs	r2, #32
 80012b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2203      	movs	r2, #3
 80012b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e078      	b.n	80013b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1e8      	bne.n	800129e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <HAL_DMA_Init+0x158>)
 80012d8:	4013      	ands	r3, r2
 80012da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4313      	orrs	r3, r2
 800130e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	2b04      	cmp	r3, #4
 8001316:	d107      	bne.n	8001328 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	4313      	orrs	r3, r2
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4313      	orrs	r3, r2
 8001326:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f023 0307 	bic.w	r3, r3, #7
 800133e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	4313      	orrs	r3, r2
 8001348:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	2b04      	cmp	r3, #4
 8001350:	d117      	bne.n	8001382 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4313      	orrs	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00e      	beq.n	8001382 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 fa6f 	bl	8001848 <DMA_CheckFifoParam>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d008      	beq.n	8001382 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2240      	movs	r2, #64	; 0x40
 8001374:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800137e:	2301      	movs	r3, #1
 8001380:	e016      	b.n	80013b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 fa26 	bl	80017dc <DMA_CalcBaseAndBitshift>
 8001390:	4603      	mov	r3, r0
 8001392:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001398:	223f      	movs	r2, #63	; 0x3f
 800139a:	409a      	lsls	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	f010803f 	.word	0xf010803f

080013bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
 80013c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d101      	bne.n	80013e2 <HAL_DMA_Start_IT+0x26>
 80013de:	2302      	movs	r3, #2
 80013e0:	e040      	b.n	8001464 <HAL_DMA_Start_IT+0xa8>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d12f      	bne.n	8001456 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2202      	movs	r2, #2
 80013fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f000 f9b8 	bl	8001780 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001414:	223f      	movs	r2, #63	; 0x3f
 8001416:	409a      	lsls	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0216 	orr.w	r2, r2, #22
 800142a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	2b00      	cmp	r3, #0
 8001432:	d007      	beq.n	8001444 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 0208 	orr.w	r2, r2, #8
 8001442:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	e005      	b.n	8001462 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800145e:	2302      	movs	r3, #2
 8001460:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001462:	7dfb      	ldrb	r3, [r7, #23]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001478:	4b92      	ldr	r3, [pc, #584]	; (80016c4 <HAL_DMA_IRQHandler+0x258>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a92      	ldr	r2, [pc, #584]	; (80016c8 <HAL_DMA_IRQHandler+0x25c>)
 800147e:	fba2 2303 	umull	r2, r3, r2, r3
 8001482:	0a9b      	lsrs	r3, r3, #10
 8001484:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001496:	2208      	movs	r2, #8
 8001498:	409a      	lsls	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d01a      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d013      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0204 	bic.w	r2, r2, #4
 80014be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c4:	2208      	movs	r2, #8
 80014c6:	409a      	lsls	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d0:	f043 0201 	orr.w	r2, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014dc:	2201      	movs	r2, #1
 80014de:	409a      	lsls	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d012      	beq.n	800150e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00b      	beq.n	800150e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fa:	2201      	movs	r2, #1
 80014fc:	409a      	lsls	r2, r3
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001506:	f043 0202 	orr.w	r2, r3, #2
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001512:	2204      	movs	r2, #4
 8001514:	409a      	lsls	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d012      	beq.n	8001544 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00b      	beq.n	8001544 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001530:	2204      	movs	r2, #4
 8001532:	409a      	lsls	r2, r3
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153c:	f043 0204 	orr.w	r2, r3, #4
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001548:	2210      	movs	r2, #16
 800154a:	409a      	lsls	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4013      	ands	r3, r2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d043      	beq.n	80015dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d03c      	beq.n	80015dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001566:	2210      	movs	r2, #16
 8001568:	409a      	lsls	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d018      	beq.n	80015ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d108      	bne.n	800159c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	2b00      	cmp	r3, #0
 8001590:	d024      	beq.n	80015dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	4798      	blx	r3
 800159a:	e01f      	b.n	80015dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d01b      	beq.n	80015dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	4798      	blx	r3
 80015ac:	e016      	b.n	80015dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d107      	bne.n	80015cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0208 	bic.w	r2, r2, #8
 80015ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e0:	2220      	movs	r2, #32
 80015e2:	409a      	lsls	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 808e 	beq.w	800170a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 8086 	beq.w	800170a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001602:	2220      	movs	r2, #32
 8001604:	409a      	lsls	r2, r3
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b05      	cmp	r3, #5
 8001614:	d136      	bne.n	8001684 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0216 	bic.w	r2, r2, #22
 8001624:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001634:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	2b00      	cmp	r3, #0
 800163c:	d103      	bne.n	8001646 <HAL_DMA_IRQHandler+0x1da>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001642:	2b00      	cmp	r3, #0
 8001644:	d007      	beq.n	8001656 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0208 	bic.w	r2, r2, #8
 8001654:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165a:	223f      	movs	r2, #63	; 0x3f
 800165c:	409a      	lsls	r2, r3
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001676:	2b00      	cmp	r3, #0
 8001678:	d07d      	beq.n	8001776 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	4798      	blx	r3
        }
        return;
 8001682:	e078      	b.n	8001776 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d01c      	beq.n	80016cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d108      	bne.n	80016b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d030      	beq.n	800170a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	4798      	blx	r3
 80016b0:	e02b      	b.n	800170a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d027      	beq.n	800170a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	4798      	blx	r3
 80016c2:	e022      	b.n	800170a <HAL_DMA_IRQHandler+0x29e>
 80016c4:	20000000 	.word	0x20000000
 80016c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10f      	bne.n	80016fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0210 	bic.w	r2, r2, #16
 80016e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170e:	2b00      	cmp	r3, #0
 8001710:	d032      	beq.n	8001778 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d022      	beq.n	8001764 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2205      	movs	r2, #5
 8001722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0201 	bic.w	r2, r2, #1
 8001734:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	3301      	adds	r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	429a      	cmp	r2, r3
 8001740:	d307      	bcc.n	8001752 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f2      	bne.n	8001736 <HAL_DMA_IRQHandler+0x2ca>
 8001750:	e000      	b.n	8001754 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001752:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	4798      	blx	r3
 8001774:	e000      	b.n	8001778 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001776:	bf00      	nop
    }
  }
}
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop

08001780 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800179c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b40      	cmp	r3, #64	; 0x40
 80017ac:	d108      	bne.n	80017c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017be:	e007      	b.n	80017d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	60da      	str	r2, [r3, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	3b10      	subs	r3, #16
 80017ec:	4a14      	ldr	r2, [pc, #80]	; (8001840 <DMA_CalcBaseAndBitshift+0x64>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017f6:	4a13      	ldr	r2, [pc, #76]	; (8001844 <DMA_CalcBaseAndBitshift+0x68>)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b03      	cmp	r3, #3
 8001808:	d909      	bls.n	800181e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001812:	f023 0303 	bic.w	r3, r3, #3
 8001816:	1d1a      	adds	r2, r3, #4
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	659a      	str	r2, [r3, #88]	; 0x58
 800181c:	e007      	b.n	800182e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001826:	f023 0303 	bic.w	r3, r3, #3
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	aaaaaaab 	.word	0xaaaaaaab
 8001844:	08007b90 	.word	0x08007b90

08001848 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d11f      	bne.n	80018a2 <DMA_CheckFifoParam+0x5a>
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d856      	bhi.n	8001916 <DMA_CheckFifoParam+0xce>
 8001868:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <DMA_CheckFifoParam+0x28>)
 800186a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186e:	bf00      	nop
 8001870:	08001881 	.word	0x08001881
 8001874:	08001893 	.word	0x08001893
 8001878:	08001881 	.word	0x08001881
 800187c:	08001917 	.word	0x08001917
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d046      	beq.n	800191a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001890:	e043      	b.n	800191a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800189a:	d140      	bne.n	800191e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018a0:	e03d      	b.n	800191e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018aa:	d121      	bne.n	80018f0 <DMA_CheckFifoParam+0xa8>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d837      	bhi.n	8001922 <DMA_CheckFifoParam+0xda>
 80018b2:	a201      	add	r2, pc, #4	; (adr r2, 80018b8 <DMA_CheckFifoParam+0x70>)
 80018b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b8:	080018c9 	.word	0x080018c9
 80018bc:	080018cf 	.word	0x080018cf
 80018c0:	080018c9 	.word	0x080018c9
 80018c4:	080018e1 	.word	0x080018e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
      break;
 80018cc:	e030      	b.n	8001930 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d025      	beq.n	8001926 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018de:	e022      	b.n	8001926 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018e8:	d11f      	bne.n	800192a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018ee:	e01c      	b.n	800192a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d903      	bls.n	80018fe <DMA_CheckFifoParam+0xb6>
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d003      	beq.n	8001904 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018fc:	e018      	b.n	8001930 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	73fb      	strb	r3, [r7, #15]
      break;
 8001902:	e015      	b.n	8001930 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00e      	beq.n	800192e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
      break;
 8001914:	e00b      	b.n	800192e <DMA_CheckFifoParam+0xe6>
      break;
 8001916:	bf00      	nop
 8001918:	e00a      	b.n	8001930 <DMA_CheckFifoParam+0xe8>
      break;
 800191a:	bf00      	nop
 800191c:	e008      	b.n	8001930 <DMA_CheckFifoParam+0xe8>
      break;
 800191e:	bf00      	nop
 8001920:	e006      	b.n	8001930 <DMA_CheckFifoParam+0xe8>
      break;
 8001922:	bf00      	nop
 8001924:	e004      	b.n	8001930 <DMA_CheckFifoParam+0xe8>
      break;
 8001926:	bf00      	nop
 8001928:	e002      	b.n	8001930 <DMA_CheckFifoParam+0xe8>
      break;   
 800192a:	bf00      	nop
 800192c:	e000      	b.n	8001930 <DMA_CheckFifoParam+0xe8>
      break;
 800192e:	bf00      	nop
    }
  } 
  
  return status; 
 8001930:	7bfb      	ldrb	r3, [r7, #15]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	e165      	b.n	8001c28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800195c:	2201      	movs	r2, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	429a      	cmp	r2, r3
 8001976:	f040 8154 	bne.w	8001c22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b01      	cmp	r3, #1
 8001984:	d005      	beq.n	8001992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198e:	2b02      	cmp	r3, #2
 8001990:	d130      	bne.n	80019f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	2203      	movs	r2, #3
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c8:	2201      	movs	r2, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 0201 	and.w	r2, r3, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d017      	beq.n	8001a30 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d123      	bne.n	8001a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	08da      	lsrs	r2, r3, #3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3208      	adds	r2, #8
 8001a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	08da      	lsrs	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3208      	adds	r2, #8
 8001a7e:	69b9      	ldr	r1, [r7, #24]
 8001a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0203 	and.w	r2, r3, #3
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80ae 	beq.w	8001c22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	4a5c      	ldr	r2, [pc, #368]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad6:	4b5a      	ldr	r3, [pc, #360]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ae2:	4a58      	ldr	r2, [pc, #352]	; (8001c44 <HAL_GPIO_Init+0x304>)
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	3302      	adds	r3, #2
 8001aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	220f      	movs	r2, #15
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4f      	ldr	r2, [pc, #316]	; (8001c48 <HAL_GPIO_Init+0x308>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d025      	beq.n	8001b5a <HAL_GPIO_Init+0x21a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4e      	ldr	r2, [pc, #312]	; (8001c4c <HAL_GPIO_Init+0x30c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d01f      	beq.n	8001b56 <HAL_GPIO_Init+0x216>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4d      	ldr	r2, [pc, #308]	; (8001c50 <HAL_GPIO_Init+0x310>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d019      	beq.n	8001b52 <HAL_GPIO_Init+0x212>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4c      	ldr	r2, [pc, #304]	; (8001c54 <HAL_GPIO_Init+0x314>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d013      	beq.n	8001b4e <HAL_GPIO_Init+0x20e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4b      	ldr	r2, [pc, #300]	; (8001c58 <HAL_GPIO_Init+0x318>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00d      	beq.n	8001b4a <HAL_GPIO_Init+0x20a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4a      	ldr	r2, [pc, #296]	; (8001c5c <HAL_GPIO_Init+0x31c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d007      	beq.n	8001b46 <HAL_GPIO_Init+0x206>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a49      	ldr	r2, [pc, #292]	; (8001c60 <HAL_GPIO_Init+0x320>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d101      	bne.n	8001b42 <HAL_GPIO_Init+0x202>
 8001b3e:	2306      	movs	r3, #6
 8001b40:	e00c      	b.n	8001b5c <HAL_GPIO_Init+0x21c>
 8001b42:	2307      	movs	r3, #7
 8001b44:	e00a      	b.n	8001b5c <HAL_GPIO_Init+0x21c>
 8001b46:	2305      	movs	r3, #5
 8001b48:	e008      	b.n	8001b5c <HAL_GPIO_Init+0x21c>
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x21c>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e004      	b.n	8001b5c <HAL_GPIO_Init+0x21c>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_Init+0x21c>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_GPIO_Init+0x21c>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	f002 0203 	and.w	r2, r2, #3
 8001b62:	0092      	lsls	r2, r2, #2
 8001b64:	4093      	lsls	r3, r2
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b6c:	4935      	ldr	r1, [pc, #212]	; (8001c44 <HAL_GPIO_Init+0x304>)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3302      	adds	r3, #2
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b7a:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <HAL_GPIO_Init+0x324>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b9e:	4a31      	ldr	r2, [pc, #196]	; (8001c64 <HAL_GPIO_Init+0x324>)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ba4:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <HAL_GPIO_Init+0x324>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc8:	4a26      	ldr	r2, [pc, #152]	; (8001c64 <HAL_GPIO_Init+0x324>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bce:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <HAL_GPIO_Init+0x324>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf2:	4a1c      	ldr	r2, [pc, #112]	; (8001c64 <HAL_GPIO_Init+0x324>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <HAL_GPIO_Init+0x324>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c1c:	4a11      	ldr	r2, [pc, #68]	; (8001c64 <HAL_GPIO_Init+0x324>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3301      	adds	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b0f      	cmp	r3, #15
 8001c2c:	f67f ae96 	bls.w	800195c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3724      	adds	r7, #36	; 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40013800 	.word	0x40013800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	40020800 	.word	0x40020800
 8001c54:	40020c00 	.word	0x40020c00
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40021400 	.word	0x40021400
 8001c60:	40021800 	.word	0x40021800
 8001c64:	40013c00 	.word	0x40013c00

08001c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
 8001c74:	4613      	mov	r3, r2
 8001c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c78:	787b      	ldrb	r3, [r7, #1]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c84:	e003      	b.n	8001c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c86:	887b      	ldrh	r3, [r7, #2]
 8001c88:	041a      	lsls	r2, r3, #16
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	619a      	str	r2, [r3, #24]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e12b      	b.n	8001f06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d106      	bne.n	8001cc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7fe ffb6 	bl	8000c34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2224      	movs	r2, #36	; 0x24
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d00:	f001 f854 	bl	8002dac <HAL_RCC_GetPCLK1Freq>
 8001d04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	4a81      	ldr	r2, [pc, #516]	; (8001f10 <HAL_I2C_Init+0x274>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d807      	bhi.n	8001d20 <HAL_I2C_Init+0x84>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4a80      	ldr	r2, [pc, #512]	; (8001f14 <HAL_I2C_Init+0x278>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	bf94      	ite	ls
 8001d18:	2301      	movls	r3, #1
 8001d1a:	2300      	movhi	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	e006      	b.n	8001d2e <HAL_I2C_Init+0x92>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4a7d      	ldr	r2, [pc, #500]	; (8001f18 <HAL_I2C_Init+0x27c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	bf94      	ite	ls
 8001d28:	2301      	movls	r3, #1
 8001d2a:	2300      	movhi	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e0e7      	b.n	8001f06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4a78      	ldr	r2, [pc, #480]	; (8001f1c <HAL_I2C_Init+0x280>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0c9b      	lsrs	r3, r3, #18
 8001d40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4a6a      	ldr	r2, [pc, #424]	; (8001f10 <HAL_I2C_Init+0x274>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d802      	bhi.n	8001d70 <HAL_I2C_Init+0xd4>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	e009      	b.n	8001d84 <HAL_I2C_Init+0xe8>
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	4a69      	ldr	r2, [pc, #420]	; (8001f20 <HAL_I2C_Init+0x284>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	099b      	lsrs	r3, r3, #6
 8001d82:	3301      	adds	r3, #1
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	495c      	ldr	r1, [pc, #368]	; (8001f10 <HAL_I2C_Init+0x274>)
 8001da0:	428b      	cmp	r3, r1
 8001da2:	d819      	bhi.n	8001dd8 <HAL_I2C_Init+0x13c>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1e59      	subs	r1, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	fbb1 f3f3 	udiv	r3, r1, r3
 8001db2:	1c59      	adds	r1, r3, #1
 8001db4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001db8:	400b      	ands	r3, r1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00a      	beq.n	8001dd4 <HAL_I2C_Init+0x138>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1e59      	subs	r1, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd2:	e051      	b.n	8001e78 <HAL_I2C_Init+0x1dc>
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	e04f      	b.n	8001e78 <HAL_I2C_Init+0x1dc>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d111      	bne.n	8001e04 <HAL_I2C_Init+0x168>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	1e58      	subs	r0, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	440b      	add	r3, r1
 8001dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df2:	3301      	adds	r3, #1
 8001df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	bf0c      	ite	eq
 8001dfc:	2301      	moveq	r3, #1
 8001dfe:	2300      	movne	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	e012      	b.n	8001e2a <HAL_I2C_Init+0x18e>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1e58      	subs	r0, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	0099      	lsls	r1, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf0c      	ite	eq
 8001e24:	2301      	moveq	r3, #1
 8001e26:	2300      	movne	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_Init+0x196>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e022      	b.n	8001e78 <HAL_I2C_Init+0x1dc>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10e      	bne.n	8001e58 <HAL_I2C_Init+0x1bc>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1e58      	subs	r0, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6859      	ldr	r1, [r3, #4]
 8001e42:	460b      	mov	r3, r1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	440b      	add	r3, r1
 8001e48:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e56:	e00f      	b.n	8001e78 <HAL_I2C_Init+0x1dc>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1e58      	subs	r0, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	0099      	lsls	r1, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	6809      	ldr	r1, [r1, #0]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69da      	ldr	r2, [r3, #28]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ea6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6911      	ldr	r1, [r2, #16]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68d2      	ldr	r2, [r2, #12]
 8001eb2:	4311      	orrs	r1, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	000186a0 	.word	0x000186a0
 8001f14:	001e847f 	.word	0x001e847f
 8001f18:	003d08ff 	.word	0x003d08ff
 8001f1c:	431bde83 	.word	0x431bde83
 8001f20:	10624dd3 	.word	0x10624dd3

08001f24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	460b      	mov	r3, r1
 8001f32:	817b      	strh	r3, [r7, #10]
 8001f34:	4613      	mov	r3, r2
 8001f36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff f8a4 	bl	8001084 <HAL_GetTick>
 8001f3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	f040 80e0 	bne.w	800210c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	2319      	movs	r3, #25
 8001f52:	2201      	movs	r2, #1
 8001f54:	4970      	ldr	r1, [pc, #448]	; (8002118 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 fc58 	bl	800280c <I2C_WaitOnFlagUntilTimeout>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f62:	2302      	movs	r3, #2
 8001f64:	e0d3      	b.n	800210e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_I2C_Master_Transmit+0x50>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e0cc      	b.n	800210e <HAL_I2C_Master_Transmit+0x1ea>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d007      	beq.n	8001f9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0201 	orr.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2221      	movs	r2, #33	; 0x21
 8001fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	893a      	ldrh	r2, [r7, #8]
 8001fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4a50      	ldr	r2, [pc, #320]	; (800211c <HAL_I2C_Master_Transmit+0x1f8>)
 8001fda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fdc:	8979      	ldrh	r1, [r7, #10]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	6a3a      	ldr	r2, [r7, #32]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 fac2 	bl	800256c <I2C_MasterRequestWrite>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e08d      	b.n	800210e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002008:	e066      	b.n	80020d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	6a39      	ldr	r1, [r7, #32]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 fcd2 	bl	80029b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00d      	beq.n	8002036 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	2b04      	cmp	r3, #4
 8002020:	d107      	bne.n	8002032 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002030:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e06b      	b.n	800210e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	3b01      	subs	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b04      	cmp	r3, #4
 8002072:	d11b      	bne.n	80020ac <HAL_I2C_Master_Transmit+0x188>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002078:	2b00      	cmp	r3, #0
 800207a:	d017      	beq.n	80020ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	781a      	ldrb	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	6a39      	ldr	r1, [r7, #32]
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fcc2 	bl	8002a3a <I2C_WaitOnBTFFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00d      	beq.n	80020d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d107      	bne.n	80020d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e01a      	b.n	800210e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d194      	bne.n	800200a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800210c:	2302      	movs	r3, #2
  }
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	00100002 	.word	0x00100002
 800211c:	ffff0000 	.word	0xffff0000

08002120 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	; 0x30
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	461a      	mov	r2, r3
 800212c:	460b      	mov	r3, r1
 800212e:	817b      	strh	r3, [r7, #10]
 8002130:	4613      	mov	r3, r2
 8002132:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002134:	f7fe ffa6 	bl	8001084 <HAL_GetTick>
 8002138:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b20      	cmp	r3, #32
 8002144:	f040 820b 	bne.w	800255e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2319      	movs	r3, #25
 800214e:	2201      	movs	r2, #1
 8002150:	497c      	ldr	r1, [pc, #496]	; (8002344 <HAL_I2C_Master_Receive+0x224>)
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 fb5a 	bl	800280c <I2C_WaitOnFlagUntilTimeout>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800215e:	2302      	movs	r3, #2
 8002160:	e1fe      	b.n	8002560 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_I2C_Master_Receive+0x50>
 800216c:	2302      	movs	r3, #2
 800216e:	e1f7      	b.n	8002560 <HAL_I2C_Master_Receive+0x440>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b01      	cmp	r3, #1
 8002184:	d007      	beq.n	8002196 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 0201 	orr.w	r2, r2, #1
 8002194:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2222      	movs	r2, #34	; 0x22
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2210      	movs	r2, #16
 80021b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	893a      	ldrh	r2, [r7, #8]
 80021c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4a5c      	ldr	r2, [pc, #368]	; (8002348 <HAL_I2C_Master_Receive+0x228>)
 80021d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021d8:	8979      	ldrh	r1, [r7, #10]
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 fa46 	bl	8002670 <I2C_MasterRequestRead>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e1b8      	b.n	8002560 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d113      	bne.n	800221e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	623b      	str	r3, [r7, #32]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	623b      	str	r3, [r7, #32]
 800220a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e18c      	b.n	8002538 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	2b01      	cmp	r3, #1
 8002224:	d11b      	bne.n	800225e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002234:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	e16c      	b.n	8002538 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	2b02      	cmp	r3, #2
 8002264:	d11b      	bne.n	800229e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002274:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002284:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	e14c      	b.n	8002538 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022c4:	e138      	b.n	8002538 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	f200 80f1 	bhi.w	80024b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d123      	bne.n	8002320 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fbed 	bl	8002abc <I2C_WaitOnRXNEFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e139      	b.n	8002560 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800231e:	e10b      	b.n	8002538 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002324:	2b02      	cmp	r3, #2
 8002326:	d14e      	bne.n	80023c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232e:	2200      	movs	r2, #0
 8002330:	4906      	ldr	r1, [pc, #24]	; (800234c <HAL_I2C_Master_Receive+0x22c>)
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fa6a 	bl	800280c <I2C_WaitOnFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d008      	beq.n	8002350 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e10e      	b.n	8002560 <HAL_I2C_Master_Receive+0x440>
 8002342:	bf00      	nop
 8002344:	00100002 	.word	0x00100002
 8002348:	ffff0000 	.word	0xffff0000
 800234c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023c4:	e0b8      	b.n	8002538 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	2200      	movs	r2, #0
 80023ce:	4966      	ldr	r1, [pc, #408]	; (8002568 <HAL_I2C_Master_Receive+0x448>)
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fa1b 	bl	800280c <I2C_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0bf      	b.n	8002560 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	2200      	movs	r2, #0
 800242a:	494f      	ldr	r1, [pc, #316]	; (8002568 <HAL_I2C_Master_Receive+0x448>)
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f9ed 	bl	800280c <I2C_WaitOnFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e091      	b.n	8002560 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691a      	ldr	r2, [r3, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024b0:	e042      	b.n	8002538 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fb00 	bl	8002abc <I2C_WaitOnRXNEFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e04c      	b.n	8002560 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b04      	cmp	r3, #4
 8002504:	d118      	bne.n	8002538 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f aec2 	bne.w	80022c6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e000      	b.n	8002560 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800255e:	2302      	movs	r3, #2
  }
}
 8002560:	4618      	mov	r0, r3
 8002562:	3728      	adds	r7, #40	; 0x28
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	00010004 	.word	0x00010004

0800256c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af02      	add	r7, sp, #8
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	460b      	mov	r3, r1
 800257a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2b08      	cmp	r3, #8
 8002586:	d006      	beq.n	8002596 <I2C_MasterRequestWrite+0x2a>
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d003      	beq.n	8002596 <I2C_MasterRequestWrite+0x2a>
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002594:	d108      	bne.n	80025a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	e00b      	b.n	80025c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	2b12      	cmp	r3, #18
 80025ae:	d107      	bne.n	80025c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 f91d 	bl	800280c <I2C_WaitOnFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00d      	beq.n	80025f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e6:	d103      	bne.n	80025f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e035      	b.n	8002660 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025fc:	d108      	bne.n	8002610 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025fe:	897b      	ldrh	r3, [r7, #10]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800260c:	611a      	str	r2, [r3, #16]
 800260e:	e01b      	b.n	8002648 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002610:	897b      	ldrh	r3, [r7, #10]
 8002612:	11db      	asrs	r3, r3, #7
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f003 0306 	and.w	r3, r3, #6
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f063 030f 	orn	r3, r3, #15
 8002620:	b2da      	uxtb	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	490e      	ldr	r1, [pc, #56]	; (8002668 <I2C_MasterRequestWrite+0xfc>)
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f943 	bl	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e010      	b.n	8002660 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800263e:	897b      	ldrh	r3, [r7, #10]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4907      	ldr	r1, [pc, #28]	; (800266c <I2C_MasterRequestWrite+0x100>)
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 f933 	bl	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	00010008 	.word	0x00010008
 800266c:	00010002 	.word	0x00010002

08002670 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	460b      	mov	r3, r1
 800267e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002694:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2b08      	cmp	r3, #8
 800269a:	d006      	beq.n	80026aa <I2C_MasterRequestRead+0x3a>
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d003      	beq.n	80026aa <I2C_MasterRequestRead+0x3a>
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026a8:	d108      	bne.n	80026bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e00b      	b.n	80026d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	2b11      	cmp	r3, #17
 80026c2:	d107      	bne.n	80026d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 f893 	bl	800280c <I2C_WaitOnFlagUntilTimeout>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00d      	beq.n	8002708 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026fa:	d103      	bne.n	8002704 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002702:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e079      	b.n	80027fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002710:	d108      	bne.n	8002724 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002712:	897b      	ldrh	r3, [r7, #10]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	b2da      	uxtb	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	611a      	str	r2, [r3, #16]
 8002722:	e05f      	b.n	80027e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002724:	897b      	ldrh	r3, [r7, #10]
 8002726:	11db      	asrs	r3, r3, #7
 8002728:	b2db      	uxtb	r3, r3
 800272a:	f003 0306 	and.w	r3, r3, #6
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f063 030f 	orn	r3, r3, #15
 8002734:	b2da      	uxtb	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4930      	ldr	r1, [pc, #192]	; (8002804 <I2C_MasterRequestRead+0x194>)
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f8b9 	bl	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e054      	b.n	80027fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002752:	897b      	ldrh	r3, [r7, #10]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	4929      	ldr	r1, [pc, #164]	; (8002808 <I2C_MasterRequestRead+0x198>)
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f8a9 	bl	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e044      	b.n	80027fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002796:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f831 	bl	800280c <I2C_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00d      	beq.n	80027cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027be:	d103      	bne.n	80027c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e017      	b.n	80027fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80027cc:	897b      	ldrh	r3, [r7, #10]
 80027ce:	11db      	asrs	r3, r3, #7
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f003 0306 	and.w	r3, r3, #6
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f063 030e 	orn	r3, r3, #14
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	4907      	ldr	r1, [pc, #28]	; (8002808 <I2C_MasterRequestRead+0x198>)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f865 	bl	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	00010008 	.word	0x00010008
 8002808:	00010002 	.word	0x00010002

0800280c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	4613      	mov	r3, r2
 800281a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800281c:	e025      	b.n	800286a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d021      	beq.n	800286a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002826:	f7fe fc2d 	bl	8001084 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d302      	bcc.n	800283c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d116      	bne.n	800286a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f043 0220 	orr.w	r2, r3, #32
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e023      	b.n	80028b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	d10d      	bne.n	8002890 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	43da      	mvns	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4013      	ands	r3, r2
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	bf0c      	ite	eq
 8002886:	2301      	moveq	r3, #1
 8002888:	2300      	movne	r3, #0
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	e00c      	b.n	80028aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	43da      	mvns	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4013      	ands	r3, r2
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	bf0c      	ite	eq
 80028a2:	2301      	moveq	r3, #1
 80028a4:	2300      	movne	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d0b6      	beq.n	800281e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028c8:	e051      	b.n	800296e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d8:	d123      	bne.n	8002922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f043 0204 	orr.w	r2, r3, #4
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e046      	b.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d021      	beq.n	800296e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292a:	f7fe fbab 	bl	8001084 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	429a      	cmp	r2, r3
 8002938:	d302      	bcc.n	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d116      	bne.n	800296e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f043 0220 	orr.w	r2, r3, #32
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e020      	b.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	0c1b      	lsrs	r3, r3, #16
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d10c      	bne.n	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4013      	ands	r3, r2
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	bf14      	ite	ne
 800298a:	2301      	movne	r3, #1
 800298c:	2300      	moveq	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	e00b      	b.n	80029aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	43da      	mvns	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4013      	ands	r3, r2
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d18d      	bne.n	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029c4:	e02d      	b.n	8002a22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f8ce 	bl	8002b68 <I2C_IsAcknowledgeFailed>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e02d      	b.n	8002a32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d021      	beq.n	8002a22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029de:	f7fe fb51 	bl	8001084 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d302      	bcc.n	80029f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d116      	bne.n	8002a22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f043 0220 	orr.w	r2, r3, #32
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e007      	b.n	8002a32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2c:	2b80      	cmp	r3, #128	; 0x80
 8002a2e:	d1ca      	bne.n	80029c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a46:	e02d      	b.n	8002aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f88d 	bl	8002b68 <I2C_IsAcknowledgeFailed>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e02d      	b.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5e:	d021      	beq.n	8002aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a60:	f7fe fb10 	bl	8001084 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d302      	bcc.n	8002a76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d116      	bne.n	8002aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	f043 0220 	orr.w	r2, r3, #32
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e007      	b.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d1ca      	bne.n	8002a48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ac8:	e042      	b.n	8002b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b10      	cmp	r3, #16
 8002ad6:	d119      	bne.n	8002b0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0210 	mvn.w	r2, #16
 8002ae0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e029      	b.n	8002b60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0c:	f7fe faba 	bl	8001084 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d302      	bcc.n	8002b22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d116      	bne.n	8002b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e007      	b.n	8002b60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d1b5      	bne.n	8002aca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7e:	d11b      	bne.n	8002bb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	f043 0204 	orr.w	r2, r3, #4
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0cc      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b68      	ldr	r3, [pc, #416]	; (8002d80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d90c      	bls.n	8002c04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b65      	ldr	r3, [pc, #404]	; (8002d80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b63      	ldr	r3, [pc, #396]	; (8002d80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0b8      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d020      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c1c:	4b59      	ldr	r3, [pc, #356]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4a58      	ldr	r2, [pc, #352]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c34:	4b53      	ldr	r3, [pc, #332]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4a52      	ldr	r2, [pc, #328]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c40:	4b50      	ldr	r3, [pc, #320]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	494d      	ldr	r1, [pc, #308]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d044      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	4b47      	ldr	r3, [pc, #284]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d119      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e07f      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c86:	4b3f      	ldr	r3, [pc, #252]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e06f      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c96:	4b3b      	ldr	r3, [pc, #236]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e067      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca6:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f023 0203 	bic.w	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4934      	ldr	r1, [pc, #208]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb8:	f7fe f9e4 	bl	8001084 <HAL_GetTick>
 8002cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc0:	f7fe f9e0 	bl	8001084 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e04f      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd6:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 020c 	and.w	r2, r3, #12
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d1eb      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <HAL_RCC_ClockConfig+0x1b8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d20c      	bcs.n	8002d10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b22      	ldr	r3, [pc, #136]	; (8002d80 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e032      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d1c:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4916      	ldr	r1, [pc, #88]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	490e      	ldr	r1, [pc, #56]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d4e:	f000 f887 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 8002d52:	4602      	mov	r2, r0
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	490a      	ldr	r1, [pc, #40]	; (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002d60:	5ccb      	ldrb	r3, [r1, r3]
 8002d62:	fa22 f303 	lsr.w	r3, r2, r3
 8002d66:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe f854 	bl	8000e1c <HAL_InitTick>

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023c00 	.word	0x40023c00
 8002d84:	40023800 	.word	0x40023800
 8002d88:	08007b78 	.word	0x08007b78
 8002d8c:	20000000 	.word	0x20000000
 8002d90:	20000004 	.word	0x20000004

08002d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	20000000 	.word	0x20000000

08002dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002db0:	f7ff fff0 	bl	8002d94 <HAL_RCC_GetHCLKFreq>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	0a9b      	lsrs	r3, r3, #10
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	4903      	ldr	r1, [pc, #12]	; (8002dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc2:	5ccb      	ldrb	r3, [r1, r3]
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	08007b88 	.word	0x08007b88

08002dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dd8:	f7ff ffdc 	bl	8002d94 <HAL_RCC_GetHCLKFreq>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	0b5b      	lsrs	r3, r3, #13
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	4903      	ldr	r1, [pc, #12]	; (8002df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dea:	5ccb      	ldrb	r3, [r1, r3]
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40023800 	.word	0x40023800
 8002df8:	08007b88 	.word	0x08007b88

08002dfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	220f      	movs	r2, #15
 8002e0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e0c:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <HAL_RCC_GetClockConfig+0x5c>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0203 	and.w	r2, r3, #3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e18:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <HAL_RCC_GetClockConfig+0x5c>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <HAL_RCC_GetClockConfig+0x5c>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e30:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_RCC_GetClockConfig+0x5c>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	08db      	lsrs	r3, r3, #3
 8002e36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <HAL_RCC_GetClockConfig+0x60>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 020f 	and.w	r2, r3, #15
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	601a      	str	r2, [r3, #0]
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40023c00 	.word	0x40023c00

08002e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e64:	b087      	sub	sp, #28
 8002e66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e68:	2600      	movs	r6, #0
 8002e6a:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8002e6c:	2600      	movs	r6, #0
 8002e6e:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8002e70:	2600      	movs	r6, #0
 8002e72:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8002e74:	2600      	movs	r6, #0
 8002e76:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e78:	2600      	movs	r6, #0
 8002e7a:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e7c:	4ea3      	ldr	r6, [pc, #652]	; (800310c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002e7e:	68b6      	ldr	r6, [r6, #8]
 8002e80:	f006 060c 	and.w	r6, r6, #12
 8002e84:	2e0c      	cmp	r6, #12
 8002e86:	f200 8137 	bhi.w	80030f8 <HAL_RCC_GetSysClockFreq+0x298>
 8002e8a:	f20f 0c08 	addw	ip, pc, #8
 8002e8e:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8002e92:	bf00      	nop
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	080030f9 	.word	0x080030f9
 8002e9c:	080030f9 	.word	0x080030f9
 8002ea0:	080030f9 	.word	0x080030f9
 8002ea4:	08002ecf 	.word	0x08002ecf
 8002ea8:	080030f9 	.word	0x080030f9
 8002eac:	080030f9 	.word	0x080030f9
 8002eb0:	080030f9 	.word	0x080030f9
 8002eb4:	08002ed5 	.word	0x08002ed5
 8002eb8:	080030f9 	.word	0x080030f9
 8002ebc:	080030f9 	.word	0x080030f9
 8002ec0:	080030f9 	.word	0x080030f9
 8002ec4:	08002feb 	.word	0x08002feb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec8:	4b91      	ldr	r3, [pc, #580]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002eca:	613b      	str	r3, [r7, #16]
       break;
 8002ecc:	e117      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ece:	4b91      	ldr	r3, [pc, #580]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002ed0:	613b      	str	r3, [r7, #16]
      break;
 8002ed2:	e114      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed4:	4b8d      	ldr	r3, [pc, #564]	; (800310c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002edc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ede:	4b8b      	ldr	r3, [pc, #556]	; (800310c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d024      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eea:	4b88      	ldr	r3, [pc, #544]	; (800310c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	099b      	lsrs	r3, r3, #6
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002efa:	f04f 0500 	mov.w	r5, #0
 8002efe:	ea02 0004 	and.w	r0, r2, r4
 8002f02:	ea03 0105 	and.w	r1, r3, r5
 8002f06:	4b83      	ldr	r3, [pc, #524]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002f08:	fb03 f201 	mul.w	r2, r3, r1
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	fb03 f300 	mul.w	r3, r3, r0
 8002f12:	4413      	add	r3, r2
 8002f14:	4a7f      	ldr	r2, [pc, #508]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002f16:	fba0 0102 	umull	r0, r1, r0, r2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	461a      	mov	r2, r3
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	f7fd f9c3 	bl	80002b0 <__aeabi_uldivmod>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4613      	mov	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	e04c      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f34:	4b75      	ldr	r3, [pc, #468]	; (800310c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	099b      	lsrs	r3, r3, #6
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f44:	f04f 0100 	mov.w	r1, #0
 8002f48:	ea02 0800 	and.w	r8, r2, r0
 8002f4c:	ea03 0901 	and.w	r9, r3, r1
 8002f50:	4640      	mov	r0, r8
 8002f52:	4649      	mov	r1, r9
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	014b      	lsls	r3, r1, #5
 8002f5e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f62:	0142      	lsls	r2, r0, #5
 8002f64:	4610      	mov	r0, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	ebb0 0008 	subs.w	r0, r0, r8
 8002f6c:	eb61 0109 	sbc.w	r1, r1, r9
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	018b      	lsls	r3, r1, #6
 8002f7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f7e:	0182      	lsls	r2, r0, #6
 8002f80:	1a12      	subs	r2, r2, r0
 8002f82:	eb63 0301 	sbc.w	r3, r3, r1
 8002f86:	f04f 0000 	mov.w	r0, #0
 8002f8a:	f04f 0100 	mov.w	r1, #0
 8002f8e:	00d9      	lsls	r1, r3, #3
 8002f90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f94:	00d0      	lsls	r0, r2, #3
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	eb12 0208 	adds.w	r2, r2, r8
 8002f9e:	eb43 0309 	adc.w	r3, r3, r9
 8002fa2:	f04f 0000 	mov.w	r0, #0
 8002fa6:	f04f 0100 	mov.w	r1, #0
 8002faa:	0299      	lsls	r1, r3, #10
 8002fac:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002fb0:	0290      	lsls	r0, r2, #10
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	f7fd f975 	bl	80002b0 <__aeabi_uldivmod>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4613      	mov	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fce:	4b4f      	ldr	r3, [pc, #316]	; (800310c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	0c1b      	lsrs	r3, r3, #16
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	3301      	adds	r3, #1
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	613b      	str	r3, [r7, #16]
      break;
 8002fe8:	e089      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fea:	4948      	ldr	r1, [pc, #288]	; (800310c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002fec:	6849      	ldr	r1, [r1, #4]
 8002fee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002ff2:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ff4:	4945      	ldr	r1, [pc, #276]	; (800310c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002ff6:	6849      	ldr	r1, [r1, #4]
 8002ff8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002ffc:	2900      	cmp	r1, #0
 8002ffe:	d024      	beq.n	800304a <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003000:	4942      	ldr	r1, [pc, #264]	; (800310c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003002:	6849      	ldr	r1, [r1, #4]
 8003004:	0989      	lsrs	r1, r1, #6
 8003006:	4608      	mov	r0, r1
 8003008:	f04f 0100 	mov.w	r1, #0
 800300c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003010:	f04f 0500 	mov.w	r5, #0
 8003014:	ea00 0204 	and.w	r2, r0, r4
 8003018:	ea01 0305 	and.w	r3, r1, r5
 800301c:	493d      	ldr	r1, [pc, #244]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800301e:	fb01 f003 	mul.w	r0, r1, r3
 8003022:	2100      	movs	r1, #0
 8003024:	fb01 f102 	mul.w	r1, r1, r2
 8003028:	1844      	adds	r4, r0, r1
 800302a:	493a      	ldr	r1, [pc, #232]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800302c:	fba2 0101 	umull	r0, r1, r2, r1
 8003030:	1863      	adds	r3, r4, r1
 8003032:	4619      	mov	r1, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	461a      	mov	r2, r3
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	f7fd f938 	bl	80002b0 <__aeabi_uldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4613      	mov	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	e04a      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304a:	4b30      	ldr	r3, [pc, #192]	; (800310c <HAL_RCC_GetSysClockFreq+0x2ac>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	099b      	lsrs	r3, r3, #6
 8003050:	461a      	mov	r2, r3
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	f240 10ff 	movw	r0, #511	; 0x1ff
 800305a:	f04f 0100 	mov.w	r1, #0
 800305e:	ea02 0400 	and.w	r4, r2, r0
 8003062:	ea03 0501 	and.w	r5, r3, r1
 8003066:	4620      	mov	r0, r4
 8003068:	4629      	mov	r1, r5
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	014b      	lsls	r3, r1, #5
 8003074:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003078:	0142      	lsls	r2, r0, #5
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	1b00      	subs	r0, r0, r4
 8003080:	eb61 0105 	sbc.w	r1, r1, r5
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	018b      	lsls	r3, r1, #6
 800308e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003092:	0182      	lsls	r2, r0, #6
 8003094:	1a12      	subs	r2, r2, r0
 8003096:	eb63 0301 	sbc.w	r3, r3, r1
 800309a:	f04f 0000 	mov.w	r0, #0
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	00d9      	lsls	r1, r3, #3
 80030a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030a8:	00d0      	lsls	r0, r2, #3
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	1912      	adds	r2, r2, r4
 80030b0:	eb45 0303 	adc.w	r3, r5, r3
 80030b4:	f04f 0000 	mov.w	r0, #0
 80030b8:	f04f 0100 	mov.w	r1, #0
 80030bc:	0299      	lsls	r1, r3, #10
 80030be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030c2:	0290      	lsls	r0, r2, #10
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	461a      	mov	r2, r3
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	f7fd f8ec 	bl	80002b0 <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4613      	mov	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80030e0:	4b0a      	ldr	r3, [pc, #40]	; (800310c <HAL_RCC_GetSysClockFreq+0x2ac>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	0f1b      	lsrs	r3, r3, #28
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	613b      	str	r3, [r7, #16]
      break;
 80030f6:	e002      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80030fa:	613b      	str	r3, [r7, #16]
      break;
 80030fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030fe:	693b      	ldr	r3, [r7, #16]
}
 8003100:	4618      	mov	r0, r3
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800
 8003110:	00f42400 	.word	0x00f42400
 8003114:	017d7840 	.word	0x017d7840

08003118 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e28d      	b.n	8003646 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8083 	beq.w	800323e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003138:	4b94      	ldr	r3, [pc, #592]	; (800338c <HAL_RCC_OscConfig+0x274>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b04      	cmp	r3, #4
 8003142:	d019      	beq.n	8003178 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003144:	4b91      	ldr	r3, [pc, #580]	; (800338c <HAL_RCC_OscConfig+0x274>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800314c:	2b08      	cmp	r3, #8
 800314e:	d106      	bne.n	800315e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003150:	4b8e      	ldr	r3, [pc, #568]	; (800338c <HAL_RCC_OscConfig+0x274>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800315c:	d00c      	beq.n	8003178 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315e:	4b8b      	ldr	r3, [pc, #556]	; (800338c <HAL_RCC_OscConfig+0x274>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003166:	2b0c      	cmp	r3, #12
 8003168:	d112      	bne.n	8003190 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316a:	4b88      	ldr	r3, [pc, #544]	; (800338c <HAL_RCC_OscConfig+0x274>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003176:	d10b      	bne.n	8003190 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003178:	4b84      	ldr	r3, [pc, #528]	; (800338c <HAL_RCC_OscConfig+0x274>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d05b      	beq.n	800323c <HAL_RCC_OscConfig+0x124>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d157      	bne.n	800323c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e25a      	b.n	8003646 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003198:	d106      	bne.n	80031a8 <HAL_RCC_OscConfig+0x90>
 800319a:	4b7c      	ldr	r3, [pc, #496]	; (800338c <HAL_RCC_OscConfig+0x274>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a7b      	ldr	r2, [pc, #492]	; (800338c <HAL_RCC_OscConfig+0x274>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e01d      	b.n	80031e4 <HAL_RCC_OscConfig+0xcc>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0xb4>
 80031b2:	4b76      	ldr	r3, [pc, #472]	; (800338c <HAL_RCC_OscConfig+0x274>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a75      	ldr	r2, [pc, #468]	; (800338c <HAL_RCC_OscConfig+0x274>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b73      	ldr	r3, [pc, #460]	; (800338c <HAL_RCC_OscConfig+0x274>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a72      	ldr	r2, [pc, #456]	; (800338c <HAL_RCC_OscConfig+0x274>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0xcc>
 80031cc:	4b6f      	ldr	r3, [pc, #444]	; (800338c <HAL_RCC_OscConfig+0x274>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a6e      	ldr	r2, [pc, #440]	; (800338c <HAL_RCC_OscConfig+0x274>)
 80031d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b6c      	ldr	r3, [pc, #432]	; (800338c <HAL_RCC_OscConfig+0x274>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a6b      	ldr	r2, [pc, #428]	; (800338c <HAL_RCC_OscConfig+0x274>)
 80031de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fd ff4a 	bl	8001084 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f4:	f7fd ff46 	bl	8001084 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e21f      	b.n	8003646 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	4b61      	ldr	r3, [pc, #388]	; (800338c <HAL_RCC_OscConfig+0x274>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0xdc>
 8003212:	e014      	b.n	800323e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fd ff36 	bl	8001084 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321c:	f7fd ff32 	bl	8001084 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	; 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e20b      	b.n	8003646 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322e:	4b57      	ldr	r3, [pc, #348]	; (800338c <HAL_RCC_OscConfig+0x274>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x104>
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d06f      	beq.n	800332a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800324a:	4b50      	ldr	r3, [pc, #320]	; (800338c <HAL_RCC_OscConfig+0x274>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b00      	cmp	r3, #0
 8003254:	d017      	beq.n	8003286 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003256:	4b4d      	ldr	r3, [pc, #308]	; (800338c <HAL_RCC_OscConfig+0x274>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800325e:	2b08      	cmp	r3, #8
 8003260:	d105      	bne.n	800326e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003262:	4b4a      	ldr	r3, [pc, #296]	; (800338c <HAL_RCC_OscConfig+0x274>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00b      	beq.n	8003286 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800326e:	4b47      	ldr	r3, [pc, #284]	; (800338c <HAL_RCC_OscConfig+0x274>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003276:	2b0c      	cmp	r3, #12
 8003278:	d11c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800327a:	4b44      	ldr	r3, [pc, #272]	; (800338c <HAL_RCC_OscConfig+0x274>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d116      	bne.n	80032b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003286:	4b41      	ldr	r3, [pc, #260]	; (800338c <HAL_RCC_OscConfig+0x274>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_RCC_OscConfig+0x186>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d001      	beq.n	800329e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e1d3      	b.n	8003646 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329e:	4b3b      	ldr	r3, [pc, #236]	; (800338c <HAL_RCC_OscConfig+0x274>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4937      	ldr	r1, [pc, #220]	; (800338c <HAL_RCC_OscConfig+0x274>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b2:	e03a      	b.n	800332a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d020      	beq.n	80032fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032bc:	4b34      	ldr	r3, [pc, #208]	; (8003390 <HAL_RCC_OscConfig+0x278>)
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fd fedf 	bl	8001084 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ca:	f7fd fedb 	bl	8001084 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e1b4      	b.n	8003646 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032dc:	4b2b      	ldr	r3, [pc, #172]	; (800338c <HAL_RCC_OscConfig+0x274>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e8:	4b28      	ldr	r3, [pc, #160]	; (800338c <HAL_RCC_OscConfig+0x274>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4925      	ldr	r1, [pc, #148]	; (800338c <HAL_RCC_OscConfig+0x274>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	600b      	str	r3, [r1, #0]
 80032fc:	e015      	b.n	800332a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032fe:	4b24      	ldr	r3, [pc, #144]	; (8003390 <HAL_RCC_OscConfig+0x278>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fd febe 	bl	8001084 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800330c:	f7fd feba 	bl	8001084 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e193      	b.n	8003646 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331e:	4b1b      	ldr	r3, [pc, #108]	; (800338c <HAL_RCC_OscConfig+0x274>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d036      	beq.n	80033a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d016      	beq.n	800336c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800333e:	4b15      	ldr	r3, [pc, #84]	; (8003394 <HAL_RCC_OscConfig+0x27c>)
 8003340:	2201      	movs	r2, #1
 8003342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003344:	f7fd fe9e 	bl	8001084 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800334c:	f7fd fe9a 	bl	8001084 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e173      	b.n	8003646 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335e:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_RCC_OscConfig+0x274>)
 8003360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0x234>
 800336a:	e01b      	b.n	80033a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_RCC_OscConfig+0x27c>)
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003372:	f7fd fe87 	bl	8001084 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003378:	e00e      	b.n	8003398 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800337a:	f7fd fe83 	bl	8001084 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d907      	bls.n	8003398 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e15c      	b.n	8003646 <HAL_RCC_OscConfig+0x52e>
 800338c:	40023800 	.word	0x40023800
 8003390:	42470000 	.word	0x42470000
 8003394:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003398:	4b8a      	ldr	r3, [pc, #552]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 800339a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1ea      	bne.n	800337a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 8097 	beq.w	80034e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b2:	2300      	movs	r3, #0
 80033b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b6:	4b83      	ldr	r3, [pc, #524]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10f      	bne.n	80033e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	4b7f      	ldr	r3, [pc, #508]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	4a7e      	ldr	r2, [pc, #504]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 80033cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d0:	6413      	str	r3, [r2, #64]	; 0x40
 80033d2:	4b7c      	ldr	r3, [pc, #496]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033de:	2301      	movs	r3, #1
 80033e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e2:	4b79      	ldr	r3, [pc, #484]	; (80035c8 <HAL_RCC_OscConfig+0x4b0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d118      	bne.n	8003420 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ee:	4b76      	ldr	r3, [pc, #472]	; (80035c8 <HAL_RCC_OscConfig+0x4b0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a75      	ldr	r2, [pc, #468]	; (80035c8 <HAL_RCC_OscConfig+0x4b0>)
 80033f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033fa:	f7fd fe43 	bl	8001084 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003402:	f7fd fe3f 	bl	8001084 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e118      	b.n	8003646 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003414:	4b6c      	ldr	r3, [pc, #432]	; (80035c8 <HAL_RCC_OscConfig+0x4b0>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d106      	bne.n	8003436 <HAL_RCC_OscConfig+0x31e>
 8003428:	4b66      	ldr	r3, [pc, #408]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	4a65      	ldr	r2, [pc, #404]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	6713      	str	r3, [r2, #112]	; 0x70
 8003434:	e01c      	b.n	8003470 <HAL_RCC_OscConfig+0x358>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b05      	cmp	r3, #5
 800343c:	d10c      	bne.n	8003458 <HAL_RCC_OscConfig+0x340>
 800343e:	4b61      	ldr	r3, [pc, #388]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	4a60      	ldr	r2, [pc, #384]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 8003444:	f043 0304 	orr.w	r3, r3, #4
 8003448:	6713      	str	r3, [r2, #112]	; 0x70
 800344a:	4b5e      	ldr	r3, [pc, #376]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	4a5d      	ldr	r2, [pc, #372]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	6713      	str	r3, [r2, #112]	; 0x70
 8003456:	e00b      	b.n	8003470 <HAL_RCC_OscConfig+0x358>
 8003458:	4b5a      	ldr	r3, [pc, #360]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345c:	4a59      	ldr	r2, [pc, #356]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 800345e:	f023 0301 	bic.w	r3, r3, #1
 8003462:	6713      	str	r3, [r2, #112]	; 0x70
 8003464:	4b57      	ldr	r3, [pc, #348]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	4a56      	ldr	r2, [pc, #344]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 800346a:	f023 0304 	bic.w	r3, r3, #4
 800346e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d015      	beq.n	80034a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003478:	f7fd fe04 	bl	8001084 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347e:	e00a      	b.n	8003496 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003480:	f7fd fe00 	bl	8001084 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e0d7      	b.n	8003646 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003496:	4b4b      	ldr	r3, [pc, #300]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0ee      	beq.n	8003480 <HAL_RCC_OscConfig+0x368>
 80034a2:	e014      	b.n	80034ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7fd fdee 	bl	8001084 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fd fdea 	bl	8001084 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0c1      	b.n	8003646 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c2:	4b40      	ldr	r3, [pc, #256]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1ee      	bne.n	80034ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d105      	bne.n	80034e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d4:	4b3b      	ldr	r3, [pc, #236]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	4a3a      	ldr	r2, [pc, #232]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 80034da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80ad 	beq.w	8003644 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ea:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d060      	beq.n	80035b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d145      	bne.n	800358a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fe:	4b33      	ldr	r3, [pc, #204]	; (80035cc <HAL_RCC_OscConfig+0x4b4>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fd fdbe 	bl	8001084 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800350c:	f7fd fdba 	bl	8001084 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e093      	b.n	8003646 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	019b      	lsls	r3, r3, #6
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	085b      	lsrs	r3, r3, #1
 8003542:	3b01      	subs	r3, #1
 8003544:	041b      	lsls	r3, r3, #16
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	061b      	lsls	r3, r3, #24
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	071b      	lsls	r3, r3, #28
 8003556:	491b      	ldr	r1, [pc, #108]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 8003558:	4313      	orrs	r3, r2
 800355a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800355c:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_RCC_OscConfig+0x4b4>)
 800355e:	2201      	movs	r2, #1
 8003560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003562:	f7fd fd8f 	bl	8001084 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356a:	f7fd fd8b 	bl	8001084 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e064      	b.n	8003646 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x452>
 8003588:	e05c      	b.n	8003644 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358a:	4b10      	ldr	r3, [pc, #64]	; (80035cc <HAL_RCC_OscConfig+0x4b4>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fd fd78 	bl	8001084 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003598:	f7fd fd74 	bl	8001084 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e04d      	b.n	8003646 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_RCC_OscConfig+0x4ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x480>
 80035b6:	e045      	b.n	8003644 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d107      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e040      	b.n	8003646 <HAL_RCC_OscConfig+0x52e>
 80035c4:	40023800 	.word	0x40023800
 80035c8:	40007000 	.word	0x40007000
 80035cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035d0:	4b1f      	ldr	r3, [pc, #124]	; (8003650 <HAL_RCC_OscConfig+0x538>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d030      	beq.n	8003640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d129      	bne.n	8003640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d122      	bne.n	8003640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003600:	4013      	ands	r3, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003606:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003608:	4293      	cmp	r3, r2
 800360a:	d119      	bne.n	8003640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	3b01      	subs	r3, #1
 800361a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d10f      	bne.n	8003640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800362c:	429a      	cmp	r2, r3
 800362e:	d107      	bne.n	8003640 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40023800 	.word	0x40023800

08003654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e041      	b.n	80036ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f839 	bl	80036f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f000 f9d8 	bl	8003a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d001      	beq.n	8003720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e04e      	b.n	80037be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a23      	ldr	r2, [pc, #140]	; (80037cc <HAL_TIM_Base_Start_IT+0xc4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374a:	d01d      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1f      	ldr	r2, [pc, #124]	; (80037d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1c      	ldr	r2, [pc, #112]	; (80037d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <HAL_TIM_Base_Start_IT+0xd4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a19      	ldr	r2, [pc, #100]	; (80037e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d111      	bne.n	80037ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b06      	cmp	r3, #6
 8003798:	d010      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037aa:	e007      	b.n	80037bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40010000 	.word	0x40010000
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40000800 	.word	0x40000800
 80037d8:	40000c00 	.word	0x40000c00
 80037dc:	40010400 	.word	0x40010400
 80037e0:	40014000 	.word	0x40014000
 80037e4:	40001800 	.word	0x40001800

080037e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d122      	bne.n	8003844 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b02      	cmp	r3, #2
 800380a:	d11b      	bne.n	8003844 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0202 	mvn.w	r2, #2
 8003814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f8ee 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 8003830:	e005      	b.n	800383e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8e0 	bl	80039f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f8f1 	bl	8003a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b04      	cmp	r3, #4
 8003850:	d122      	bne.n	8003898 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b04      	cmp	r3, #4
 800385e:	d11b      	bne.n	8003898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0204 	mvn.w	r2, #4
 8003868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2202      	movs	r2, #2
 800386e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f8c4 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 8003884:	e005      	b.n	8003892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f8b6 	bl	80039f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f8c7 	bl	8003a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d122      	bne.n	80038ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0308 	and.w	r3, r3, #8
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d11b      	bne.n	80038ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0208 	mvn.w	r2, #8
 80038bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2204      	movs	r2, #4
 80038c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f89a 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 80038d8:	e005      	b.n	80038e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f88c 	bl	80039f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f89d 	bl	8003a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b10      	cmp	r3, #16
 80038f8:	d122      	bne.n	8003940 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b10      	cmp	r3, #16
 8003906:	d11b      	bne.n	8003940 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0210 	mvn.w	r2, #16
 8003910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2208      	movs	r2, #8
 8003916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f870 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 800392c:	e005      	b.n	800393a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f862 	bl	80039f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f873 	bl	8003a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b01      	cmp	r3, #1
 800394c:	d10e      	bne.n	800396c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b01      	cmp	r3, #1
 800395a:	d107      	bne.n	800396c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0201 	mvn.w	r2, #1
 8003964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fd f920 	bl	8000bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003976:	2b80      	cmp	r3, #128	; 0x80
 8003978:	d10e      	bne.n	8003998 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003984:	2b80      	cmp	r3, #128	; 0x80
 8003986:	d107      	bne.n	8003998 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f902 	bl	8003b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d10e      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b40      	cmp	r3, #64	; 0x40
 80039b2:	d107      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f838 	bl	8003a34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	d10e      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d107      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0220 	mvn.w	r2, #32
 80039e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f8cc 	bl	8003b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039f0:	bf00      	nop
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a40      	ldr	r2, [pc, #256]	; (8003b5c <TIM_Base_SetConfig+0x114>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d013      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a66:	d00f      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a3d      	ldr	r2, [pc, #244]	; (8003b60 <TIM_Base_SetConfig+0x118>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00b      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a3c      	ldr	r2, [pc, #240]	; (8003b64 <TIM_Base_SetConfig+0x11c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d007      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a3b      	ldr	r2, [pc, #236]	; (8003b68 <TIM_Base_SetConfig+0x120>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d003      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a3a      	ldr	r2, [pc, #232]	; (8003b6c <TIM_Base_SetConfig+0x124>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d108      	bne.n	8003a9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a2f      	ldr	r2, [pc, #188]	; (8003b5c <TIM_Base_SetConfig+0x114>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d02b      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa8:	d027      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a2c      	ldr	r2, [pc, #176]	; (8003b60 <TIM_Base_SetConfig+0x118>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d023      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a2b      	ldr	r2, [pc, #172]	; (8003b64 <TIM_Base_SetConfig+0x11c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01f      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a2a      	ldr	r2, [pc, #168]	; (8003b68 <TIM_Base_SetConfig+0x120>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01b      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a29      	ldr	r2, [pc, #164]	; (8003b6c <TIM_Base_SetConfig+0x124>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d017      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a28      	ldr	r2, [pc, #160]	; (8003b70 <TIM_Base_SetConfig+0x128>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a27      	ldr	r2, [pc, #156]	; (8003b74 <TIM_Base_SetConfig+0x12c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00f      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <TIM_Base_SetConfig+0x130>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00b      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a25      	ldr	r2, [pc, #148]	; (8003b7c <TIM_Base_SetConfig+0x134>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d007      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a24      	ldr	r2, [pc, #144]	; (8003b80 <TIM_Base_SetConfig+0x138>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d003      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a23      	ldr	r2, [pc, #140]	; (8003b84 <TIM_Base_SetConfig+0x13c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d108      	bne.n	8003b0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <TIM_Base_SetConfig+0x114>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d003      	beq.n	8003b40 <TIM_Base_SetConfig+0xf8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a0c      	ldr	r2, [pc, #48]	; (8003b6c <TIM_Base_SetConfig+0x124>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d103      	bne.n	8003b48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	615a      	str	r2, [r3, #20]
}
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40010000 	.word	0x40010000
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40000800 	.word	0x40000800
 8003b68:	40000c00 	.word	0x40000c00
 8003b6c:	40010400 	.word	0x40010400
 8003b70:	40014000 	.word	0x40014000
 8003b74:	40014400 	.word	0x40014400
 8003b78:	40014800 	.word	0x40014800
 8003b7c:	40001800 	.word	0x40001800
 8003b80:	40001c00 	.word	0x40001c00
 8003b84:	40002000 	.word	0x40002000

08003b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e03f      	b.n	8003c42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fd f874 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2224      	movs	r2, #36	; 0x24
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 faad 	bl	8004154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b08a      	sub	sp, #40	; 0x28
 8003c4e:	af02      	add	r7, sp, #8
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	4613      	mov	r3, r2
 8003c58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d17c      	bne.n	8003d64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_UART_Transmit+0x2c>
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e075      	b.n	8003d66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_UART_Transmit+0x3e>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e06e      	b.n	8003d66 <HAL_UART_Transmit+0x11c>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2221      	movs	r2, #33	; 0x21
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c9e:	f7fd f9f1 	bl	8001084 <HAL_GetTick>
 8003ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	88fa      	ldrh	r2, [r7, #6]
 8003ca8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	88fa      	ldrh	r2, [r7, #6]
 8003cae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb8:	d108      	bne.n	8003ccc <HAL_UART_Transmit+0x82>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d104      	bne.n	8003ccc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	e003      	b.n	8003cd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cdc:	e02a      	b.n	8003d34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2180      	movs	r1, #128	; 0x80
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f940 	bl	8003f6e <UART_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e036      	b.n	8003d66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10b      	bne.n	8003d16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	3302      	adds	r3, #2
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	e007      	b.n	8003d26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	781a      	ldrb	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	3301      	adds	r3, #1
 8003d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1cf      	bne.n	8003cde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2200      	movs	r2, #0
 8003d46:	2140      	movs	r1, #64	; 0x40
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f910 	bl	8003f6e <UART_WaitOnFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e006      	b.n	8003d66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	e000      	b.n	8003d66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
  }
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3720      	adds	r7, #32
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d11d      	bne.n	8003dc4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_UART_Receive_DMA+0x26>
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e016      	b.n	8003dc6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_UART_Receive_DMA+0x38>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e00f      	b.n	8003dc6 <HAL_UART_Receive_DMA+0x58>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	461a      	mov	r2, r3
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f922 	bl	8004004 <UART_Start_Receive_DMA>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	e000      	b.n	8003dc6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003dc4:	2302      	movs	r3, #2
  }
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d12a      	bne.n	8003e80 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e3e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e5e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d107      	bne.n	8003e80 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0210 	bic.w	r2, r2, #16
 8003e7e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d106      	bne.n	8003e96 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f7ff ffb1 	bl	8003df6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e94:	e002      	b.n	8003e9c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7fc fd14 	bl	80008c4 <HAL_UART_RxCpltCallback>
}
 8003e9c:	bf00      	nop
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d108      	bne.n	8003ecc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff ff96 	bl	8003df6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003eca:	e002      	b.n	8003ed2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7ff ff7e 	bl	8003dce <HAL_UART_RxHalfCpltCallback>
}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b80      	cmp	r3, #128	; 0x80
 8003ef8:	bf0c      	ite	eq
 8003efa:	2301      	moveq	r3, #1
 8003efc:	2300      	movne	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b21      	cmp	r3, #33	; 0x21
 8003f0c:	d108      	bne.n	8003f20 <UART_DMAError+0x46>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2200      	movs	r2, #0
 8003f18:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003f1a:	68b8      	ldr	r0, [r7, #8]
 8003f1c:	f000 f8d6 	bl	80040cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	bf0c      	ite	eq
 8003f2e:	2301      	moveq	r3, #1
 8003f30:	2300      	movne	r3, #0
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b22      	cmp	r3, #34	; 0x22
 8003f40:	d108      	bne.n	8003f54 <UART_DMAError+0x7a>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f4e:	68b8      	ldr	r0, [r7, #8]
 8003f50:	f000 f8d2 	bl	80040f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	f043 0210 	orr.w	r2, r3, #16
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f60:	68b8      	ldr	r0, [r7, #8]
 8003f62:	f7ff ff3e 	bl	8003de2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	603b      	str	r3, [r7, #0]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f7e:	e02c      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f86:	d028      	beq.n	8003fda <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d007      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f8e:	f7fd f879 	bl	8001084 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d21d      	bcs.n	8003fda <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0201 	bic.w	r2, r2, #1
 8003fbc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e00f      	b.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	bf0c      	ite	eq
 8003fea:	2301      	moveq	r3, #1
 8003fec:	2300      	movne	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d0c3      	beq.n	8003f80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	4613      	mov	r3, r2
 8004010:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	88fa      	ldrh	r2, [r7, #6]
 800401c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2222      	movs	r2, #34	; 0x22
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	4a23      	ldr	r2, [pc, #140]	; (80040c0 <UART_Start_Receive_DMA+0xbc>)
 8004032:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	4a22      	ldr	r2, [pc, #136]	; (80040c4 <UART_Start_Receive_DMA+0xc0>)
 800403a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	4a21      	ldr	r2, [pc, #132]	; (80040c8 <UART_Start_Receive_DMA+0xc4>)
 8004042:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	2200      	movs	r2, #0
 800404a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800404c:	f107 0308 	add.w	r3, r7, #8
 8004050:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3304      	adds	r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	f7fd f9aa 	bl	80013bc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004068:	2300      	movs	r3, #0
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004094:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0201 	orr.w	r2, r2, #1
 80040a4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695a      	ldr	r2, [r3, #20]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040b4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	08003e0f 	.word	0x08003e0f
 80040c4:	08003ea5 	.word	0x08003ea5
 80040c8:	08003edb 	.word	0x08003edb

080040cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80040e2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800410e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	2b01      	cmp	r3, #1
 8004126:	d107      	bne.n	8004138 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0210 	bic.w	r2, r2, #16
 8004136:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004158:	b09f      	sub	sp, #124	; 0x7c
 800415a:	af00      	add	r7, sp, #0
 800415c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800415e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416a:	68d9      	ldr	r1, [r3, #12]
 800416c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	ea40 0301 	orr.w	r3, r0, r1
 8004174:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	431a      	orrs	r2, r3
 8004180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	431a      	orrs	r2, r3
 8004186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	4313      	orrs	r3, r2
 800418c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800418e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004198:	f021 010c 	bic.w	r1, r1, #12
 800419c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041a2:	430b      	orrs	r3, r1
 80041a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b2:	6999      	ldr	r1, [r3, #24]
 80041b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	ea40 0301 	orr.w	r3, r0, r1
 80041bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4bc5      	ldr	r3, [pc, #788]	; (80044d8 <UART_SetConfig+0x384>)
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d004      	beq.n	80041d2 <UART_SetConfig+0x7e>
 80041c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4bc3      	ldr	r3, [pc, #780]	; (80044dc <UART_SetConfig+0x388>)
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d103      	bne.n	80041da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041d2:	f7fe fdff 	bl	8002dd4 <HAL_RCC_GetPCLK2Freq>
 80041d6:	6778      	str	r0, [r7, #116]	; 0x74
 80041d8:	e002      	b.n	80041e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041da:	f7fe fde7 	bl	8002dac <HAL_RCC_GetPCLK1Freq>
 80041de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041e8:	f040 80b6 	bne.w	8004358 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ee:	461c      	mov	r4, r3
 80041f0:	f04f 0500 	mov.w	r5, #0
 80041f4:	4622      	mov	r2, r4
 80041f6:	462b      	mov	r3, r5
 80041f8:	1891      	adds	r1, r2, r2
 80041fa:	6439      	str	r1, [r7, #64]	; 0x40
 80041fc:	415b      	adcs	r3, r3
 80041fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004200:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004204:	1912      	adds	r2, r2, r4
 8004206:	eb45 0303 	adc.w	r3, r5, r3
 800420a:	f04f 0000 	mov.w	r0, #0
 800420e:	f04f 0100 	mov.w	r1, #0
 8004212:	00d9      	lsls	r1, r3, #3
 8004214:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004218:	00d0      	lsls	r0, r2, #3
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	1911      	adds	r1, r2, r4
 8004220:	6639      	str	r1, [r7, #96]	; 0x60
 8004222:	416b      	adcs	r3, r5
 8004224:	667b      	str	r3, [r7, #100]	; 0x64
 8004226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	461a      	mov	r2, r3
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	1891      	adds	r1, r2, r2
 8004232:	63b9      	str	r1, [r7, #56]	; 0x38
 8004234:	415b      	adcs	r3, r3
 8004236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004238:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800423c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004240:	f7fc f836 	bl	80002b0 <__aeabi_uldivmod>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4ba5      	ldr	r3, [pc, #660]	; (80044e0 <UART_SetConfig+0x38c>)
 800424a:	fba3 2302 	umull	r2, r3, r3, r2
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	011e      	lsls	r6, r3, #4
 8004252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004254:	461c      	mov	r4, r3
 8004256:	f04f 0500 	mov.w	r5, #0
 800425a:	4622      	mov	r2, r4
 800425c:	462b      	mov	r3, r5
 800425e:	1891      	adds	r1, r2, r2
 8004260:	6339      	str	r1, [r7, #48]	; 0x30
 8004262:	415b      	adcs	r3, r3
 8004264:	637b      	str	r3, [r7, #52]	; 0x34
 8004266:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800426a:	1912      	adds	r2, r2, r4
 800426c:	eb45 0303 	adc.w	r3, r5, r3
 8004270:	f04f 0000 	mov.w	r0, #0
 8004274:	f04f 0100 	mov.w	r1, #0
 8004278:	00d9      	lsls	r1, r3, #3
 800427a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800427e:	00d0      	lsls	r0, r2, #3
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	1911      	adds	r1, r2, r4
 8004286:	65b9      	str	r1, [r7, #88]	; 0x58
 8004288:	416b      	adcs	r3, r5
 800428a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800428c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	461a      	mov	r2, r3
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	1891      	adds	r1, r2, r2
 8004298:	62b9      	str	r1, [r7, #40]	; 0x28
 800429a:	415b      	adcs	r3, r3
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800429e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80042a6:	f7fc f803 	bl	80002b0 <__aeabi_uldivmod>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4b8c      	ldr	r3, [pc, #560]	; (80044e0 <UART_SetConfig+0x38c>)
 80042b0:	fba3 1302 	umull	r1, r3, r3, r2
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	2164      	movs	r1, #100	; 0x64
 80042b8:	fb01 f303 	mul.w	r3, r1, r3
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	3332      	adds	r3, #50	; 0x32
 80042c2:	4a87      	ldr	r2, [pc, #540]	; (80044e0 <UART_SetConfig+0x38c>)
 80042c4:	fba2 2303 	umull	r2, r3, r2, r3
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042d0:	441e      	add	r6, r3
 80042d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d4:	4618      	mov	r0, r3
 80042d6:	f04f 0100 	mov.w	r1, #0
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	1894      	adds	r4, r2, r2
 80042e0:	623c      	str	r4, [r7, #32]
 80042e2:	415b      	adcs	r3, r3
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
 80042e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ea:	1812      	adds	r2, r2, r0
 80042ec:	eb41 0303 	adc.w	r3, r1, r3
 80042f0:	f04f 0400 	mov.w	r4, #0
 80042f4:	f04f 0500 	mov.w	r5, #0
 80042f8:	00dd      	lsls	r5, r3, #3
 80042fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042fe:	00d4      	lsls	r4, r2, #3
 8004300:	4622      	mov	r2, r4
 8004302:	462b      	mov	r3, r5
 8004304:	1814      	adds	r4, r2, r0
 8004306:	653c      	str	r4, [r7, #80]	; 0x50
 8004308:	414b      	adcs	r3, r1
 800430a:	657b      	str	r3, [r7, #84]	; 0x54
 800430c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	461a      	mov	r2, r3
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	1891      	adds	r1, r2, r2
 8004318:	61b9      	str	r1, [r7, #24]
 800431a:	415b      	adcs	r3, r3
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004322:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004326:	f7fb ffc3 	bl	80002b0 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4b6c      	ldr	r3, [pc, #432]	; (80044e0 <UART_SetConfig+0x38c>)
 8004330:	fba3 1302 	umull	r1, r3, r3, r2
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	2164      	movs	r1, #100	; 0x64
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	3332      	adds	r3, #50	; 0x32
 8004342:	4a67      	ldr	r2, [pc, #412]	; (80044e0 <UART_SetConfig+0x38c>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	f003 0207 	and.w	r2, r3, #7
 800434e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4432      	add	r2, r6
 8004354:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004356:	e0b9      	b.n	80044cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800435a:	461c      	mov	r4, r3
 800435c:	f04f 0500 	mov.w	r5, #0
 8004360:	4622      	mov	r2, r4
 8004362:	462b      	mov	r3, r5
 8004364:	1891      	adds	r1, r2, r2
 8004366:	6139      	str	r1, [r7, #16]
 8004368:	415b      	adcs	r3, r3
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004370:	1912      	adds	r2, r2, r4
 8004372:	eb45 0303 	adc.w	r3, r5, r3
 8004376:	f04f 0000 	mov.w	r0, #0
 800437a:	f04f 0100 	mov.w	r1, #0
 800437e:	00d9      	lsls	r1, r3, #3
 8004380:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004384:	00d0      	lsls	r0, r2, #3
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	eb12 0804 	adds.w	r8, r2, r4
 800438e:	eb43 0905 	adc.w	r9, r3, r5
 8004392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	4618      	mov	r0, r3
 8004398:	f04f 0100 	mov.w	r1, #0
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	008b      	lsls	r3, r1, #2
 80043a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043aa:	0082      	lsls	r2, r0, #2
 80043ac:	4640      	mov	r0, r8
 80043ae:	4649      	mov	r1, r9
 80043b0:	f7fb ff7e 	bl	80002b0 <__aeabi_uldivmod>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4b49      	ldr	r3, [pc, #292]	; (80044e0 <UART_SetConfig+0x38c>)
 80043ba:	fba3 2302 	umull	r2, r3, r3, r2
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	011e      	lsls	r6, r3, #4
 80043c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c4:	4618      	mov	r0, r3
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	1894      	adds	r4, r2, r2
 80043d0:	60bc      	str	r4, [r7, #8]
 80043d2:	415b      	adcs	r3, r3
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043da:	1812      	adds	r2, r2, r0
 80043dc:	eb41 0303 	adc.w	r3, r1, r3
 80043e0:	f04f 0400 	mov.w	r4, #0
 80043e4:	f04f 0500 	mov.w	r5, #0
 80043e8:	00dd      	lsls	r5, r3, #3
 80043ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043ee:	00d4      	lsls	r4, r2, #3
 80043f0:	4622      	mov	r2, r4
 80043f2:	462b      	mov	r3, r5
 80043f4:	1814      	adds	r4, r2, r0
 80043f6:	64bc      	str	r4, [r7, #72]	; 0x48
 80043f8:	414b      	adcs	r3, r1
 80043fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	4618      	mov	r0, r3
 8004402:	f04f 0100 	mov.w	r1, #0
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	008b      	lsls	r3, r1, #2
 8004410:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004414:	0082      	lsls	r2, r0, #2
 8004416:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800441a:	f7fb ff49 	bl	80002b0 <__aeabi_uldivmod>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	4b2f      	ldr	r3, [pc, #188]	; (80044e0 <UART_SetConfig+0x38c>)
 8004424:	fba3 1302 	umull	r1, r3, r3, r2
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	2164      	movs	r1, #100	; 0x64
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	3332      	adds	r3, #50	; 0x32
 8004436:	4a2a      	ldr	r2, [pc, #168]	; (80044e0 <UART_SetConfig+0x38c>)
 8004438:	fba2 2303 	umull	r2, r3, r2, r3
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004442:	441e      	add	r6, r3
 8004444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004446:	4618      	mov	r0, r3
 8004448:	f04f 0100 	mov.w	r1, #0
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	1894      	adds	r4, r2, r2
 8004452:	603c      	str	r4, [r7, #0]
 8004454:	415b      	adcs	r3, r3
 8004456:	607b      	str	r3, [r7, #4]
 8004458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800445c:	1812      	adds	r2, r2, r0
 800445e:	eb41 0303 	adc.w	r3, r1, r3
 8004462:	f04f 0400 	mov.w	r4, #0
 8004466:	f04f 0500 	mov.w	r5, #0
 800446a:	00dd      	lsls	r5, r3, #3
 800446c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004470:	00d4      	lsls	r4, r2, #3
 8004472:	4622      	mov	r2, r4
 8004474:	462b      	mov	r3, r5
 8004476:	eb12 0a00 	adds.w	sl, r2, r0
 800447a:	eb43 0b01 	adc.w	fp, r3, r1
 800447e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	4618      	mov	r0, r3
 8004484:	f04f 0100 	mov.w	r1, #0
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	008b      	lsls	r3, r1, #2
 8004492:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004496:	0082      	lsls	r2, r0, #2
 8004498:	4650      	mov	r0, sl
 800449a:	4659      	mov	r1, fp
 800449c:	f7fb ff08 	bl	80002b0 <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <UART_SetConfig+0x38c>)
 80044a6:	fba3 1302 	umull	r1, r3, r3, r2
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	2164      	movs	r1, #100	; 0x64
 80044ae:	fb01 f303 	mul.w	r3, r1, r3
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	3332      	adds	r3, #50	; 0x32
 80044b8:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <UART_SetConfig+0x38c>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	f003 020f 	and.w	r2, r3, #15
 80044c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4432      	add	r2, r6
 80044ca:	609a      	str	r2, [r3, #8]
}
 80044cc:	bf00      	nop
 80044ce:	377c      	adds	r7, #124	; 0x7c
 80044d0:	46bd      	mov	sp, r7
 80044d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d6:	bf00      	nop
 80044d8:	40011000 	.word	0x40011000
 80044dc:	40011400 	.word	0x40011400
 80044e0:	51eb851f 	.word	0x51eb851f

080044e4 <__NVIC_SetPriority>:
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	6039      	str	r1, [r7, #0]
 80044ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	db0a      	blt.n	800450e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	490c      	ldr	r1, [pc, #48]	; (8004530 <__NVIC_SetPriority+0x4c>)
 80044fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004502:	0112      	lsls	r2, r2, #4
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	440b      	add	r3, r1
 8004508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800450c:	e00a      	b.n	8004524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	b2da      	uxtb	r2, r3
 8004512:	4908      	ldr	r1, [pc, #32]	; (8004534 <__NVIC_SetPriority+0x50>)
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	3b04      	subs	r3, #4
 800451c:	0112      	lsls	r2, r2, #4
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	440b      	add	r3, r1
 8004522:	761a      	strb	r2, [r3, #24]
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	e000e100 	.word	0xe000e100
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800453c:	4b05      	ldr	r3, [pc, #20]	; (8004554 <SysTick_Handler+0x1c>)
 800453e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004540:	f001 fcfe 	bl	8005f40 <xTaskGetSchedulerState>
 8004544:	4603      	mov	r3, r0
 8004546:	2b01      	cmp	r3, #1
 8004548:	d001      	beq.n	800454e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800454a:	f002 fae5 	bl	8006b18 <xPortSysTickHandler>
  }
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	e000e010 	.word	0xe000e010

08004558 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800455c:	2100      	movs	r1, #0
 800455e:	f06f 0004 	mvn.w	r0, #4
 8004562:	f7ff ffbf 	bl	80044e4 <__NVIC_SetPriority>
#endif
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004572:	f3ef 8305 	mrs	r3, IPSR
 8004576:	603b      	str	r3, [r7, #0]
  return(result);
 8004578:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800457e:	f06f 0305 	mvn.w	r3, #5
 8004582:	607b      	str	r3, [r7, #4]
 8004584:	e00c      	b.n	80045a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <osKernelInitialize+0x44>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d105      	bne.n	800459a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800458e:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <osKernelInitialize+0x44>)
 8004590:	2201      	movs	r2, #1
 8004592:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004594:	2300      	movs	r3, #0
 8004596:	607b      	str	r3, [r7, #4]
 8004598:	e002      	b.n	80045a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800459a:	f04f 33ff 	mov.w	r3, #4294967295
 800459e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045a0:	687b      	ldr	r3, [r7, #4]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	20000098 	.word	0x20000098

080045b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045ba:	f3ef 8305 	mrs	r3, IPSR
 80045be:	603b      	str	r3, [r7, #0]
  return(result);
 80045c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80045c6:	f06f 0305 	mvn.w	r3, #5
 80045ca:	607b      	str	r3, [r7, #4]
 80045cc:	e010      	b.n	80045f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80045ce:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <osKernelStart+0x48>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d109      	bne.n	80045ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80045d6:	f7ff ffbf 	bl	8004558 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <osKernelStart+0x48>)
 80045dc:	2202      	movs	r2, #2
 80045de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80045e0:	f001 f866 	bl	80056b0 <vTaskStartScheduler>
      stat = osOK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	e002      	b.n	80045f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80045ea:	f04f 33ff 	mov.w	r3, #4294967295
 80045ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045f0:	687b      	ldr	r3, [r7, #4]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000098 	.word	0x20000098

08004600 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004600:	b580      	push	{r7, lr}
 8004602:	b08e      	sub	sp, #56	; 0x38
 8004604:	af04      	add	r7, sp, #16
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800460c:	2300      	movs	r3, #0
 800460e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004610:	f3ef 8305 	mrs	r3, IPSR
 8004614:	617b      	str	r3, [r7, #20]
  return(result);
 8004616:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004618:	2b00      	cmp	r3, #0
 800461a:	d17e      	bne.n	800471a <osThreadNew+0x11a>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d07b      	beq.n	800471a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004626:	2318      	movs	r3, #24
 8004628:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800462a:	2300      	movs	r3, #0
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800462e:	f04f 33ff 	mov.w	r3, #4294967295
 8004632:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d045      	beq.n	80046c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <osThreadNew+0x48>
        name = attr->name;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <osThreadNew+0x6e>
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b38      	cmp	r3, #56	; 0x38
 8004660:	d805      	bhi.n	800466e <osThreadNew+0x6e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <osThreadNew+0x72>
        return (NULL);
 800466e:	2300      	movs	r3, #0
 8004670:	e054      	b.n	800471c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	089b      	lsrs	r3, r3, #2
 8004680:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00e      	beq.n	80046a8 <osThreadNew+0xa8>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b5b      	cmp	r3, #91	; 0x5b
 8004690:	d90a      	bls.n	80046a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004696:	2b00      	cmp	r3, #0
 8004698:	d006      	beq.n	80046a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <osThreadNew+0xa8>
        mem = 1;
 80046a2:	2301      	movs	r3, #1
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	e010      	b.n	80046ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10c      	bne.n	80046ca <osThreadNew+0xca>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d108      	bne.n	80046ca <osThreadNew+0xca>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d104      	bne.n	80046ca <osThreadNew+0xca>
          mem = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	61bb      	str	r3, [r7, #24]
 80046c4:	e001      	b.n	80046ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d110      	bne.n	80046f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046d8:	9202      	str	r2, [sp, #8]
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	6a3a      	ldr	r2, [r7, #32]
 80046e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 fe0c 	bl	8005304 <xTaskCreateStatic>
 80046ec:	4603      	mov	r3, r0
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	e013      	b.n	800471a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d110      	bne.n	800471a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	f107 0310 	add.w	r3, r7, #16
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 fe57 	bl	80053be <xTaskCreate>
 8004710:	4603      	mov	r3, r0
 8004712:	2b01      	cmp	r3, #1
 8004714:	d001      	beq.n	800471a <osThreadNew+0x11a>
            hTask = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800471a:	693b      	ldr	r3, [r7, #16]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3728      	adds	r7, #40	; 0x28
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800472c:	f3ef 8305 	mrs	r3, IPSR
 8004730:	60bb      	str	r3, [r7, #8]
  return(result);
 8004732:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <osDelay+0x1c>
    stat = osErrorISR;
 8004738:	f06f 0305 	mvn.w	r3, #5
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	e007      	b.n	8004750 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <osDelay+0x2c>
      vTaskDelay(ticks);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 ff7c 	bl	8005648 <vTaskDelay>
    }
  }

  return (stat);
 8004750:	68fb      	ldr	r3, [r7, #12]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4a07      	ldr	r2, [pc, #28]	; (8004788 <vApplicationGetIdleTaskMemory+0x2c>)
 800476c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4a06      	ldr	r2, [pc, #24]	; (800478c <vApplicationGetIdleTaskMemory+0x30>)
 8004772:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2280      	movs	r2, #128	; 0x80
 8004778:	601a      	str	r2, [r3, #0]
}
 800477a:	bf00      	nop
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	2000009c 	.word	0x2000009c
 800478c:	200000f8 	.word	0x200000f8

08004790 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a07      	ldr	r2, [pc, #28]	; (80047bc <vApplicationGetTimerTaskMemory+0x2c>)
 80047a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4a06      	ldr	r2, [pc, #24]	; (80047c0 <vApplicationGetTimerTaskMemory+0x30>)
 80047a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ae:	601a      	str	r2, [r3, #0]
}
 80047b0:	bf00      	nop
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	200002f8 	.word	0x200002f8
 80047c0:	20000354 	.word	0x20000354

080047c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f103 0208 	add.w	r2, r3, #8
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f04f 32ff 	mov.w	r2, #4294967295
 80047dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f103 0208 	add.w	r2, r3, #8
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f103 0208 	add.w	r2, r3, #8
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	601a      	str	r2, [r3, #0]
}
 800485a:	bf00      	nop
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487c:	d103      	bne.n	8004886 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	e00c      	b.n	80048a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3308      	adds	r3, #8
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	e002      	b.n	8004894 <vListInsert+0x2e>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	429a      	cmp	r2, r3
 800489e:	d2f6      	bcs.n	800488e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	601a      	str	r2, [r3, #0]
}
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6892      	ldr	r2, [r2, #8]
 80048ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6852      	ldr	r2, [r2, #4]
 80048f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	429a      	cmp	r2, r3
 8004902:	d103      	bne.n	800490c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	1e5a      	subs	r2, r3, #1
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004956:	f002 f84d 	bl	80069f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004962:	68f9      	ldr	r1, [r7, #12]
 8004964:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004966:	fb01 f303 	mul.w	r3, r1, r3
 800496a:	441a      	add	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004986:	3b01      	subs	r3, #1
 8004988:	68f9      	ldr	r1, [r7, #12]
 800498a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800498c:	fb01 f303 	mul.w	r3, r1, r3
 8004990:	441a      	add	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	22ff      	movs	r2, #255	; 0xff
 800499a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	22ff      	movs	r2, #255	; 0xff
 80049a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d114      	bne.n	80049d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01a      	beq.n	80049ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3310      	adds	r3, #16
 80049b8:	4618      	mov	r0, r3
 80049ba:	f001 f903 	bl	8005bc4 <xTaskRemoveFromEventList>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d012      	beq.n	80049ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049c4:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <xQueueGenericReset+0xcc>)
 80049c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	e009      	b.n	80049ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3310      	adds	r3, #16
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fef2 	bl	80047c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3324      	adds	r3, #36	; 0x24
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff feed 	bl	80047c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049ea:	f002 f833 	bl	8006a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049ee:	2301      	movs	r3, #1
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08e      	sub	sp, #56	; 0x38
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a3e:	bf00      	nop
 8004a40:	e7fe      	b.n	8004a40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <xQueueGenericCreateStatic+0x52>
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <xQueueGenericCreateStatic+0x56>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <xQueueGenericCreateStatic+0x58>
 8004a52:	2300      	movs	r3, #0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	623b      	str	r3, [r7, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d102      	bne.n	8004a7a <xQueueGenericCreateStatic+0x7e>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <xQueueGenericCreateStatic+0x82>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <xQueueGenericCreateStatic+0x84>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	61fb      	str	r3, [r7, #28]
}
 8004a96:	bf00      	nop
 8004a98:	e7fe      	b.n	8004a98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a9a:	2350      	movs	r3, #80	; 0x50
 8004a9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b50      	cmp	r3, #80	; 0x50
 8004aa2:	d00a      	beq.n	8004aba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	61bb      	str	r3, [r7, #24]
}
 8004ab6:	bf00      	nop
 8004ab8:	e7fe      	b.n	8004ab8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004aba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00d      	beq.n	8004ae2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ace:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f805 	bl	8004aec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3730      	adds	r7, #48	; 0x30
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d103      	bne.n	8004b08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e002      	b.n	8004b0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	69b8      	ldr	r0, [r7, #24]
 8004b1e:	f7ff ff05 	bl	800492c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	78fa      	ldrb	r2, [r7, #3]
 8004b26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b2a:	bf00      	nop
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08e      	sub	sp, #56	; 0x38
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b42:	2300      	movs	r3, #0
 8004b44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <xQueueGenericSend+0x32>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d103      	bne.n	8004b74 <xQueueGenericSend+0x40>
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <xQueueGenericSend+0x44>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <xQueueGenericSend+0x46>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10a      	bne.n	8004b94 <xQueueGenericSend+0x60>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b90:	bf00      	nop
 8004b92:	e7fe      	b.n	8004b92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d103      	bne.n	8004ba2 <xQueueGenericSend+0x6e>
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <xQueueGenericSend+0x72>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <xQueueGenericSend+0x74>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	623b      	str	r3, [r7, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bc2:	f001 f9bd 	bl	8005f40 <xTaskGetSchedulerState>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d102      	bne.n	8004bd2 <xQueueGenericSend+0x9e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <xQueueGenericSend+0xa2>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <xQueueGenericSend+0xa4>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10a      	bne.n	8004bf2 <xQueueGenericSend+0xbe>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	61fb      	str	r3, [r7, #28]
}
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bf2:	f001 feff 	bl	80069f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d302      	bcc.n	8004c08 <xQueueGenericSend+0xd4>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d129      	bne.n	8004c5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c0e:	f000 fa0b 	bl	8005028 <prvCopyDataToQueue>
 8004c12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d010      	beq.n	8004c3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	3324      	adds	r3, #36	; 0x24
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 ffcf 	bl	8005bc4 <xTaskRemoveFromEventList>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d013      	beq.n	8004c54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c2c:	4b3f      	ldr	r3, [pc, #252]	; (8004d2c <xQueueGenericSend+0x1f8>)
 8004c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	e00a      	b.n	8004c54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d007      	beq.n	8004c54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c44:	4b39      	ldr	r3, [pc, #228]	; (8004d2c <xQueueGenericSend+0x1f8>)
 8004c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c54:	f001 fefe 	bl	8006a54 <vPortExitCritical>
				return pdPASS;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e063      	b.n	8004d24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c62:	f001 fef7 	bl	8006a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	e05c      	b.n	8004d24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c70:	f107 0314 	add.w	r3, r7, #20
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 f809 	bl	8005c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c7e:	f001 fee9 	bl	8006a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c82:	f000 fd7b 	bl	800577c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c86:	f001 feb5 	bl	80069f4 <vPortEnterCritical>
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c90:	b25b      	sxtb	r3, r3
 8004c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c96:	d103      	bne.n	8004ca0 <xQueueGenericSend+0x16c>
 8004c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ca6:	b25b      	sxtb	r3, r3
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cac:	d103      	bne.n	8004cb6 <xQueueGenericSend+0x182>
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cb6:	f001 fecd 	bl	8006a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cba:	1d3a      	adds	r2, r7, #4
 8004cbc:	f107 0314 	add.w	r3, r7, #20
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fff8 	bl	8005cb8 <xTaskCheckForTimeOut>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d124      	bne.n	8004d18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cd0:	f000 faa2 	bl	8005218 <prvIsQueueFull>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d018      	beq.n	8004d0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cdc:	3310      	adds	r3, #16
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 ff1e 	bl	8005b24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cea:	f000 fa2d 	bl	8005148 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cee:	f000 fd53 	bl	8005798 <xTaskResumeAll>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f47f af7c 	bne.w	8004bf2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004cfa:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <xQueueGenericSend+0x1f8>)
 8004cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	e772      	b.n	8004bf2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d0e:	f000 fa1b 	bl	8005148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d12:	f000 fd41 	bl	8005798 <xTaskResumeAll>
 8004d16:	e76c      	b.n	8004bf2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d1a:	f000 fa15 	bl	8005148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d1e:	f000 fd3b 	bl	8005798 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3738      	adds	r7, #56	; 0x38
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	e000ed04 	.word	0xe000ed04

08004d30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b090      	sub	sp, #64	; 0x40
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d5a:	bf00      	nop
 8004d5c:	e7fe      	b.n	8004d5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d103      	bne.n	8004d6c <xQueueGenericSendFromISR+0x3c>
 8004d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <xQueueGenericSendFromISR+0x40>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <xQueueGenericSendFromISR+0x42>
 8004d70:	2300      	movs	r3, #0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10a      	bne.n	8004d8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d88:	bf00      	nop
 8004d8a:	e7fe      	b.n	8004d8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d103      	bne.n	8004d9a <xQueueGenericSendFromISR+0x6a>
 8004d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <xQueueGenericSendFromISR+0x6e>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <xQueueGenericSendFromISR+0x70>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	623b      	str	r3, [r7, #32]
}
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dba:	f001 fefd 	bl	8006bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004dbe:	f3ef 8211 	mrs	r2, BASEPRI
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	61fa      	str	r2, [r7, #28]
 8004dd4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004dd8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d302      	bcc.n	8004dec <xQueueGenericSendFromISR+0xbc>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d12f      	bne.n	8004e4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e02:	f000 f911 	bl	8005028 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0e:	d112      	bne.n	8004e36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d016      	beq.n	8004e46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1a:	3324      	adds	r3, #36	; 0x24
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fed1 	bl	8005bc4 <xTaskRemoveFromEventList>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00e      	beq.n	8004e46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00b      	beq.n	8004e46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	e007      	b.n	8004e46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	b25a      	sxtb	r2, r3
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e46:	2301      	movs	r3, #1
 8004e48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004e4a:	e001      	b.n	8004e50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3740      	adds	r7, #64	; 0x40
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08c      	sub	sp, #48	; 0x30
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e74:	2300      	movs	r3, #0
 8004e76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <xQueueReceive+0x30>
	__asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	623b      	str	r3, [r7, #32]
}
 8004e94:	bf00      	nop
 8004e96:	e7fe      	b.n	8004e96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d103      	bne.n	8004ea6 <xQueueReceive+0x3e>
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <xQueueReceive+0x42>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <xQueueReceive+0x44>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10a      	bne.n	8004ec6 <xQueueReceive+0x5e>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	61fb      	str	r3, [r7, #28]
}
 8004ec2:	bf00      	nop
 8004ec4:	e7fe      	b.n	8004ec4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ec6:	f001 f83b 	bl	8005f40 <xTaskGetSchedulerState>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d102      	bne.n	8004ed6 <xQueueReceive+0x6e>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <xQueueReceive+0x72>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <xQueueReceive+0x74>
 8004eda:	2300      	movs	r3, #0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <xQueueReceive+0x8e>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	61bb      	str	r3, [r7, #24]
}
 8004ef2:	bf00      	nop
 8004ef4:	e7fe      	b.n	8004ef4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ef6:	f001 fd7d 	bl	80069f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d01f      	beq.n	8004f46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f0a:	f000 f8f7 	bl	80050fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	1e5a      	subs	r2, r3, #1
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00f      	beq.n	8004f3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	3310      	adds	r3, #16
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fe4e 	bl	8005bc4 <xTaskRemoveFromEventList>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f2e:	4b3d      	ldr	r3, [pc, #244]	; (8005024 <xQueueReceive+0x1bc>)
 8004f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f3e:	f001 fd89 	bl	8006a54 <vPortExitCritical>
				return pdPASS;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e069      	b.n	800501a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d103      	bne.n	8004f54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f4c:	f001 fd82 	bl	8006a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f50:	2300      	movs	r3, #0
 8004f52:	e062      	b.n	800501a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f5a:	f107 0310 	add.w	r3, r7, #16
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fe94 	bl	8005c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f64:	2301      	movs	r3, #1
 8004f66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f68:	f001 fd74 	bl	8006a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f6c:	f000 fc06 	bl	800577c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f70:	f001 fd40 	bl	80069f4 <vPortEnterCritical>
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f7a:	b25b      	sxtb	r3, r3
 8004f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f80:	d103      	bne.n	8004f8a <xQueueReceive+0x122>
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f90:	b25b      	sxtb	r3, r3
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f96:	d103      	bne.n	8004fa0 <xQueueReceive+0x138>
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fa0:	f001 fd58 	bl	8006a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fa4:	1d3a      	adds	r2, r7, #4
 8004fa6:	f107 0310 	add.w	r3, r7, #16
 8004faa:	4611      	mov	r1, r2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fe83 	bl	8005cb8 <xTaskCheckForTimeOut>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d123      	bne.n	8005000 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fba:	f000 f917 	bl	80051ec <prvIsQueueEmpty>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d017      	beq.n	8004ff4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	3324      	adds	r3, #36	; 0x24
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fda9 	bl	8005b24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fd4:	f000 f8b8 	bl	8005148 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fd8:	f000 fbde 	bl	8005798 <xTaskResumeAll>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d189      	bne.n	8004ef6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004fe2:	4b10      	ldr	r3, [pc, #64]	; (8005024 <xQueueReceive+0x1bc>)
 8004fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	e780      	b.n	8004ef6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ff6:	f000 f8a7 	bl	8005148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ffa:	f000 fbcd 	bl	8005798 <xTaskResumeAll>
 8004ffe:	e77a      	b.n	8004ef6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005002:	f000 f8a1 	bl	8005148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005006:	f000 fbc7 	bl	8005798 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800500a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800500c:	f000 f8ee 	bl	80051ec <prvIsQueueEmpty>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	f43f af6f 	beq.w	8004ef6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005018:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800501a:	4618      	mov	r0, r3
 800501c:	3730      	adds	r7, #48	; 0x30
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	e000ed04 	.word	0xe000ed04

08005028 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10d      	bne.n	8005062 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d14d      	bne.n	80050ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	4618      	mov	r0, r3
 8005054:	f000 ff92 	bl	8005f7c <xTaskPriorityDisinherit>
 8005058:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	609a      	str	r2, [r3, #8]
 8005060:	e043      	b.n	80050ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d119      	bne.n	800509c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6858      	ldr	r0, [r3, #4]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	461a      	mov	r2, r3
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	f001 fff4 	bl	8007060 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	441a      	add	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	429a      	cmp	r2, r3
 8005090:	d32b      	bcc.n	80050ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	e026      	b.n	80050ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68d8      	ldr	r0, [r3, #12]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	461a      	mov	r2, r3
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	f001 ffda 	bl	8007060 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	425b      	negs	r3, r3
 80050b6:	441a      	add	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d207      	bcs.n	80050d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	425b      	negs	r3, r3
 80050d2:	441a      	add	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d105      	bne.n	80050ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80050f2:	697b      	ldr	r3, [r7, #20]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	d018      	beq.n	8005140 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	441a      	add	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	429a      	cmp	r2, r3
 8005126:	d303      	bcc.n	8005130 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68d9      	ldr	r1, [r3, #12]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	461a      	mov	r2, r3
 800513a:	6838      	ldr	r0, [r7, #0]
 800513c:	f001 ff90 	bl	8007060 <memcpy>
	}
}
 8005140:	bf00      	nop
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005150:	f001 fc50 	bl	80069f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800515a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800515c:	e011      	b.n	8005182 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	2b00      	cmp	r3, #0
 8005164:	d012      	beq.n	800518c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3324      	adds	r3, #36	; 0x24
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fd2a 	bl	8005bc4 <xTaskRemoveFromEventList>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005176:	f000 fe01 	bl	8005d7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800517a:	7bfb      	ldrb	r3, [r7, #15]
 800517c:	3b01      	subs	r3, #1
 800517e:	b2db      	uxtb	r3, r3
 8005180:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005186:	2b00      	cmp	r3, #0
 8005188:	dce9      	bgt.n	800515e <prvUnlockQueue+0x16>
 800518a:	e000      	b.n	800518e <prvUnlockQueue+0x46>
					break;
 800518c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	22ff      	movs	r2, #255	; 0xff
 8005192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005196:	f001 fc5d 	bl	8006a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800519a:	f001 fc2b 	bl	80069f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051a6:	e011      	b.n	80051cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d012      	beq.n	80051d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3310      	adds	r3, #16
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fd05 	bl	8005bc4 <xTaskRemoveFromEventList>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051c0:	f000 fddc 	bl	8005d7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051c4:	7bbb      	ldrb	r3, [r7, #14]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	dce9      	bgt.n	80051a8 <prvUnlockQueue+0x60>
 80051d4:	e000      	b.n	80051d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	22ff      	movs	r2, #255	; 0xff
 80051dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80051e0:	f001 fc38 	bl	8006a54 <vPortExitCritical>
}
 80051e4:	bf00      	nop
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051f4:	f001 fbfe 	bl	80069f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005200:	2301      	movs	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e001      	b.n	800520a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005206:	2300      	movs	r3, #0
 8005208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800520a:	f001 fc23 	bl	8006a54 <vPortExitCritical>

	return xReturn;
 800520e:	68fb      	ldr	r3, [r7, #12]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005220:	f001 fbe8 	bl	80069f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522c:	429a      	cmp	r2, r3
 800522e:	d102      	bne.n	8005236 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005230:	2301      	movs	r3, #1
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	e001      	b.n	800523a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800523a:	f001 fc0b 	bl	8006a54 <vPortExitCritical>

	return xReturn;
 800523e:	68fb      	ldr	r3, [r7, #12]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e014      	b.n	8005282 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005258:	4a0f      	ldr	r2, [pc, #60]	; (8005298 <vQueueAddToRegistry+0x50>)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10b      	bne.n	800527c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005264:	490c      	ldr	r1, [pc, #48]	; (8005298 <vQueueAddToRegistry+0x50>)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800526e:	4a0a      	ldr	r2, [pc, #40]	; (8005298 <vQueueAddToRegistry+0x50>)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	4413      	add	r3, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800527a:	e006      	b.n	800528a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3301      	adds	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b07      	cmp	r3, #7
 8005286:	d9e7      	bls.n	8005258 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20004bac 	.word	0x20004bac

0800529c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80052ac:	f001 fba2 	bl	80069f4 <vPortEnterCritical>
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052b6:	b25b      	sxtb	r3, r3
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d103      	bne.n	80052c6 <vQueueWaitForMessageRestricted+0x2a>
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052cc:	b25b      	sxtb	r3, r3
 80052ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d2:	d103      	bne.n	80052dc <vQueueWaitForMessageRestricted+0x40>
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052dc:	f001 fbba 	bl	8006a54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d106      	bne.n	80052f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	3324      	adds	r3, #36	; 0x24
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fc3b 	bl	8005b6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80052f6:	6978      	ldr	r0, [r7, #20]
 80052f8:	f7ff ff26 	bl	8005148 <prvUnlockQueue>
	}
 80052fc:	bf00      	nop
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005304:	b580      	push	{r7, lr}
 8005306:	b08e      	sub	sp, #56	; 0x38
 8005308:	af04      	add	r7, sp, #16
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10a      	bne.n	800532e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	623b      	str	r3, [r7, #32]
}
 800532a:	bf00      	nop
 800532c:	e7fe      	b.n	800532c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10a      	bne.n	800534a <xTaskCreateStatic+0x46>
	__asm volatile
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	61fb      	str	r3, [r7, #28]
}
 8005346:	bf00      	nop
 8005348:	e7fe      	b.n	8005348 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800534a:	235c      	movs	r3, #92	; 0x5c
 800534c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	2b5c      	cmp	r3, #92	; 0x5c
 8005352:	d00a      	beq.n	800536a <xTaskCreateStatic+0x66>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	61bb      	str	r3, [r7, #24]
}
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800536a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800536c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01e      	beq.n	80053b0 <xTaskCreateStatic+0xac>
 8005372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01b      	beq.n	80053b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005380:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	2202      	movs	r2, #2
 8005386:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800538a:	2300      	movs	r3, #0
 800538c:	9303      	str	r3, [sp, #12]
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	9302      	str	r3, [sp, #8]
 8005392:	f107 0314 	add.w	r3, r7, #20
 8005396:	9301      	str	r3, [sp, #4]
 8005398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 f850 	bl	8005448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053aa:	f000 f8dd 	bl	8005568 <prvAddNewTaskToReadyList>
 80053ae:	e001      	b.n	80053b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053b4:	697b      	ldr	r3, [r7, #20]
	}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3728      	adds	r7, #40	; 0x28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b08c      	sub	sp, #48	; 0x30
 80053c2:	af04      	add	r7, sp, #16
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	603b      	str	r3, [r7, #0]
 80053ca:	4613      	mov	r3, r2
 80053cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4618      	mov	r0, r3
 80053d4:	f001 fc30 	bl	8006c38 <pvPortMalloc>
 80053d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00e      	beq.n	80053fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053e0:	205c      	movs	r0, #92	; 0x5c
 80053e2:	f001 fc29 	bl	8006c38 <pvPortMalloc>
 80053e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30
 80053f4:	e005      	b.n	8005402 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80053f6:	6978      	ldr	r0, [r7, #20]
 80053f8:	f001 fcea 	bl	8006dd0 <vPortFree>
 80053fc:	e001      	b.n	8005402 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d017      	beq.n	8005438 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005410:	88fa      	ldrh	r2, [r7, #6]
 8005412:	2300      	movs	r3, #0
 8005414:	9303      	str	r3, [sp, #12]
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	9302      	str	r3, [sp, #8]
 800541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541c:	9301      	str	r3, [sp, #4]
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f80e 	bl	8005448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800542c:	69f8      	ldr	r0, [r7, #28]
 800542e:	f000 f89b 	bl	8005568 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005432:	2301      	movs	r3, #1
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	e002      	b.n	800543e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005438:	f04f 33ff 	mov.w	r3, #4294967295
 800543c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800543e:	69bb      	ldr	r3, [r7, #24]
	}
 8005440:	4618      	mov	r0, r3
 8005442:	3720      	adds	r7, #32
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	461a      	mov	r2, r3
 8005460:	21a5      	movs	r1, #165	; 0xa5
 8005462:	f001 fe0b 	bl	800707c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005470:	3b01      	subs	r3, #1
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	f023 0307 	bic.w	r3, r3, #7
 800547e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	617b      	str	r3, [r7, #20]
}
 800549c:	bf00      	nop
 800549e:	e7fe      	b.n	800549e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01f      	beq.n	80054e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054a6:	2300      	movs	r3, #0
 80054a8:	61fb      	str	r3, [r7, #28]
 80054aa:	e012      	b.n	80054d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	4413      	add	r3, r2
 80054b2:	7819      	ldrb	r1, [r3, #0]
 80054b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	3334      	adds	r3, #52	; 0x34
 80054bc:	460a      	mov	r2, r1
 80054be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d006      	beq.n	80054da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	3301      	adds	r3, #1
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	2b0f      	cmp	r3, #15
 80054d6:	d9e9      	bls.n	80054ac <prvInitialiseNewTask+0x64>
 80054d8:	e000      	b.n	80054dc <prvInitialiseNewTask+0x94>
			{
				break;
 80054da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054e4:	e003      	b.n	80054ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	2b37      	cmp	r3, #55	; 0x37
 80054f2:	d901      	bls.n	80054f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054f4:	2337      	movs	r3, #55	; 0x37
 80054f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005502:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	2200      	movs	r2, #0
 8005508:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	3304      	adds	r3, #4
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff f978 	bl	8004804 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005516:	3318      	adds	r3, #24
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff f973 	bl	8004804 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005522:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005532:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	2200      	movs	r2, #0
 8005538:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	68f9      	ldr	r1, [r7, #12]
 8005546:	69b8      	ldr	r0, [r7, #24]
 8005548:	f001 f928 	bl	800679c <pxPortInitialiseStack>
 800554c:	4602      	mov	r2, r0
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800555c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800555e:	bf00      	nop
 8005560:	3720      	adds	r7, #32
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005570:	f001 fa40 	bl	80069f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005574:	4b2d      	ldr	r3, [pc, #180]	; (800562c <prvAddNewTaskToReadyList+0xc4>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3301      	adds	r3, #1
 800557a:	4a2c      	ldr	r2, [pc, #176]	; (800562c <prvAddNewTaskToReadyList+0xc4>)
 800557c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800557e:	4b2c      	ldr	r3, [pc, #176]	; (8005630 <prvAddNewTaskToReadyList+0xc8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005586:	4a2a      	ldr	r2, [pc, #168]	; (8005630 <prvAddNewTaskToReadyList+0xc8>)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800558c:	4b27      	ldr	r3, [pc, #156]	; (800562c <prvAddNewTaskToReadyList+0xc4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d110      	bne.n	80055b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005594:	f000 fc16 	bl	8005dc4 <prvInitialiseTaskLists>
 8005598:	e00d      	b.n	80055b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800559a:	4b26      	ldr	r3, [pc, #152]	; (8005634 <prvAddNewTaskToReadyList+0xcc>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d109      	bne.n	80055b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055a2:	4b23      	ldr	r3, [pc, #140]	; (8005630 <prvAddNewTaskToReadyList+0xc8>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d802      	bhi.n	80055b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055b0:	4a1f      	ldr	r2, [pc, #124]	; (8005630 <prvAddNewTaskToReadyList+0xc8>)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055b6:	4b20      	ldr	r3, [pc, #128]	; (8005638 <prvAddNewTaskToReadyList+0xd0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3301      	adds	r3, #1
 80055bc:	4a1e      	ldr	r2, [pc, #120]	; (8005638 <prvAddNewTaskToReadyList+0xd0>)
 80055be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80055c0:	4b1d      	ldr	r3, [pc, #116]	; (8005638 <prvAddNewTaskToReadyList+0xd0>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055cc:	4b1b      	ldr	r3, [pc, #108]	; (800563c <prvAddNewTaskToReadyList+0xd4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d903      	bls.n	80055dc <prvAddNewTaskToReadyList+0x74>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	4a18      	ldr	r2, [pc, #96]	; (800563c <prvAddNewTaskToReadyList+0xd4>)
 80055da:	6013      	str	r3, [r2, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e0:	4613      	mov	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4a15      	ldr	r2, [pc, #84]	; (8005640 <prvAddNewTaskToReadyList+0xd8>)
 80055ea:	441a      	add	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3304      	adds	r3, #4
 80055f0:	4619      	mov	r1, r3
 80055f2:	4610      	mov	r0, r2
 80055f4:	f7ff f913 	bl	800481e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055f8:	f001 fa2c 	bl	8006a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055fc:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <prvAddNewTaskToReadyList+0xcc>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00e      	beq.n	8005622 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005604:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <prvAddNewTaskToReadyList+0xc8>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	429a      	cmp	r2, r3
 8005610:	d207      	bcs.n	8005622 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005612:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <prvAddNewTaskToReadyList+0xdc>)
 8005614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005622:	bf00      	nop
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	20000c28 	.word	0x20000c28
 8005630:	20000754 	.word	0x20000754
 8005634:	20000c34 	.word	0x20000c34
 8005638:	20000c44 	.word	0x20000c44
 800563c:	20000c30 	.word	0x20000c30
 8005640:	20000758 	.word	0x20000758
 8005644:	e000ed04 	.word	0xe000ed04

08005648 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d017      	beq.n	800568a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800565a:	4b13      	ldr	r3, [pc, #76]	; (80056a8 <vTaskDelay+0x60>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <vTaskDelay+0x30>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	60bb      	str	r3, [r7, #8]
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005678:	f000 f880 	bl	800577c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800567c:	2100      	movs	r1, #0
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fcea 	bl	8006058 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005684:	f000 f888 	bl	8005798 <xTaskResumeAll>
 8005688:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d107      	bne.n	80056a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005690:	4b06      	ldr	r3, [pc, #24]	; (80056ac <vTaskDelay+0x64>)
 8005692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056a0:	bf00      	nop
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20000c50 	.word	0x20000c50
 80056ac:	e000ed04 	.word	0xe000ed04

080056b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08a      	sub	sp, #40	; 0x28
 80056b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056be:	463a      	mov	r2, r7
 80056c0:	1d39      	adds	r1, r7, #4
 80056c2:	f107 0308 	add.w	r3, r7, #8
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff f848 	bl	800475c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056cc:	6839      	ldr	r1, [r7, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	9202      	str	r2, [sp, #8]
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	2300      	movs	r3, #0
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	2300      	movs	r3, #0
 80056dc:	460a      	mov	r2, r1
 80056de:	4921      	ldr	r1, [pc, #132]	; (8005764 <vTaskStartScheduler+0xb4>)
 80056e0:	4821      	ldr	r0, [pc, #132]	; (8005768 <vTaskStartScheduler+0xb8>)
 80056e2:	f7ff fe0f 	bl	8005304 <xTaskCreateStatic>
 80056e6:	4603      	mov	r3, r0
 80056e8:	4a20      	ldr	r2, [pc, #128]	; (800576c <vTaskStartScheduler+0xbc>)
 80056ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056ec:	4b1f      	ldr	r3, [pc, #124]	; (800576c <vTaskStartScheduler+0xbc>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056f4:	2301      	movs	r3, #1
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	e001      	b.n	80056fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d102      	bne.n	800570a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005704:	f000 fcfc 	bl	8006100 <xTimerCreateTimerTask>
 8005708:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d116      	bne.n	800573e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	613b      	str	r3, [r7, #16]
}
 8005722:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005724:	4b12      	ldr	r3, [pc, #72]	; (8005770 <vTaskStartScheduler+0xc0>)
 8005726:	f04f 32ff 	mov.w	r2, #4294967295
 800572a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800572c:	4b11      	ldr	r3, [pc, #68]	; (8005774 <vTaskStartScheduler+0xc4>)
 800572e:	2201      	movs	r2, #1
 8005730:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005732:	4b11      	ldr	r3, [pc, #68]	; (8005778 <vTaskStartScheduler+0xc8>)
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005738:	f001 f8ba 	bl	80068b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800573c:	e00e      	b.n	800575c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005744:	d10a      	bne.n	800575c <vTaskStartScheduler+0xac>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	60fb      	str	r3, [r7, #12]
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <vTaskStartScheduler+0xaa>
}
 800575c:	bf00      	nop
 800575e:	3718      	adds	r7, #24
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	08007b18 	.word	0x08007b18
 8005768:	08005d95 	.word	0x08005d95
 800576c:	20000c4c 	.word	0x20000c4c
 8005770:	20000c48 	.word	0x20000c48
 8005774:	20000c34 	.word	0x20000c34
 8005778:	20000c2c 	.word	0x20000c2c

0800577c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005780:	4b04      	ldr	r3, [pc, #16]	; (8005794 <vTaskSuspendAll+0x18>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3301      	adds	r3, #1
 8005786:	4a03      	ldr	r2, [pc, #12]	; (8005794 <vTaskSuspendAll+0x18>)
 8005788:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800578a:	bf00      	nop
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	20000c50 	.word	0x20000c50

08005798 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057a6:	4b42      	ldr	r3, [pc, #264]	; (80058b0 <xTaskResumeAll+0x118>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10a      	bne.n	80057c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	603b      	str	r3, [r7, #0]
}
 80057c0:	bf00      	nop
 80057c2:	e7fe      	b.n	80057c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057c4:	f001 f916 	bl	80069f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057c8:	4b39      	ldr	r3, [pc, #228]	; (80058b0 <xTaskResumeAll+0x118>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3b01      	subs	r3, #1
 80057ce:	4a38      	ldr	r2, [pc, #224]	; (80058b0 <xTaskResumeAll+0x118>)
 80057d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d2:	4b37      	ldr	r3, [pc, #220]	; (80058b0 <xTaskResumeAll+0x118>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d162      	bne.n	80058a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057da:	4b36      	ldr	r3, [pc, #216]	; (80058b4 <xTaskResumeAll+0x11c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d05e      	beq.n	80058a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057e2:	e02f      	b.n	8005844 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057e4:	4b34      	ldr	r3, [pc, #208]	; (80058b8 <xTaskResumeAll+0x120>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3318      	adds	r3, #24
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff f871 	bl	80048d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3304      	adds	r3, #4
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff f86c 	bl	80048d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005804:	4b2d      	ldr	r3, [pc, #180]	; (80058bc <xTaskResumeAll+0x124>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d903      	bls.n	8005814 <xTaskResumeAll+0x7c>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	4a2a      	ldr	r2, [pc, #168]	; (80058bc <xTaskResumeAll+0x124>)
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4a27      	ldr	r2, [pc, #156]	; (80058c0 <xTaskResumeAll+0x128>)
 8005822:	441a      	add	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f7fe fff7 	bl	800481e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	4b23      	ldr	r3, [pc, #140]	; (80058c4 <xTaskResumeAll+0x12c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	429a      	cmp	r2, r3
 800583c:	d302      	bcc.n	8005844 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800583e:	4b22      	ldr	r3, [pc, #136]	; (80058c8 <xTaskResumeAll+0x130>)
 8005840:	2201      	movs	r2, #1
 8005842:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005844:	4b1c      	ldr	r3, [pc, #112]	; (80058b8 <xTaskResumeAll+0x120>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1cb      	bne.n	80057e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005852:	f000 fb55 	bl	8005f00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005856:	4b1d      	ldr	r3, [pc, #116]	; (80058cc <xTaskResumeAll+0x134>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d010      	beq.n	8005884 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005862:	f000 f847 	bl	80058f4 <xTaskIncrementTick>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800586c:	4b16      	ldr	r3, [pc, #88]	; (80058c8 <xTaskResumeAll+0x130>)
 800586e:	2201      	movs	r2, #1
 8005870:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3b01      	subs	r3, #1
 8005876:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f1      	bne.n	8005862 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800587e:	4b13      	ldr	r3, [pc, #76]	; (80058cc <xTaskResumeAll+0x134>)
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005884:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <xTaskResumeAll+0x130>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d009      	beq.n	80058a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800588c:	2301      	movs	r3, #1
 800588e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005890:	4b0f      	ldr	r3, [pc, #60]	; (80058d0 <xTaskResumeAll+0x138>)
 8005892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058a0:	f001 f8d8 	bl	8006a54 <vPortExitCritical>

	return xAlreadyYielded;
 80058a4:	68bb      	ldr	r3, [r7, #8]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20000c50 	.word	0x20000c50
 80058b4:	20000c28 	.word	0x20000c28
 80058b8:	20000be8 	.word	0x20000be8
 80058bc:	20000c30 	.word	0x20000c30
 80058c0:	20000758 	.word	0x20000758
 80058c4:	20000754 	.word	0x20000754
 80058c8:	20000c3c 	.word	0x20000c3c
 80058cc:	20000c38 	.word	0x20000c38
 80058d0:	e000ed04 	.word	0xe000ed04

080058d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80058da:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <xTaskGetTickCount+0x1c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058e0:	687b      	ldr	r3, [r7, #4]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	20000c2c 	.word	0x20000c2c

080058f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058fe:	4b4f      	ldr	r3, [pc, #316]	; (8005a3c <xTaskIncrementTick+0x148>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	f040 808f 	bne.w	8005a26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005908:	4b4d      	ldr	r3, [pc, #308]	; (8005a40 <xTaskIncrementTick+0x14c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3301      	adds	r3, #1
 800590e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005910:	4a4b      	ldr	r2, [pc, #300]	; (8005a40 <xTaskIncrementTick+0x14c>)
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d120      	bne.n	800595e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800591c:	4b49      	ldr	r3, [pc, #292]	; (8005a44 <xTaskIncrementTick+0x150>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <xTaskIncrementTick+0x48>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	603b      	str	r3, [r7, #0]
}
 8005938:	bf00      	nop
 800593a:	e7fe      	b.n	800593a <xTaskIncrementTick+0x46>
 800593c:	4b41      	ldr	r3, [pc, #260]	; (8005a44 <xTaskIncrementTick+0x150>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	4b41      	ldr	r3, [pc, #260]	; (8005a48 <xTaskIncrementTick+0x154>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a3f      	ldr	r2, [pc, #252]	; (8005a44 <xTaskIncrementTick+0x150>)
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	4a3f      	ldr	r2, [pc, #252]	; (8005a48 <xTaskIncrementTick+0x154>)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	4b3e      	ldr	r3, [pc, #248]	; (8005a4c <xTaskIncrementTick+0x158>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3301      	adds	r3, #1
 8005956:	4a3d      	ldr	r2, [pc, #244]	; (8005a4c <xTaskIncrementTick+0x158>)
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	f000 fad1 	bl	8005f00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800595e:	4b3c      	ldr	r3, [pc, #240]	; (8005a50 <xTaskIncrementTick+0x15c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	429a      	cmp	r2, r3
 8005966:	d349      	bcc.n	80059fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005968:	4b36      	ldr	r3, [pc, #216]	; (8005a44 <xTaskIncrementTick+0x150>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d104      	bne.n	800597c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005972:	4b37      	ldr	r3, [pc, #220]	; (8005a50 <xTaskIncrementTick+0x15c>)
 8005974:	f04f 32ff 	mov.w	r2, #4294967295
 8005978:	601a      	str	r2, [r3, #0]
					break;
 800597a:	e03f      	b.n	80059fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800597c:	4b31      	ldr	r3, [pc, #196]	; (8005a44 <xTaskIncrementTick+0x150>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	429a      	cmp	r2, r3
 8005992:	d203      	bcs.n	800599c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005994:	4a2e      	ldr	r2, [pc, #184]	; (8005a50 <xTaskIncrementTick+0x15c>)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800599a:	e02f      	b.n	80059fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	3304      	adds	r3, #4
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fe ff99 	bl	80048d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d004      	beq.n	80059b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	3318      	adds	r3, #24
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fe ff90 	bl	80048d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059bc:	4b25      	ldr	r3, [pc, #148]	; (8005a54 <xTaskIncrementTick+0x160>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d903      	bls.n	80059cc <xTaskIncrementTick+0xd8>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	4a22      	ldr	r2, [pc, #136]	; (8005a54 <xTaskIncrementTick+0x160>)
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4a1f      	ldr	r2, [pc, #124]	; (8005a58 <xTaskIncrementTick+0x164>)
 80059da:	441a      	add	r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	3304      	adds	r3, #4
 80059e0:	4619      	mov	r1, r3
 80059e2:	4610      	mov	r0, r2
 80059e4:	f7fe ff1b 	bl	800481e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ec:	4b1b      	ldr	r3, [pc, #108]	; (8005a5c <xTaskIncrementTick+0x168>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d3b8      	bcc.n	8005968 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80059f6:	2301      	movs	r3, #1
 80059f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059fa:	e7b5      	b.n	8005968 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059fc:	4b17      	ldr	r3, [pc, #92]	; (8005a5c <xTaskIncrementTick+0x168>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a02:	4915      	ldr	r1, [pc, #84]	; (8005a58 <xTaskIncrementTick+0x164>)
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d901      	bls.n	8005a18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a14:	2301      	movs	r3, #1
 8005a16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a18:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <xTaskIncrementTick+0x16c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d007      	beq.n	8005a30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a20:	2301      	movs	r3, #1
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	e004      	b.n	8005a30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a26:	4b0f      	ldr	r3, [pc, #60]	; (8005a64 <xTaskIncrementTick+0x170>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	4a0d      	ldr	r2, [pc, #52]	; (8005a64 <xTaskIncrementTick+0x170>)
 8005a2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a30:	697b      	ldr	r3, [r7, #20]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000c50 	.word	0x20000c50
 8005a40:	20000c2c 	.word	0x20000c2c
 8005a44:	20000be0 	.word	0x20000be0
 8005a48:	20000be4 	.word	0x20000be4
 8005a4c:	20000c40 	.word	0x20000c40
 8005a50:	20000c48 	.word	0x20000c48
 8005a54:	20000c30 	.word	0x20000c30
 8005a58:	20000758 	.word	0x20000758
 8005a5c:	20000754 	.word	0x20000754
 8005a60:	20000c3c 	.word	0x20000c3c
 8005a64:	20000c38 	.word	0x20000c38

08005a68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a6e:	4b28      	ldr	r3, [pc, #160]	; (8005b10 <vTaskSwitchContext+0xa8>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a76:	4b27      	ldr	r3, [pc, #156]	; (8005b14 <vTaskSwitchContext+0xac>)
 8005a78:	2201      	movs	r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a7c:	e041      	b.n	8005b02 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005a7e:	4b25      	ldr	r3, [pc, #148]	; (8005b14 <vTaskSwitchContext+0xac>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a84:	4b24      	ldr	r3, [pc, #144]	; (8005b18 <vTaskSwitchContext+0xb0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	e010      	b.n	8005aae <vTaskSwitchContext+0x46>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	607b      	str	r3, [r7, #4]
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <vTaskSwitchContext+0x3e>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	491b      	ldr	r1, [pc, #108]	; (8005b1c <vTaskSwitchContext+0xb4>)
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0e4      	beq.n	8005a8c <vTaskSwitchContext+0x24>
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4a13      	ldr	r2, [pc, #76]	; (8005b1c <vTaskSwitchContext+0xb4>)
 8005ace:	4413      	add	r3, r2
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	605a      	str	r2, [r3, #4]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d104      	bne.n	8005af2 <vTaskSwitchContext+0x8a>
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	605a      	str	r2, [r3, #4]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4a09      	ldr	r2, [pc, #36]	; (8005b20 <vTaskSwitchContext+0xb8>)
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	4a06      	ldr	r2, [pc, #24]	; (8005b18 <vTaskSwitchContext+0xb0>)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6013      	str	r3, [r2, #0]
}
 8005b02:	bf00      	nop
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	20000c50 	.word	0x20000c50
 8005b14:	20000c3c 	.word	0x20000c3c
 8005b18:	20000c30 	.word	0x20000c30
 8005b1c:	20000758 	.word	0x20000758
 8005b20:	20000754 	.word	0x20000754

08005b24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10a      	bne.n	8005b4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	60fb      	str	r3, [r7, #12]
}
 8005b46:	bf00      	nop
 8005b48:	e7fe      	b.n	8005b48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b4a:	4b07      	ldr	r3, [pc, #28]	; (8005b68 <vTaskPlaceOnEventList+0x44>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3318      	adds	r3, #24
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fe fe87 	bl	8004866 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b58:	2101      	movs	r1, #1
 8005b5a:	6838      	ldr	r0, [r7, #0]
 8005b5c:	f000 fa7c 	bl	8006058 <prvAddCurrentTaskToDelayedList>
}
 8005b60:	bf00      	nop
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	20000754 	.word	0x20000754

08005b6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	617b      	str	r3, [r7, #20]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b94:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3318      	adds	r3, #24
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f7fe fe3e 	bl	800481e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	68b8      	ldr	r0, [r7, #8]
 8005bb2:	f000 fa51 	bl	8006058 <prvAddCurrentTaskToDelayedList>
	}
 8005bb6:	bf00      	nop
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000754 	.word	0x20000754

08005bc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10a      	bne.n	8005bf0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	60fb      	str	r3, [r7, #12]
}
 8005bec:	bf00      	nop
 8005bee:	e7fe      	b.n	8005bee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	3318      	adds	r3, #24
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fe fe6f 	bl	80048d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bfa:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <xTaskRemoveFromEventList+0xb0>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d11d      	bne.n	8005c3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	3304      	adds	r3, #4
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fe fe66 	bl	80048d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c10:	4b19      	ldr	r3, [pc, #100]	; (8005c78 <xTaskRemoveFromEventList+0xb4>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d903      	bls.n	8005c20 <xTaskRemoveFromEventList+0x5c>
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	4a16      	ldr	r2, [pc, #88]	; (8005c78 <xTaskRemoveFromEventList+0xb4>)
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c24:	4613      	mov	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4a13      	ldr	r2, [pc, #76]	; (8005c7c <xTaskRemoveFromEventList+0xb8>)
 8005c2e:	441a      	add	r2, r3
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	3304      	adds	r3, #4
 8005c34:	4619      	mov	r1, r3
 8005c36:	4610      	mov	r0, r2
 8005c38:	f7fe fdf1 	bl	800481e <vListInsertEnd>
 8005c3c:	e005      	b.n	8005c4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	3318      	adds	r3, #24
 8005c42:	4619      	mov	r1, r3
 8005c44:	480e      	ldr	r0, [pc, #56]	; (8005c80 <xTaskRemoveFromEventList+0xbc>)
 8005c46:	f7fe fdea 	bl	800481e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4e:	4b0d      	ldr	r3, [pc, #52]	; (8005c84 <xTaskRemoveFromEventList+0xc0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d905      	bls.n	8005c64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <xTaskRemoveFromEventList+0xc4>)
 8005c5e:	2201      	movs	r2, #1
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	e001      	b.n	8005c68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c68:	697b      	ldr	r3, [r7, #20]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20000c50 	.word	0x20000c50
 8005c78:	20000c30 	.word	0x20000c30
 8005c7c:	20000758 	.word	0x20000758
 8005c80:	20000be8 	.word	0x20000be8
 8005c84:	20000754 	.word	0x20000754
 8005c88:	20000c3c 	.word	0x20000c3c

08005c8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c94:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <vTaskInternalSetTimeOutState+0x24>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <vTaskInternalSetTimeOutState+0x28>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	605a      	str	r2, [r3, #4]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	20000c40 	.word	0x20000c40
 8005cb4:	20000c2c 	.word	0x20000c2c

08005cb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10a      	bne.n	8005cde <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	613b      	str	r3, [r7, #16]
}
 8005cda:	bf00      	nop
 8005cdc:	e7fe      	b.n	8005cdc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	60fb      	str	r3, [r7, #12]
}
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005cfa:	f000 fe7b 	bl	80069f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cfe:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <xTaskCheckForTimeOut+0xbc>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d16:	d102      	bne.n	8005d1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	61fb      	str	r3, [r7, #28]
 8005d1c:	e023      	b.n	8005d66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	4b15      	ldr	r3, [pc, #84]	; (8005d78 <xTaskCheckForTimeOut+0xc0>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d007      	beq.n	8005d3a <xTaskCheckForTimeOut+0x82>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d302      	bcc.n	8005d3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d34:	2301      	movs	r3, #1
 8005d36:	61fb      	str	r3, [r7, #28]
 8005d38:	e015      	b.n	8005d66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d20b      	bcs.n	8005d5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	1ad2      	subs	r2, r2, r3
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff ff9b 	bl	8005c8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d56:	2300      	movs	r3, #0
 8005d58:	61fb      	str	r3, [r7, #28]
 8005d5a:	e004      	b.n	8005d66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d62:	2301      	movs	r3, #1
 8005d64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d66:	f000 fe75 	bl	8006a54 <vPortExitCritical>

	return xReturn;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000c2c 	.word	0x20000c2c
 8005d78:	20000c40 	.word	0x20000c40

08005d7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d80:	4b03      	ldr	r3, [pc, #12]	; (8005d90 <vTaskMissedYield+0x14>)
 8005d82:	2201      	movs	r2, #1
 8005d84:	601a      	str	r2, [r3, #0]
}
 8005d86:	bf00      	nop
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	20000c3c 	.word	0x20000c3c

08005d94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d9c:	f000 f852 	bl	8005e44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005da0:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <prvIdleTask+0x28>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d9f9      	bls.n	8005d9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005da8:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <prvIdleTask+0x2c>)
 8005daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005db8:	e7f0      	b.n	8005d9c <prvIdleTask+0x8>
 8005dba:	bf00      	nop
 8005dbc:	20000758 	.word	0x20000758
 8005dc0:	e000ed04 	.word	0xe000ed04

08005dc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dca:	2300      	movs	r3, #0
 8005dcc:	607b      	str	r3, [r7, #4]
 8005dce:	e00c      	b.n	8005dea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4a12      	ldr	r2, [pc, #72]	; (8005e24 <prvInitialiseTaskLists+0x60>)
 8005ddc:	4413      	add	r3, r2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fe fcf0 	bl	80047c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3301      	adds	r3, #1
 8005de8:	607b      	str	r3, [r7, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b37      	cmp	r3, #55	; 0x37
 8005dee:	d9ef      	bls.n	8005dd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005df0:	480d      	ldr	r0, [pc, #52]	; (8005e28 <prvInitialiseTaskLists+0x64>)
 8005df2:	f7fe fce7 	bl	80047c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005df6:	480d      	ldr	r0, [pc, #52]	; (8005e2c <prvInitialiseTaskLists+0x68>)
 8005df8:	f7fe fce4 	bl	80047c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005dfc:	480c      	ldr	r0, [pc, #48]	; (8005e30 <prvInitialiseTaskLists+0x6c>)
 8005dfe:	f7fe fce1 	bl	80047c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e02:	480c      	ldr	r0, [pc, #48]	; (8005e34 <prvInitialiseTaskLists+0x70>)
 8005e04:	f7fe fcde 	bl	80047c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e08:	480b      	ldr	r0, [pc, #44]	; (8005e38 <prvInitialiseTaskLists+0x74>)
 8005e0a:	f7fe fcdb 	bl	80047c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e0e:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <prvInitialiseTaskLists+0x78>)
 8005e10:	4a05      	ldr	r2, [pc, #20]	; (8005e28 <prvInitialiseTaskLists+0x64>)
 8005e12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e14:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <prvInitialiseTaskLists+0x7c>)
 8005e16:	4a05      	ldr	r2, [pc, #20]	; (8005e2c <prvInitialiseTaskLists+0x68>)
 8005e18:	601a      	str	r2, [r3, #0]
}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000758 	.word	0x20000758
 8005e28:	20000bb8 	.word	0x20000bb8
 8005e2c:	20000bcc 	.word	0x20000bcc
 8005e30:	20000be8 	.word	0x20000be8
 8005e34:	20000bfc 	.word	0x20000bfc
 8005e38:	20000c14 	.word	0x20000c14
 8005e3c:	20000be0 	.word	0x20000be0
 8005e40:	20000be4 	.word	0x20000be4

08005e44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e4a:	e019      	b.n	8005e80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e4c:	f000 fdd2 	bl	80069f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e50:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <prvCheckTasksWaitingTermination+0x50>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fe fd3b 	bl	80048d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e62:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <prvCheckTasksWaitingTermination+0x54>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	4a0b      	ldr	r2, [pc, #44]	; (8005e98 <prvCheckTasksWaitingTermination+0x54>)
 8005e6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e6c:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <prvCheckTasksWaitingTermination+0x58>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3b01      	subs	r3, #1
 8005e72:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <prvCheckTasksWaitingTermination+0x58>)
 8005e74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e76:	f000 fded 	bl	8006a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f810 	bl	8005ea0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e80:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <prvCheckTasksWaitingTermination+0x58>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e1      	bne.n	8005e4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e88:	bf00      	nop
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000bfc 	.word	0x20000bfc
 8005e98:	20000c28 	.word	0x20000c28
 8005e9c:	20000c10 	.word	0x20000c10

08005ea0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d108      	bne.n	8005ec4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 ff8a 	bl	8006dd0 <vPortFree>
				vPortFree( pxTCB );
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 ff87 	bl	8006dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ec2:	e018      	b.n	8005ef6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d103      	bne.n	8005ed6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 ff7e 	bl	8006dd0 <vPortFree>
	}
 8005ed4:	e00f      	b.n	8005ef6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d00a      	beq.n	8005ef6 <prvDeleteTCB+0x56>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	60fb      	str	r3, [r7, #12]
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <prvDeleteTCB+0x54>
	}
 8005ef6:	bf00      	nop
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
	...

08005f00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f06:	4b0c      	ldr	r3, [pc, #48]	; (8005f38 <prvResetNextTaskUnblockTime+0x38>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d104      	bne.n	8005f1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <prvResetNextTaskUnblockTime+0x3c>)
 8005f12:	f04f 32ff 	mov.w	r2, #4294967295
 8005f16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f18:	e008      	b.n	8005f2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f1a:	4b07      	ldr	r3, [pc, #28]	; (8005f38 <prvResetNextTaskUnblockTime+0x38>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	4a04      	ldr	r2, [pc, #16]	; (8005f3c <prvResetNextTaskUnblockTime+0x3c>)
 8005f2a:	6013      	str	r3, [r2, #0]
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	20000be0 	.word	0x20000be0
 8005f3c:	20000c48 	.word	0x20000c48

08005f40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f46:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <xTaskGetSchedulerState+0x34>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d102      	bne.n	8005f54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	607b      	str	r3, [r7, #4]
 8005f52:	e008      	b.n	8005f66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f54:	4b08      	ldr	r3, [pc, #32]	; (8005f78 <xTaskGetSchedulerState+0x38>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d102      	bne.n	8005f62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	607b      	str	r3, [r7, #4]
 8005f60:	e001      	b.n	8005f66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f62:	2300      	movs	r3, #0
 8005f64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f66:	687b      	ldr	r3, [r7, #4]
	}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	20000c34 	.word	0x20000c34
 8005f78:	20000c50 	.word	0x20000c50

08005f7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d056      	beq.n	8006040 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f92:	4b2e      	ldr	r3, [pc, #184]	; (800604c <xTaskPriorityDisinherit+0xd0>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d00a      	beq.n	8005fb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	60fb      	str	r3, [r7, #12]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	60bb      	str	r3, [r7, #8]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd4:	1e5a      	subs	r2, r3, #1
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d02c      	beq.n	8006040 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d128      	bne.n	8006040 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fe fc70 	bl	80048d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006004:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006010:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <xTaskPriorityDisinherit+0xd4>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	429a      	cmp	r2, r3
 8006016:	d903      	bls.n	8006020 <xTaskPriorityDisinherit+0xa4>
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	4a0c      	ldr	r2, [pc, #48]	; (8006050 <xTaskPriorityDisinherit+0xd4>)
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4a09      	ldr	r2, [pc, #36]	; (8006054 <xTaskPriorityDisinherit+0xd8>)
 800602e:	441a      	add	r2, r3
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	3304      	adds	r3, #4
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f7fe fbf1 	bl	800481e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800603c:	2301      	movs	r3, #1
 800603e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006040:	697b      	ldr	r3, [r7, #20]
	}
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20000754 	.word	0x20000754
 8006050:	20000c30 	.word	0x20000c30
 8006054:	20000758 	.word	0x20000758

08006058 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006062:	4b21      	ldr	r3, [pc, #132]	; (80060e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006068:	4b20      	ldr	r3, [pc, #128]	; (80060ec <prvAddCurrentTaskToDelayedList+0x94>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3304      	adds	r3, #4
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe fc32 	bl	80048d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	d10a      	bne.n	8006092 <prvAddCurrentTaskToDelayedList+0x3a>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d007      	beq.n	8006092 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006082:	4b1a      	ldr	r3, [pc, #104]	; (80060ec <prvAddCurrentTaskToDelayedList+0x94>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3304      	adds	r3, #4
 8006088:	4619      	mov	r1, r3
 800608a:	4819      	ldr	r0, [pc, #100]	; (80060f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800608c:	f7fe fbc7 	bl	800481e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006090:	e026      	b.n	80060e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4413      	add	r3, r2
 8006098:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800609a:	4b14      	ldr	r3, [pc, #80]	; (80060ec <prvAddCurrentTaskToDelayedList+0x94>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d209      	bcs.n	80060be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060aa:	4b12      	ldr	r3, [pc, #72]	; (80060f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <prvAddCurrentTaskToDelayedList+0x94>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3304      	adds	r3, #4
 80060b4:	4619      	mov	r1, r3
 80060b6:	4610      	mov	r0, r2
 80060b8:	f7fe fbd5 	bl	8004866 <vListInsert>
}
 80060bc:	e010      	b.n	80060e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060be:	4b0e      	ldr	r3, [pc, #56]	; (80060f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <prvAddCurrentTaskToDelayedList+0x94>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f7fe fbcb 	bl	8004866 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060d0:	4b0a      	ldr	r3, [pc, #40]	; (80060fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d202      	bcs.n	80060e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060da:	4a08      	ldr	r2, [pc, #32]	; (80060fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	6013      	str	r3, [r2, #0]
}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	20000c2c 	.word	0x20000c2c
 80060ec:	20000754 	.word	0x20000754
 80060f0:	20000c14 	.word	0x20000c14
 80060f4:	20000be4 	.word	0x20000be4
 80060f8:	20000be0 	.word	0x20000be0
 80060fc:	20000c48 	.word	0x20000c48

08006100 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08a      	sub	sp, #40	; 0x28
 8006104:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800610a:	f000 fb07 	bl	800671c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800610e:	4b1c      	ldr	r3, [pc, #112]	; (8006180 <xTimerCreateTimerTask+0x80>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d021      	beq.n	800615a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800611a:	2300      	movs	r3, #0
 800611c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800611e:	1d3a      	adds	r2, r7, #4
 8006120:	f107 0108 	add.w	r1, r7, #8
 8006124:	f107 030c 	add.w	r3, r7, #12
 8006128:	4618      	mov	r0, r3
 800612a:	f7fe fb31 	bl	8004790 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800612e:	6879      	ldr	r1, [r7, #4]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	9202      	str	r2, [sp, #8]
 8006136:	9301      	str	r3, [sp, #4]
 8006138:	2302      	movs	r3, #2
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	2300      	movs	r3, #0
 800613e:	460a      	mov	r2, r1
 8006140:	4910      	ldr	r1, [pc, #64]	; (8006184 <xTimerCreateTimerTask+0x84>)
 8006142:	4811      	ldr	r0, [pc, #68]	; (8006188 <xTimerCreateTimerTask+0x88>)
 8006144:	f7ff f8de 	bl	8005304 <xTaskCreateStatic>
 8006148:	4603      	mov	r3, r0
 800614a:	4a10      	ldr	r2, [pc, #64]	; (800618c <xTimerCreateTimerTask+0x8c>)
 800614c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800614e:	4b0f      	ldr	r3, [pc, #60]	; (800618c <xTimerCreateTimerTask+0x8c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006156:	2301      	movs	r3, #1
 8006158:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	613b      	str	r3, [r7, #16]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006176:	697b      	ldr	r3, [r7, #20]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	20000c84 	.word	0x20000c84
 8006184:	08007b20 	.word	0x08007b20
 8006188:	080062c5 	.word	0x080062c5
 800618c:	20000c88 	.word	0x20000c88

08006190 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	; 0x28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800619e:	2300      	movs	r3, #0
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <xTimerGenericCommand+0x2e>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	623b      	str	r3, [r7, #32]
}
 80061ba:	bf00      	nop
 80061bc:	e7fe      	b.n	80061bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80061be:	4b1a      	ldr	r3, [pc, #104]	; (8006228 <xTimerGenericCommand+0x98>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d02a      	beq.n	800621c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b05      	cmp	r3, #5
 80061d6:	dc18      	bgt.n	800620a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061d8:	f7ff feb2 	bl	8005f40 <xTaskGetSchedulerState>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d109      	bne.n	80061f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061e2:	4b11      	ldr	r3, [pc, #68]	; (8006228 <xTimerGenericCommand+0x98>)
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	f107 0110 	add.w	r1, r7, #16
 80061ea:	2300      	movs	r3, #0
 80061ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ee:	f7fe fca1 	bl	8004b34 <xQueueGenericSend>
 80061f2:	6278      	str	r0, [r7, #36]	; 0x24
 80061f4:	e012      	b.n	800621c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061f6:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <xTimerGenericCommand+0x98>)
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	f107 0110 	add.w	r1, r7, #16
 80061fe:	2300      	movs	r3, #0
 8006200:	2200      	movs	r2, #0
 8006202:	f7fe fc97 	bl	8004b34 <xQueueGenericSend>
 8006206:	6278      	str	r0, [r7, #36]	; 0x24
 8006208:	e008      	b.n	800621c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800620a:	4b07      	ldr	r3, [pc, #28]	; (8006228 <xTimerGenericCommand+0x98>)
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	f107 0110 	add.w	r1, r7, #16
 8006212:	2300      	movs	r3, #0
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	f7fe fd8b 	bl	8004d30 <xQueueGenericSendFromISR>
 800621a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800621e:	4618      	mov	r0, r3
 8006220:	3728      	adds	r7, #40	; 0x28
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000c84 	.word	0x20000c84

0800622c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b088      	sub	sp, #32
 8006230:	af02      	add	r7, sp, #8
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006236:	4b22      	ldr	r3, [pc, #136]	; (80062c0 <prvProcessExpiredTimer+0x94>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	3304      	adds	r3, #4
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe fb47 	bl	80048d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	d022      	beq.n	800629e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	699a      	ldr	r2, [r3, #24]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	18d1      	adds	r1, r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	6978      	ldr	r0, [r7, #20]
 8006266:	f000 f8d1 	bl	800640c <prvInsertTimerInActiveList>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01f      	beq.n	80062b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006270:	2300      	movs	r3, #0
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	2300      	movs	r3, #0
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	2100      	movs	r1, #0
 800627a:	6978      	ldr	r0, [r7, #20]
 800627c:	f7ff ff88 	bl	8006190 <xTimerGenericCommand>
 8006280:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d113      	bne.n	80062b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	60fb      	str	r3, [r7, #12]
}
 800629a:	bf00      	nop
 800629c:	e7fe      	b.n	800629c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	6978      	ldr	r0, [r7, #20]
 80062b6:	4798      	blx	r3
}
 80062b8:	bf00      	nop
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	20000c7c 	.word	0x20000c7c

080062c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062cc:	f107 0308 	add.w	r3, r7, #8
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 f857 	bl	8006384 <prvGetNextExpireTime>
 80062d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	4619      	mov	r1, r3
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 f803 	bl	80062e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062e2:	f000 f8d5 	bl	8006490 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062e6:	e7f1      	b.n	80062cc <prvTimerTask+0x8>

080062e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062f2:	f7ff fa43 	bl	800577c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062f6:	f107 0308 	add.w	r3, r7, #8
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 f866 	bl	80063cc <prvSampleTimeNow>
 8006300:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d130      	bne.n	800636a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <prvProcessTimerOrBlockTask+0x3c>
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	429a      	cmp	r2, r3
 8006314:	d806      	bhi.n	8006324 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006316:	f7ff fa3f 	bl	8005798 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800631a:	68f9      	ldr	r1, [r7, #12]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7ff ff85 	bl	800622c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006322:	e024      	b.n	800636e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d008      	beq.n	800633c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800632a:	4b13      	ldr	r3, [pc, #76]	; (8006378 <prvProcessTimerOrBlockTask+0x90>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <prvProcessTimerOrBlockTask+0x50>
 8006334:	2301      	movs	r3, #1
 8006336:	e000      	b.n	800633a <prvProcessTimerOrBlockTask+0x52>
 8006338:	2300      	movs	r3, #0
 800633a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800633c:	4b0f      	ldr	r3, [pc, #60]	; (800637c <prvProcessTimerOrBlockTask+0x94>)
 800633e:	6818      	ldr	r0, [r3, #0]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	4619      	mov	r1, r3
 800634a:	f7fe ffa7 	bl	800529c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800634e:	f7ff fa23 	bl	8005798 <xTaskResumeAll>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10a      	bne.n	800636e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006358:	4b09      	ldr	r3, [pc, #36]	; (8006380 <prvProcessTimerOrBlockTask+0x98>)
 800635a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	f3bf 8f6f 	isb	sy
}
 8006368:	e001      	b.n	800636e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800636a:	f7ff fa15 	bl	8005798 <xTaskResumeAll>
}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	20000c80 	.word	0x20000c80
 800637c:	20000c84 	.word	0x20000c84
 8006380:	e000ed04 	.word	0xe000ed04

08006384 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800638c:	4b0e      	ldr	r3, [pc, #56]	; (80063c8 <prvGetNextExpireTime+0x44>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <prvGetNextExpireTime+0x16>
 8006396:	2201      	movs	r2, #1
 8006398:	e000      	b.n	800639c <prvGetNextExpireTime+0x18>
 800639a:	2200      	movs	r2, #0
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d105      	bne.n	80063b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063a8:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <prvGetNextExpireTime+0x44>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	e001      	b.n	80063b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80063b8:	68fb      	ldr	r3, [r7, #12]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	20000c7c 	.word	0x20000c7c

080063cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063d4:	f7ff fa7e 	bl	80058d4 <xTaskGetTickCount>
 80063d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063da:	4b0b      	ldr	r3, [pc, #44]	; (8006408 <prvSampleTimeNow+0x3c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d205      	bcs.n	80063f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063e4:	f000 f936 	bl	8006654 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	e002      	b.n	80063f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063f6:	4a04      	ldr	r2, [pc, #16]	; (8006408 <prvSampleTimeNow+0x3c>)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063fc:	68fb      	ldr	r3, [r7, #12]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20000c8c 	.word	0x20000c8c

0800640c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800641a:	2300      	movs	r3, #0
 800641c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	429a      	cmp	r2, r3
 8006430:	d812      	bhi.n	8006458 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	429a      	cmp	r2, r3
 800643e:	d302      	bcc.n	8006446 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006440:	2301      	movs	r3, #1
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	e01b      	b.n	800647e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006446:	4b10      	ldr	r3, [pc, #64]	; (8006488 <prvInsertTimerInActiveList+0x7c>)
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	3304      	adds	r3, #4
 800644e:	4619      	mov	r1, r3
 8006450:	4610      	mov	r0, r2
 8006452:	f7fe fa08 	bl	8004866 <vListInsert>
 8006456:	e012      	b.n	800647e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d206      	bcs.n	800646e <prvInsertTimerInActiveList+0x62>
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	429a      	cmp	r2, r3
 8006466:	d302      	bcc.n	800646e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006468:	2301      	movs	r3, #1
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	e007      	b.n	800647e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800646e:	4b07      	ldr	r3, [pc, #28]	; (800648c <prvInsertTimerInActiveList+0x80>)
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3304      	adds	r3, #4
 8006476:	4619      	mov	r1, r3
 8006478:	4610      	mov	r0, r2
 800647a:	f7fe f9f4 	bl	8004866 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800647e:	697b      	ldr	r3, [r7, #20]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20000c80 	.word	0x20000c80
 800648c:	20000c7c 	.word	0x20000c7c

08006490 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b08e      	sub	sp, #56	; 0x38
 8006494:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006496:	e0ca      	b.n	800662e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	da18      	bge.n	80064d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800649e:	1d3b      	adds	r3, r7, #4
 80064a0:	3304      	adds	r3, #4
 80064a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10a      	bne.n	80064c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	61fb      	str	r3, [r7, #28]
}
 80064bc:	bf00      	nop
 80064be:	e7fe      	b.n	80064be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c6:	6850      	ldr	r0, [r2, #4]
 80064c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ca:	6892      	ldr	r2, [r2, #8]
 80064cc:	4611      	mov	r1, r2
 80064ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f2c0 80aa 	blt.w	800662c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d004      	beq.n	80064ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	3304      	adds	r3, #4
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fe f9f5 	bl	80048d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064ee:	463b      	mov	r3, r7
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff ff6b 	bl	80063cc <prvSampleTimeNow>
 80064f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b09      	cmp	r3, #9
 80064fc:	f200 8097 	bhi.w	800662e <prvProcessReceivedCommands+0x19e>
 8006500:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <prvProcessReceivedCommands+0x78>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	08006531 	.word	0x08006531
 800650c:	08006531 	.word	0x08006531
 8006510:	08006531 	.word	0x08006531
 8006514:	080065a5 	.word	0x080065a5
 8006518:	080065b9 	.word	0x080065b9
 800651c:	08006603 	.word	0x08006603
 8006520:	08006531 	.word	0x08006531
 8006524:	08006531 	.word	0x08006531
 8006528:	080065a5 	.word	0x080065a5
 800652c:	080065b9 	.word	0x080065b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006536:	f043 0301 	orr.w	r3, r3, #1
 800653a:	b2da      	uxtb	r2, r3
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	18d1      	adds	r1, r2, r3
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006550:	f7ff ff5c 	bl	800640c <prvInsertTimerInActiveList>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d069      	beq.n	800662e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006560:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	2b00      	cmp	r3, #0
 800656e:	d05e      	beq.n	800662e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	441a      	add	r2, r3
 8006578:	2300      	movs	r3, #0
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	2300      	movs	r3, #0
 800657e:	2100      	movs	r1, #0
 8006580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006582:	f7ff fe05 	bl	8006190 <xTimerGenericCommand>
 8006586:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d14f      	bne.n	800662e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	61bb      	str	r3, [r7, #24]
}
 80065a0:	bf00      	nop
 80065a2:	e7fe      	b.n	80065a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065aa:	f023 0301 	bic.w	r3, r3, #1
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80065b6:	e03a      	b.n	800662e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10a      	bne.n	80065ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	617b      	str	r3, [r7, #20]
}
 80065ea:	bf00      	nop
 80065ec:	e7fe      	b.n	80065ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	18d1      	adds	r1, r2, r3
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065fc:	f7ff ff06 	bl	800640c <prvInsertTimerInActiveList>
					break;
 8006600:	e015      	b.n	800662e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d103      	bne.n	8006618 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006612:	f000 fbdd 	bl	8006dd0 <vPortFree>
 8006616:	e00a      	b.n	800662e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800661e:	f023 0301 	bic.w	r3, r3, #1
 8006622:	b2da      	uxtb	r2, r3
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800662a:	e000      	b.n	800662e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800662c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800662e:	4b08      	ldr	r3, [pc, #32]	; (8006650 <prvProcessReceivedCommands+0x1c0>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	1d39      	adds	r1, r7, #4
 8006634:	2200      	movs	r2, #0
 8006636:	4618      	mov	r0, r3
 8006638:	f7fe fc16 	bl	8004e68 <xQueueReceive>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	f47f af2a 	bne.w	8006498 <prvProcessReceivedCommands+0x8>
	}
}
 8006644:	bf00      	nop
 8006646:	bf00      	nop
 8006648:	3730      	adds	r7, #48	; 0x30
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20000c84 	.word	0x20000c84

08006654 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800665a:	e048      	b.n	80066ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800665c:	4b2d      	ldr	r3, [pc, #180]	; (8006714 <prvSwitchTimerLists+0xc0>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006666:	4b2b      	ldr	r3, [pc, #172]	; (8006714 <prvSwitchTimerLists+0xc0>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3304      	adds	r3, #4
 8006674:	4618      	mov	r0, r3
 8006676:	f7fe f92f 	bl	80048d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	d02e      	beq.n	80066ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4413      	add	r3, r2
 8006698:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d90e      	bls.n	80066c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066ae:	4b19      	ldr	r3, [pc, #100]	; (8006714 <prvSwitchTimerLists+0xc0>)
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3304      	adds	r3, #4
 80066b6:	4619      	mov	r1, r3
 80066b8:	4610      	mov	r0, r2
 80066ba:	f7fe f8d4 	bl	8004866 <vListInsert>
 80066be:	e016      	b.n	80066ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066c0:	2300      	movs	r3, #0
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	2300      	movs	r3, #0
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	2100      	movs	r1, #0
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f7ff fd60 	bl	8006190 <xTimerGenericCommand>
 80066d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10a      	bne.n	80066ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	603b      	str	r3, [r7, #0]
}
 80066ea:	bf00      	nop
 80066ec:	e7fe      	b.n	80066ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066ee:	4b09      	ldr	r3, [pc, #36]	; (8006714 <prvSwitchTimerLists+0xc0>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1b1      	bne.n	800665c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066f8:	4b06      	ldr	r3, [pc, #24]	; (8006714 <prvSwitchTimerLists+0xc0>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066fe:	4b06      	ldr	r3, [pc, #24]	; (8006718 <prvSwitchTimerLists+0xc4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a04      	ldr	r2, [pc, #16]	; (8006714 <prvSwitchTimerLists+0xc0>)
 8006704:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006706:	4a04      	ldr	r2, [pc, #16]	; (8006718 <prvSwitchTimerLists+0xc4>)
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	6013      	str	r3, [r2, #0]
}
 800670c:	bf00      	nop
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20000c7c 	.word	0x20000c7c
 8006718:	20000c80 	.word	0x20000c80

0800671c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006722:	f000 f967 	bl	80069f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006726:	4b15      	ldr	r3, [pc, #84]	; (800677c <prvCheckForValidListAndQueue+0x60>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d120      	bne.n	8006770 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800672e:	4814      	ldr	r0, [pc, #80]	; (8006780 <prvCheckForValidListAndQueue+0x64>)
 8006730:	f7fe f848 	bl	80047c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006734:	4813      	ldr	r0, [pc, #76]	; (8006784 <prvCheckForValidListAndQueue+0x68>)
 8006736:	f7fe f845 	bl	80047c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800673a:	4b13      	ldr	r3, [pc, #76]	; (8006788 <prvCheckForValidListAndQueue+0x6c>)
 800673c:	4a10      	ldr	r2, [pc, #64]	; (8006780 <prvCheckForValidListAndQueue+0x64>)
 800673e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006740:	4b12      	ldr	r3, [pc, #72]	; (800678c <prvCheckForValidListAndQueue+0x70>)
 8006742:	4a10      	ldr	r2, [pc, #64]	; (8006784 <prvCheckForValidListAndQueue+0x68>)
 8006744:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006746:	2300      	movs	r3, #0
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	4b11      	ldr	r3, [pc, #68]	; (8006790 <prvCheckForValidListAndQueue+0x74>)
 800674c:	4a11      	ldr	r2, [pc, #68]	; (8006794 <prvCheckForValidListAndQueue+0x78>)
 800674e:	2110      	movs	r1, #16
 8006750:	200a      	movs	r0, #10
 8006752:	f7fe f953 	bl	80049fc <xQueueGenericCreateStatic>
 8006756:	4603      	mov	r3, r0
 8006758:	4a08      	ldr	r2, [pc, #32]	; (800677c <prvCheckForValidListAndQueue+0x60>)
 800675a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800675c:	4b07      	ldr	r3, [pc, #28]	; (800677c <prvCheckForValidListAndQueue+0x60>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d005      	beq.n	8006770 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006764:	4b05      	ldr	r3, [pc, #20]	; (800677c <prvCheckForValidListAndQueue+0x60>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	490b      	ldr	r1, [pc, #44]	; (8006798 <prvCheckForValidListAndQueue+0x7c>)
 800676a:	4618      	mov	r0, r3
 800676c:	f7fe fd6c 	bl	8005248 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006770:	f000 f970 	bl	8006a54 <vPortExitCritical>
}
 8006774:	bf00      	nop
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000c84 	.word	0x20000c84
 8006780:	20000c54 	.word	0x20000c54
 8006784:	20000c68 	.word	0x20000c68
 8006788:	20000c7c 	.word	0x20000c7c
 800678c:	20000c80 	.word	0x20000c80
 8006790:	20000d30 	.word	0x20000d30
 8006794:	20000c90 	.word	0x20000c90
 8006798:	08007b28 	.word	0x08007b28

0800679c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3b04      	subs	r3, #4
 80067ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3b04      	subs	r3, #4
 80067ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f023 0201 	bic.w	r2, r3, #1
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	3b04      	subs	r3, #4
 80067ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067cc:	4a0c      	ldr	r2, [pc, #48]	; (8006800 <pxPortInitialiseStack+0x64>)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3b14      	subs	r3, #20
 80067d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3b04      	subs	r3, #4
 80067e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f06f 0202 	mvn.w	r2, #2
 80067ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3b20      	subs	r3, #32
 80067f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067f2:	68fb      	ldr	r3, [r7, #12]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	08006805 	.word	0x08006805

08006804 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800680a:	2300      	movs	r3, #0
 800680c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800680e:	4b12      	ldr	r3, [pc, #72]	; (8006858 <prvTaskExitError+0x54>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006816:	d00a      	beq.n	800682e <prvTaskExitError+0x2a>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	60fb      	str	r3, [r7, #12]
}
 800682a:	bf00      	nop
 800682c:	e7fe      	b.n	800682c <prvTaskExitError+0x28>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	60bb      	str	r3, [r7, #8]
}
 8006840:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006842:	bf00      	nop
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0fc      	beq.n	8006844 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800684a:	bf00      	nop
 800684c:	bf00      	nop
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	2000000c 	.word	0x2000000c
 800685c:	00000000 	.word	0x00000000

08006860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006860:	4b07      	ldr	r3, [pc, #28]	; (8006880 <pxCurrentTCBConst2>)
 8006862:	6819      	ldr	r1, [r3, #0]
 8006864:	6808      	ldr	r0, [r1, #0]
 8006866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686a:	f380 8809 	msr	PSP, r0
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f04f 0000 	mov.w	r0, #0
 8006876:	f380 8811 	msr	BASEPRI, r0
 800687a:	4770      	bx	lr
 800687c:	f3af 8000 	nop.w

08006880 <pxCurrentTCBConst2>:
 8006880:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006884:	bf00      	nop
 8006886:	bf00      	nop

08006888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006888:	4808      	ldr	r0, [pc, #32]	; (80068ac <prvPortStartFirstTask+0x24>)
 800688a:	6800      	ldr	r0, [r0, #0]
 800688c:	6800      	ldr	r0, [r0, #0]
 800688e:	f380 8808 	msr	MSP, r0
 8006892:	f04f 0000 	mov.w	r0, #0
 8006896:	f380 8814 	msr	CONTROL, r0
 800689a:	b662      	cpsie	i
 800689c:	b661      	cpsie	f
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	df00      	svc	0
 80068a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068aa:	bf00      	nop
 80068ac:	e000ed08 	.word	0xe000ed08

080068b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068b6:	4b46      	ldr	r3, [pc, #280]	; (80069d0 <xPortStartScheduler+0x120>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a46      	ldr	r2, [pc, #280]	; (80069d4 <xPortStartScheduler+0x124>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d10a      	bne.n	80068d6 <xPortStartScheduler+0x26>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	613b      	str	r3, [r7, #16]
}
 80068d2:	bf00      	nop
 80068d4:	e7fe      	b.n	80068d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068d6:	4b3e      	ldr	r3, [pc, #248]	; (80069d0 <xPortStartScheduler+0x120>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a3f      	ldr	r2, [pc, #252]	; (80069d8 <xPortStartScheduler+0x128>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d10a      	bne.n	80068f6 <xPortStartScheduler+0x46>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	60fb      	str	r3, [r7, #12]
}
 80068f2:	bf00      	nop
 80068f4:	e7fe      	b.n	80068f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068f6:	4b39      	ldr	r3, [pc, #228]	; (80069dc <xPortStartScheduler+0x12c>)
 80068f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	22ff      	movs	r2, #255	; 0xff
 8006906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	b2db      	uxtb	r3, r3
 800690e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006918:	b2da      	uxtb	r2, r3
 800691a:	4b31      	ldr	r3, [pc, #196]	; (80069e0 <xPortStartScheduler+0x130>)
 800691c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800691e:	4b31      	ldr	r3, [pc, #196]	; (80069e4 <xPortStartScheduler+0x134>)
 8006920:	2207      	movs	r2, #7
 8006922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006924:	e009      	b.n	800693a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006926:	4b2f      	ldr	r3, [pc, #188]	; (80069e4 <xPortStartScheduler+0x134>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3b01      	subs	r3, #1
 800692c:	4a2d      	ldr	r2, [pc, #180]	; (80069e4 <xPortStartScheduler+0x134>)
 800692e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	b2db      	uxtb	r3, r3
 8006938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	b2db      	uxtb	r3, r3
 800693e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006942:	2b80      	cmp	r3, #128	; 0x80
 8006944:	d0ef      	beq.n	8006926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006946:	4b27      	ldr	r3, [pc, #156]	; (80069e4 <xPortStartScheduler+0x134>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f1c3 0307 	rsb	r3, r3, #7
 800694e:	2b04      	cmp	r3, #4
 8006950:	d00a      	beq.n	8006968 <xPortStartScheduler+0xb8>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	60bb      	str	r3, [r7, #8]
}
 8006964:	bf00      	nop
 8006966:	e7fe      	b.n	8006966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006968:	4b1e      	ldr	r3, [pc, #120]	; (80069e4 <xPortStartScheduler+0x134>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	021b      	lsls	r3, r3, #8
 800696e:	4a1d      	ldr	r2, [pc, #116]	; (80069e4 <xPortStartScheduler+0x134>)
 8006970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006972:	4b1c      	ldr	r3, [pc, #112]	; (80069e4 <xPortStartScheduler+0x134>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800697a:	4a1a      	ldr	r2, [pc, #104]	; (80069e4 <xPortStartScheduler+0x134>)
 800697c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	b2da      	uxtb	r2, r3
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006986:	4b18      	ldr	r3, [pc, #96]	; (80069e8 <xPortStartScheduler+0x138>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a17      	ldr	r2, [pc, #92]	; (80069e8 <xPortStartScheduler+0x138>)
 800698c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006992:	4b15      	ldr	r3, [pc, #84]	; (80069e8 <xPortStartScheduler+0x138>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a14      	ldr	r2, [pc, #80]	; (80069e8 <xPortStartScheduler+0x138>)
 8006998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800699c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800699e:	f000 f8dd 	bl	8006b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069a2:	4b12      	ldr	r3, [pc, #72]	; (80069ec <xPortStartScheduler+0x13c>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069a8:	f000 f8fc 	bl	8006ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069ac:	4b10      	ldr	r3, [pc, #64]	; (80069f0 <xPortStartScheduler+0x140>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a0f      	ldr	r2, [pc, #60]	; (80069f0 <xPortStartScheduler+0x140>)
 80069b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80069b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069b8:	f7ff ff66 	bl	8006888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069bc:	f7ff f854 	bl	8005a68 <vTaskSwitchContext>
	prvTaskExitError();
 80069c0:	f7ff ff20 	bl	8006804 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	e000ed00 	.word	0xe000ed00
 80069d4:	410fc271 	.word	0x410fc271
 80069d8:	410fc270 	.word	0x410fc270
 80069dc:	e000e400 	.word	0xe000e400
 80069e0:	20000d80 	.word	0x20000d80
 80069e4:	20000d84 	.word	0x20000d84
 80069e8:	e000ed20 	.word	0xe000ed20
 80069ec:	2000000c 	.word	0x2000000c
 80069f0:	e000ef34 	.word	0xe000ef34

080069f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	607b      	str	r3, [r7, #4]
}
 8006a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a0e:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <vPortEnterCritical+0x58>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3301      	adds	r3, #1
 8006a14:	4a0d      	ldr	r2, [pc, #52]	; (8006a4c <vPortEnterCritical+0x58>)
 8006a16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <vPortEnterCritical+0x58>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d10f      	bne.n	8006a40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a20:	4b0b      	ldr	r3, [pc, #44]	; (8006a50 <vPortEnterCritical+0x5c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	603b      	str	r3, [r7, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	e7fe      	b.n	8006a3e <vPortEnterCritical+0x4a>
	}
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	2000000c 	.word	0x2000000c
 8006a50:	e000ed04 	.word	0xe000ed04

08006a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a5a:	4b12      	ldr	r3, [pc, #72]	; (8006aa4 <vPortExitCritical+0x50>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10a      	bne.n	8006a78 <vPortExitCritical+0x24>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	607b      	str	r3, [r7, #4]
}
 8006a74:	bf00      	nop
 8006a76:	e7fe      	b.n	8006a76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a78:	4b0a      	ldr	r3, [pc, #40]	; (8006aa4 <vPortExitCritical+0x50>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	4a09      	ldr	r2, [pc, #36]	; (8006aa4 <vPortExitCritical+0x50>)
 8006a80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a82:	4b08      	ldr	r3, [pc, #32]	; (8006aa4 <vPortExitCritical+0x50>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d105      	bne.n	8006a96 <vPortExitCritical+0x42>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	f383 8811 	msr	BASEPRI, r3
}
 8006a94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	2000000c 	.word	0x2000000c
	...

08006ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ab0:	f3ef 8009 	mrs	r0, PSP
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	4b15      	ldr	r3, [pc, #84]	; (8006b10 <pxCurrentTCBConst>)
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	f01e 0f10 	tst.w	lr, #16
 8006ac0:	bf08      	it	eq
 8006ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aca:	6010      	str	r0, [r2, #0]
 8006acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ad4:	f380 8811 	msr	BASEPRI, r0
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f7fe ffc2 	bl	8005a68 <vTaskSwitchContext>
 8006ae4:	f04f 0000 	mov.w	r0, #0
 8006ae8:	f380 8811 	msr	BASEPRI, r0
 8006aec:	bc09      	pop	{r0, r3}
 8006aee:	6819      	ldr	r1, [r3, #0]
 8006af0:	6808      	ldr	r0, [r1, #0]
 8006af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af6:	f01e 0f10 	tst.w	lr, #16
 8006afa:	bf08      	it	eq
 8006afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b00:	f380 8809 	msr	PSP, r0
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	f3af 8000 	nop.w

08006b10 <pxCurrentTCBConst>:
 8006b10:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop

08006b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	607b      	str	r3, [r7, #4]
}
 8006b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b32:	f7fe fedf 	bl	80058f4 <xTaskIncrementTick>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b3c:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <xPortSysTickHandler+0x40>)
 8006b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	2300      	movs	r3, #0
 8006b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	f383 8811 	msr	BASEPRI, r3
}
 8006b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b50:	bf00      	nop
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	e000ed04 	.word	0xe000ed04

08006b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b60:	4b0b      	ldr	r3, [pc, #44]	; (8006b90 <vPortSetupTimerInterrupt+0x34>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b66:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <vPortSetupTimerInterrupt+0x38>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b6c:	4b0a      	ldr	r3, [pc, #40]	; (8006b98 <vPortSetupTimerInterrupt+0x3c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a0a      	ldr	r2, [pc, #40]	; (8006b9c <vPortSetupTimerInterrupt+0x40>)
 8006b72:	fba2 2303 	umull	r2, r3, r2, r3
 8006b76:	099b      	lsrs	r3, r3, #6
 8006b78:	4a09      	ldr	r2, [pc, #36]	; (8006ba0 <vPortSetupTimerInterrupt+0x44>)
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b7e:	4b04      	ldr	r3, [pc, #16]	; (8006b90 <vPortSetupTimerInterrupt+0x34>)
 8006b80:	2207      	movs	r2, #7
 8006b82:	601a      	str	r2, [r3, #0]
}
 8006b84:	bf00      	nop
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	e000e010 	.word	0xe000e010
 8006b94:	e000e018 	.word	0xe000e018
 8006b98:	20000000 	.word	0x20000000
 8006b9c:	10624dd3 	.word	0x10624dd3
 8006ba0:	e000e014 	.word	0xe000e014

08006ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006bb4 <vPortEnableVFP+0x10>
 8006ba8:	6801      	ldr	r1, [r0, #0]
 8006baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bae:	6001      	str	r1, [r0, #0]
 8006bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006bb2:	bf00      	nop
 8006bb4:	e000ed88 	.word	0xe000ed88

08006bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bbe:	f3ef 8305 	mrs	r3, IPSR
 8006bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b0f      	cmp	r3, #15
 8006bc8:	d914      	bls.n	8006bf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bca:	4a17      	ldr	r2, [pc, #92]	; (8006c28 <vPortValidateInterruptPriority+0x70>)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4413      	add	r3, r2
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bd4:	4b15      	ldr	r3, [pc, #84]	; (8006c2c <vPortValidateInterruptPriority+0x74>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	7afa      	ldrb	r2, [r7, #11]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d20a      	bcs.n	8006bf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	607b      	str	r3, [r7, #4]
}
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bf4:	4b0e      	ldr	r3, [pc, #56]	; (8006c30 <vPortValidateInterruptPriority+0x78>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bfc:	4b0d      	ldr	r3, [pc, #52]	; (8006c34 <vPortValidateInterruptPriority+0x7c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d90a      	bls.n	8006c1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	603b      	str	r3, [r7, #0]
}
 8006c16:	bf00      	nop
 8006c18:	e7fe      	b.n	8006c18 <vPortValidateInterruptPriority+0x60>
	}
 8006c1a:	bf00      	nop
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	e000e3f0 	.word	0xe000e3f0
 8006c2c:	20000d80 	.word	0x20000d80
 8006c30:	e000ed0c 	.word	0xe000ed0c
 8006c34:	20000d84 	.word	0x20000d84

08006c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08a      	sub	sp, #40	; 0x28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c40:	2300      	movs	r3, #0
 8006c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c44:	f7fe fd9a 	bl	800577c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c48:	4b5b      	ldr	r3, [pc, #364]	; (8006db8 <pvPortMalloc+0x180>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c50:	f000 f920 	bl	8006e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c54:	4b59      	ldr	r3, [pc, #356]	; (8006dbc <pvPortMalloc+0x184>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f040 8093 	bne.w	8006d88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d01d      	beq.n	8006ca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c68:	2208      	movs	r2, #8
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d014      	beq.n	8006ca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f023 0307 	bic.w	r3, r3, #7
 8006c80:	3308      	adds	r3, #8
 8006c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <pvPortMalloc+0x6c>
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	617b      	str	r3, [r7, #20]
}
 8006ca0:	bf00      	nop
 8006ca2:	e7fe      	b.n	8006ca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d06e      	beq.n	8006d88 <pvPortMalloc+0x150>
 8006caa:	4b45      	ldr	r3, [pc, #276]	; (8006dc0 <pvPortMalloc+0x188>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d869      	bhi.n	8006d88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cb4:	4b43      	ldr	r3, [pc, #268]	; (8006dc4 <pvPortMalloc+0x18c>)
 8006cb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cb8:	4b42      	ldr	r3, [pc, #264]	; (8006dc4 <pvPortMalloc+0x18c>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cbe:	e004      	b.n	8006cca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d903      	bls.n	8006cdc <pvPortMalloc+0xa4>
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1f1      	bne.n	8006cc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cdc:	4b36      	ldr	r3, [pc, #216]	; (8006db8 <pvPortMalloc+0x180>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d050      	beq.n	8006d88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2208      	movs	r2, #8
 8006cec:	4413      	add	r3, r2
 8006cee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	1ad2      	subs	r2, r2, r3
 8006d00:	2308      	movs	r3, #8
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d91f      	bls.n	8006d48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	f003 0307 	and.w	r3, r3, #7
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <pvPortMalloc+0xf8>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	613b      	str	r3, [r7, #16]
}
 8006d2c:	bf00      	nop
 8006d2e:	e7fe      	b.n	8006d2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	1ad2      	subs	r2, r2, r3
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d42:	69b8      	ldr	r0, [r7, #24]
 8006d44:	f000 f908 	bl	8006f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d48:	4b1d      	ldr	r3, [pc, #116]	; (8006dc0 <pvPortMalloc+0x188>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	4a1b      	ldr	r2, [pc, #108]	; (8006dc0 <pvPortMalloc+0x188>)
 8006d54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d56:	4b1a      	ldr	r3, [pc, #104]	; (8006dc0 <pvPortMalloc+0x188>)
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	4b1b      	ldr	r3, [pc, #108]	; (8006dc8 <pvPortMalloc+0x190>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d203      	bcs.n	8006d6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d62:	4b17      	ldr	r3, [pc, #92]	; (8006dc0 <pvPortMalloc+0x188>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a18      	ldr	r2, [pc, #96]	; (8006dc8 <pvPortMalloc+0x190>)
 8006d68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	4b13      	ldr	r3, [pc, #76]	; (8006dbc <pvPortMalloc+0x184>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	431a      	orrs	r2, r3
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d7e:	4b13      	ldr	r3, [pc, #76]	; (8006dcc <pvPortMalloc+0x194>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3301      	adds	r3, #1
 8006d84:	4a11      	ldr	r2, [pc, #68]	; (8006dcc <pvPortMalloc+0x194>)
 8006d86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d88:	f7fe fd06 	bl	8005798 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	f003 0307 	and.w	r3, r3, #7
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00a      	beq.n	8006dac <pvPortMalloc+0x174>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	60fb      	str	r3, [r7, #12]
}
 8006da8:	bf00      	nop
 8006daa:	e7fe      	b.n	8006daa <pvPortMalloc+0x172>
	return pvReturn;
 8006dac:	69fb      	ldr	r3, [r7, #28]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3728      	adds	r7, #40	; 0x28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20004990 	.word	0x20004990
 8006dbc:	200049a4 	.word	0x200049a4
 8006dc0:	20004994 	.word	0x20004994
 8006dc4:	20004988 	.word	0x20004988
 8006dc8:	20004998 	.word	0x20004998
 8006dcc:	2000499c 	.word	0x2000499c

08006dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d04d      	beq.n	8006e7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006de2:	2308      	movs	r3, #8
 8006de4:	425b      	negs	r3, r3
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	4413      	add	r3, r2
 8006dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	4b24      	ldr	r3, [pc, #144]	; (8006e88 <vPortFree+0xb8>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10a      	bne.n	8006e14 <vPortFree+0x44>
	__asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	60fb      	str	r3, [r7, #12]
}
 8006e10:	bf00      	nop
 8006e12:	e7fe      	b.n	8006e12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00a      	beq.n	8006e32 <vPortFree+0x62>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	60bb      	str	r3, [r7, #8]
}
 8006e2e:	bf00      	nop
 8006e30:	e7fe      	b.n	8006e30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	4b14      	ldr	r3, [pc, #80]	; (8006e88 <vPortFree+0xb8>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d01e      	beq.n	8006e7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d11a      	bne.n	8006e7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	4b0e      	ldr	r3, [pc, #56]	; (8006e88 <vPortFree+0xb8>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	43db      	mvns	r3, r3
 8006e52:	401a      	ands	r2, r3
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e58:	f7fe fc90 	bl	800577c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	4b0a      	ldr	r3, [pc, #40]	; (8006e8c <vPortFree+0xbc>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4413      	add	r3, r2
 8006e66:	4a09      	ldr	r2, [pc, #36]	; (8006e8c <vPortFree+0xbc>)
 8006e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e6a:	6938      	ldr	r0, [r7, #16]
 8006e6c:	f000 f874 	bl	8006f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e70:	4b07      	ldr	r3, [pc, #28]	; (8006e90 <vPortFree+0xc0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3301      	adds	r3, #1
 8006e76:	4a06      	ldr	r2, [pc, #24]	; (8006e90 <vPortFree+0xc0>)
 8006e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e7a:	f7fe fc8d 	bl	8005798 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e7e:	bf00      	nop
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	200049a4 	.word	0x200049a4
 8006e8c:	20004994 	.word	0x20004994
 8006e90:	200049a0 	.word	0x200049a0

08006e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ea0:	4b27      	ldr	r3, [pc, #156]	; (8006f40 <prvHeapInit+0xac>)
 8006ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00c      	beq.n	8006ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3307      	adds	r3, #7
 8006eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0307 	bic.w	r3, r3, #7
 8006eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	4a1f      	ldr	r2, [pc, #124]	; (8006f40 <prvHeapInit+0xac>)
 8006ec4:	4413      	add	r3, r2
 8006ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ecc:	4a1d      	ldr	r2, [pc, #116]	; (8006f44 <prvHeapInit+0xb0>)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ed2:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <prvHeapInit+0xb0>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	4413      	add	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0307 	bic.w	r3, r3, #7
 8006eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4a15      	ldr	r2, [pc, #84]	; (8006f48 <prvHeapInit+0xb4>)
 8006ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ef6:	4b14      	ldr	r3, [pc, #80]	; (8006f48 <prvHeapInit+0xb4>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2200      	movs	r2, #0
 8006efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006efe:	4b12      	ldr	r3, [pc, #72]	; (8006f48 <prvHeapInit+0xb4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	1ad2      	subs	r2, r2, r3
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f14:	4b0c      	ldr	r3, [pc, #48]	; (8006f48 <prvHeapInit+0xb4>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	4a0a      	ldr	r2, [pc, #40]	; (8006f4c <prvHeapInit+0xb8>)
 8006f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	4a09      	ldr	r2, [pc, #36]	; (8006f50 <prvHeapInit+0xbc>)
 8006f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f2c:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <prvHeapInit+0xc0>)
 8006f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f32:	601a      	str	r2, [r3, #0]
}
 8006f34:	bf00      	nop
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	20000d88 	.word	0x20000d88
 8006f44:	20004988 	.word	0x20004988
 8006f48:	20004990 	.word	0x20004990
 8006f4c:	20004998 	.word	0x20004998
 8006f50:	20004994 	.word	0x20004994
 8006f54:	200049a4 	.word	0x200049a4

08006f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f60:	4b28      	ldr	r3, [pc, #160]	; (8007004 <prvInsertBlockIntoFreeList+0xac>)
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	e002      	b.n	8006f6c <prvInsertBlockIntoFreeList+0x14>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d8f7      	bhi.n	8006f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4413      	add	r3, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d108      	bne.n	8006f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	441a      	add	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	441a      	add	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d118      	bne.n	8006fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	4b15      	ldr	r3, [pc, #84]	; (8007008 <prvInsertBlockIntoFreeList+0xb0>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d00d      	beq.n	8006fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	441a      	add	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	e008      	b.n	8006fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fd6:	4b0c      	ldr	r3, [pc, #48]	; (8007008 <prvInsertBlockIntoFreeList+0xb0>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e003      	b.n	8006fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d002      	beq.n	8006ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ff6:	bf00      	nop
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	20004988 	.word	0x20004988
 8007008:	20004990 	.word	0x20004990

0800700c <__errno>:
 800700c:	4b01      	ldr	r3, [pc, #4]	; (8007014 <__errno+0x8>)
 800700e:	6818      	ldr	r0, [r3, #0]
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	20000010 	.word	0x20000010

08007018 <__libc_init_array>:
 8007018:	b570      	push	{r4, r5, r6, lr}
 800701a:	4d0d      	ldr	r5, [pc, #52]	; (8007050 <__libc_init_array+0x38>)
 800701c:	4c0d      	ldr	r4, [pc, #52]	; (8007054 <__libc_init_array+0x3c>)
 800701e:	1b64      	subs	r4, r4, r5
 8007020:	10a4      	asrs	r4, r4, #2
 8007022:	2600      	movs	r6, #0
 8007024:	42a6      	cmp	r6, r4
 8007026:	d109      	bne.n	800703c <__libc_init_array+0x24>
 8007028:	4d0b      	ldr	r5, [pc, #44]	; (8007058 <__libc_init_array+0x40>)
 800702a:	4c0c      	ldr	r4, [pc, #48]	; (800705c <__libc_init_array+0x44>)
 800702c:	f000 fcf0 	bl	8007a10 <_init>
 8007030:	1b64      	subs	r4, r4, r5
 8007032:	10a4      	asrs	r4, r4, #2
 8007034:	2600      	movs	r6, #0
 8007036:	42a6      	cmp	r6, r4
 8007038:	d105      	bne.n	8007046 <__libc_init_array+0x2e>
 800703a:	bd70      	pop	{r4, r5, r6, pc}
 800703c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007040:	4798      	blx	r3
 8007042:	3601      	adds	r6, #1
 8007044:	e7ee      	b.n	8007024 <__libc_init_array+0xc>
 8007046:	f855 3b04 	ldr.w	r3, [r5], #4
 800704a:	4798      	blx	r3
 800704c:	3601      	adds	r6, #1
 800704e:	e7f2      	b.n	8007036 <__libc_init_array+0x1e>
 8007050:	08007cd4 	.word	0x08007cd4
 8007054:	08007cd4 	.word	0x08007cd4
 8007058:	08007cd4 	.word	0x08007cd4
 800705c:	08007cd8 	.word	0x08007cd8

08007060 <memcpy>:
 8007060:	440a      	add	r2, r1
 8007062:	4291      	cmp	r1, r2
 8007064:	f100 33ff 	add.w	r3, r0, #4294967295
 8007068:	d100      	bne.n	800706c <memcpy+0xc>
 800706a:	4770      	bx	lr
 800706c:	b510      	push	{r4, lr}
 800706e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007072:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007076:	4291      	cmp	r1, r2
 8007078:	d1f9      	bne.n	800706e <memcpy+0xe>
 800707a:	bd10      	pop	{r4, pc}

0800707c <memset>:
 800707c:	4402      	add	r2, r0
 800707e:	4603      	mov	r3, r0
 8007080:	4293      	cmp	r3, r2
 8007082:	d100      	bne.n	8007086 <memset+0xa>
 8007084:	4770      	bx	lr
 8007086:	f803 1b01 	strb.w	r1, [r3], #1
 800708a:	e7f9      	b.n	8007080 <memset+0x4>

0800708c <siprintf>:
 800708c:	b40e      	push	{r1, r2, r3}
 800708e:	b500      	push	{lr}
 8007090:	b09c      	sub	sp, #112	; 0x70
 8007092:	ab1d      	add	r3, sp, #116	; 0x74
 8007094:	9002      	str	r0, [sp, #8]
 8007096:	9006      	str	r0, [sp, #24]
 8007098:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800709c:	4809      	ldr	r0, [pc, #36]	; (80070c4 <siprintf+0x38>)
 800709e:	9107      	str	r1, [sp, #28]
 80070a0:	9104      	str	r1, [sp, #16]
 80070a2:	4909      	ldr	r1, [pc, #36]	; (80070c8 <siprintf+0x3c>)
 80070a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070a8:	9105      	str	r1, [sp, #20]
 80070aa:	6800      	ldr	r0, [r0, #0]
 80070ac:	9301      	str	r3, [sp, #4]
 80070ae:	a902      	add	r1, sp, #8
 80070b0:	f000 f90a 	bl	80072c8 <_svfiprintf_r>
 80070b4:	9b02      	ldr	r3, [sp, #8]
 80070b6:	2200      	movs	r2, #0
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	b01c      	add	sp, #112	; 0x70
 80070bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80070c0:	b003      	add	sp, #12
 80070c2:	4770      	bx	lr
 80070c4:	20000010 	.word	0x20000010
 80070c8:	ffff0208 	.word	0xffff0208

080070cc <strncat>:
 80070cc:	b530      	push	{r4, r5, lr}
 80070ce:	4604      	mov	r4, r0
 80070d0:	7825      	ldrb	r5, [r4, #0]
 80070d2:	4623      	mov	r3, r4
 80070d4:	3401      	adds	r4, #1
 80070d6:	2d00      	cmp	r5, #0
 80070d8:	d1fa      	bne.n	80070d0 <strncat+0x4>
 80070da:	3a01      	subs	r2, #1
 80070dc:	d304      	bcc.n	80070e8 <strncat+0x1c>
 80070de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070e2:	f803 4b01 	strb.w	r4, [r3], #1
 80070e6:	b904      	cbnz	r4, 80070ea <strncat+0x1e>
 80070e8:	bd30      	pop	{r4, r5, pc}
 80070ea:	2a00      	cmp	r2, #0
 80070ec:	d1f5      	bne.n	80070da <strncat+0xe>
 80070ee:	701a      	strb	r2, [r3, #0]
 80070f0:	e7f3      	b.n	80070da <strncat+0xe>
	...

080070f4 <_strtol_l.isra.0>:
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070fa:	d001      	beq.n	8007100 <_strtol_l.isra.0+0xc>
 80070fc:	2b24      	cmp	r3, #36	; 0x24
 80070fe:	d906      	bls.n	800710e <_strtol_l.isra.0+0x1a>
 8007100:	f7ff ff84 	bl	800700c <__errno>
 8007104:	2316      	movs	r3, #22
 8007106:	6003      	str	r3, [r0, #0]
 8007108:	2000      	movs	r0, #0
 800710a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800710e:	4f3a      	ldr	r7, [pc, #232]	; (80071f8 <_strtol_l.isra.0+0x104>)
 8007110:	468e      	mov	lr, r1
 8007112:	4676      	mov	r6, lr
 8007114:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007118:	5de5      	ldrb	r5, [r4, r7]
 800711a:	f015 0508 	ands.w	r5, r5, #8
 800711e:	d1f8      	bne.n	8007112 <_strtol_l.isra.0+0x1e>
 8007120:	2c2d      	cmp	r4, #45	; 0x2d
 8007122:	d134      	bne.n	800718e <_strtol_l.isra.0+0x9a>
 8007124:	f89e 4000 	ldrb.w	r4, [lr]
 8007128:	f04f 0801 	mov.w	r8, #1
 800712c:	f106 0e02 	add.w	lr, r6, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d05c      	beq.n	80071ee <_strtol_l.isra.0+0xfa>
 8007134:	2b10      	cmp	r3, #16
 8007136:	d10c      	bne.n	8007152 <_strtol_l.isra.0+0x5e>
 8007138:	2c30      	cmp	r4, #48	; 0x30
 800713a:	d10a      	bne.n	8007152 <_strtol_l.isra.0+0x5e>
 800713c:	f89e 4000 	ldrb.w	r4, [lr]
 8007140:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007144:	2c58      	cmp	r4, #88	; 0x58
 8007146:	d14d      	bne.n	80071e4 <_strtol_l.isra.0+0xf0>
 8007148:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800714c:	2310      	movs	r3, #16
 800714e:	f10e 0e02 	add.w	lr, lr, #2
 8007152:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007156:	f10c 3cff 	add.w	ip, ip, #4294967295
 800715a:	2600      	movs	r6, #0
 800715c:	fbbc f9f3 	udiv	r9, ip, r3
 8007160:	4635      	mov	r5, r6
 8007162:	fb03 ca19 	mls	sl, r3, r9, ip
 8007166:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800716a:	2f09      	cmp	r7, #9
 800716c:	d818      	bhi.n	80071a0 <_strtol_l.isra.0+0xac>
 800716e:	463c      	mov	r4, r7
 8007170:	42a3      	cmp	r3, r4
 8007172:	dd24      	ble.n	80071be <_strtol_l.isra.0+0xca>
 8007174:	2e00      	cmp	r6, #0
 8007176:	db1f      	blt.n	80071b8 <_strtol_l.isra.0+0xc4>
 8007178:	45a9      	cmp	r9, r5
 800717a:	d31d      	bcc.n	80071b8 <_strtol_l.isra.0+0xc4>
 800717c:	d101      	bne.n	8007182 <_strtol_l.isra.0+0x8e>
 800717e:	45a2      	cmp	sl, r4
 8007180:	db1a      	blt.n	80071b8 <_strtol_l.isra.0+0xc4>
 8007182:	fb05 4503 	mla	r5, r5, r3, r4
 8007186:	2601      	movs	r6, #1
 8007188:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800718c:	e7eb      	b.n	8007166 <_strtol_l.isra.0+0x72>
 800718e:	2c2b      	cmp	r4, #43	; 0x2b
 8007190:	bf08      	it	eq
 8007192:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007196:	46a8      	mov	r8, r5
 8007198:	bf08      	it	eq
 800719a:	f106 0e02 	addeq.w	lr, r6, #2
 800719e:	e7c7      	b.n	8007130 <_strtol_l.isra.0+0x3c>
 80071a0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80071a4:	2f19      	cmp	r7, #25
 80071a6:	d801      	bhi.n	80071ac <_strtol_l.isra.0+0xb8>
 80071a8:	3c37      	subs	r4, #55	; 0x37
 80071aa:	e7e1      	b.n	8007170 <_strtol_l.isra.0+0x7c>
 80071ac:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80071b0:	2f19      	cmp	r7, #25
 80071b2:	d804      	bhi.n	80071be <_strtol_l.isra.0+0xca>
 80071b4:	3c57      	subs	r4, #87	; 0x57
 80071b6:	e7db      	b.n	8007170 <_strtol_l.isra.0+0x7c>
 80071b8:	f04f 36ff 	mov.w	r6, #4294967295
 80071bc:	e7e4      	b.n	8007188 <_strtol_l.isra.0+0x94>
 80071be:	2e00      	cmp	r6, #0
 80071c0:	da05      	bge.n	80071ce <_strtol_l.isra.0+0xda>
 80071c2:	2322      	movs	r3, #34	; 0x22
 80071c4:	6003      	str	r3, [r0, #0]
 80071c6:	4665      	mov	r5, ip
 80071c8:	b942      	cbnz	r2, 80071dc <_strtol_l.isra.0+0xe8>
 80071ca:	4628      	mov	r0, r5
 80071cc:	e79d      	b.n	800710a <_strtol_l.isra.0+0x16>
 80071ce:	f1b8 0f00 	cmp.w	r8, #0
 80071d2:	d000      	beq.n	80071d6 <_strtol_l.isra.0+0xe2>
 80071d4:	426d      	negs	r5, r5
 80071d6:	2a00      	cmp	r2, #0
 80071d8:	d0f7      	beq.n	80071ca <_strtol_l.isra.0+0xd6>
 80071da:	b10e      	cbz	r6, 80071e0 <_strtol_l.isra.0+0xec>
 80071dc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80071e0:	6011      	str	r1, [r2, #0]
 80071e2:	e7f2      	b.n	80071ca <_strtol_l.isra.0+0xd6>
 80071e4:	2430      	movs	r4, #48	; 0x30
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1b3      	bne.n	8007152 <_strtol_l.isra.0+0x5e>
 80071ea:	2308      	movs	r3, #8
 80071ec:	e7b1      	b.n	8007152 <_strtol_l.isra.0+0x5e>
 80071ee:	2c30      	cmp	r4, #48	; 0x30
 80071f0:	d0a4      	beq.n	800713c <_strtol_l.isra.0+0x48>
 80071f2:	230a      	movs	r3, #10
 80071f4:	e7ad      	b.n	8007152 <_strtol_l.isra.0+0x5e>
 80071f6:	bf00      	nop
 80071f8:	08007b99 	.word	0x08007b99

080071fc <strtol>:
 80071fc:	4613      	mov	r3, r2
 80071fe:	460a      	mov	r2, r1
 8007200:	4601      	mov	r1, r0
 8007202:	4802      	ldr	r0, [pc, #8]	; (800720c <strtol+0x10>)
 8007204:	6800      	ldr	r0, [r0, #0]
 8007206:	f7ff bf75 	b.w	80070f4 <_strtol_l.isra.0>
 800720a:	bf00      	nop
 800720c:	20000010 	.word	0x20000010

08007210 <__ssputs_r>:
 8007210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007214:	688e      	ldr	r6, [r1, #8]
 8007216:	429e      	cmp	r6, r3
 8007218:	4682      	mov	sl, r0
 800721a:	460c      	mov	r4, r1
 800721c:	4690      	mov	r8, r2
 800721e:	461f      	mov	r7, r3
 8007220:	d838      	bhi.n	8007294 <__ssputs_r+0x84>
 8007222:	898a      	ldrh	r2, [r1, #12]
 8007224:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007228:	d032      	beq.n	8007290 <__ssputs_r+0x80>
 800722a:	6825      	ldr	r5, [r4, #0]
 800722c:	6909      	ldr	r1, [r1, #16]
 800722e:	eba5 0901 	sub.w	r9, r5, r1
 8007232:	6965      	ldr	r5, [r4, #20]
 8007234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007238:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800723c:	3301      	adds	r3, #1
 800723e:	444b      	add	r3, r9
 8007240:	106d      	asrs	r5, r5, #1
 8007242:	429d      	cmp	r5, r3
 8007244:	bf38      	it	cc
 8007246:	461d      	movcc	r5, r3
 8007248:	0553      	lsls	r3, r2, #21
 800724a:	d531      	bpl.n	80072b0 <__ssputs_r+0xa0>
 800724c:	4629      	mov	r1, r5
 800724e:	f000 fb39 	bl	80078c4 <_malloc_r>
 8007252:	4606      	mov	r6, r0
 8007254:	b950      	cbnz	r0, 800726c <__ssputs_r+0x5c>
 8007256:	230c      	movs	r3, #12
 8007258:	f8ca 3000 	str.w	r3, [sl]
 800725c:	89a3      	ldrh	r3, [r4, #12]
 800725e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007262:	81a3      	strh	r3, [r4, #12]
 8007264:	f04f 30ff 	mov.w	r0, #4294967295
 8007268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726c:	6921      	ldr	r1, [r4, #16]
 800726e:	464a      	mov	r2, r9
 8007270:	f7ff fef6 	bl	8007060 <memcpy>
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800727a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727e:	81a3      	strh	r3, [r4, #12]
 8007280:	6126      	str	r6, [r4, #16]
 8007282:	6165      	str	r5, [r4, #20]
 8007284:	444e      	add	r6, r9
 8007286:	eba5 0509 	sub.w	r5, r5, r9
 800728a:	6026      	str	r6, [r4, #0]
 800728c:	60a5      	str	r5, [r4, #8]
 800728e:	463e      	mov	r6, r7
 8007290:	42be      	cmp	r6, r7
 8007292:	d900      	bls.n	8007296 <__ssputs_r+0x86>
 8007294:	463e      	mov	r6, r7
 8007296:	4632      	mov	r2, r6
 8007298:	6820      	ldr	r0, [r4, #0]
 800729a:	4641      	mov	r1, r8
 800729c:	f000 faa8 	bl	80077f0 <memmove>
 80072a0:	68a3      	ldr	r3, [r4, #8]
 80072a2:	6822      	ldr	r2, [r4, #0]
 80072a4:	1b9b      	subs	r3, r3, r6
 80072a6:	4432      	add	r2, r6
 80072a8:	60a3      	str	r3, [r4, #8]
 80072aa:	6022      	str	r2, [r4, #0]
 80072ac:	2000      	movs	r0, #0
 80072ae:	e7db      	b.n	8007268 <__ssputs_r+0x58>
 80072b0:	462a      	mov	r2, r5
 80072b2:	f000 fb61 	bl	8007978 <_realloc_r>
 80072b6:	4606      	mov	r6, r0
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d1e1      	bne.n	8007280 <__ssputs_r+0x70>
 80072bc:	6921      	ldr	r1, [r4, #16]
 80072be:	4650      	mov	r0, sl
 80072c0:	f000 fab0 	bl	8007824 <_free_r>
 80072c4:	e7c7      	b.n	8007256 <__ssputs_r+0x46>
	...

080072c8 <_svfiprintf_r>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	4698      	mov	r8, r3
 80072ce:	898b      	ldrh	r3, [r1, #12]
 80072d0:	061b      	lsls	r3, r3, #24
 80072d2:	b09d      	sub	sp, #116	; 0x74
 80072d4:	4607      	mov	r7, r0
 80072d6:	460d      	mov	r5, r1
 80072d8:	4614      	mov	r4, r2
 80072da:	d50e      	bpl.n	80072fa <_svfiprintf_r+0x32>
 80072dc:	690b      	ldr	r3, [r1, #16]
 80072de:	b963      	cbnz	r3, 80072fa <_svfiprintf_r+0x32>
 80072e0:	2140      	movs	r1, #64	; 0x40
 80072e2:	f000 faef 	bl	80078c4 <_malloc_r>
 80072e6:	6028      	str	r0, [r5, #0]
 80072e8:	6128      	str	r0, [r5, #16]
 80072ea:	b920      	cbnz	r0, 80072f6 <_svfiprintf_r+0x2e>
 80072ec:	230c      	movs	r3, #12
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	f04f 30ff 	mov.w	r0, #4294967295
 80072f4:	e0d1      	b.n	800749a <_svfiprintf_r+0x1d2>
 80072f6:	2340      	movs	r3, #64	; 0x40
 80072f8:	616b      	str	r3, [r5, #20]
 80072fa:	2300      	movs	r3, #0
 80072fc:	9309      	str	r3, [sp, #36]	; 0x24
 80072fe:	2320      	movs	r3, #32
 8007300:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007304:	f8cd 800c 	str.w	r8, [sp, #12]
 8007308:	2330      	movs	r3, #48	; 0x30
 800730a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80074b4 <_svfiprintf_r+0x1ec>
 800730e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007312:	f04f 0901 	mov.w	r9, #1
 8007316:	4623      	mov	r3, r4
 8007318:	469a      	mov	sl, r3
 800731a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800731e:	b10a      	cbz	r2, 8007324 <_svfiprintf_r+0x5c>
 8007320:	2a25      	cmp	r2, #37	; 0x25
 8007322:	d1f9      	bne.n	8007318 <_svfiprintf_r+0x50>
 8007324:	ebba 0b04 	subs.w	fp, sl, r4
 8007328:	d00b      	beq.n	8007342 <_svfiprintf_r+0x7a>
 800732a:	465b      	mov	r3, fp
 800732c:	4622      	mov	r2, r4
 800732e:	4629      	mov	r1, r5
 8007330:	4638      	mov	r0, r7
 8007332:	f7ff ff6d 	bl	8007210 <__ssputs_r>
 8007336:	3001      	adds	r0, #1
 8007338:	f000 80aa 	beq.w	8007490 <_svfiprintf_r+0x1c8>
 800733c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800733e:	445a      	add	r2, fp
 8007340:	9209      	str	r2, [sp, #36]	; 0x24
 8007342:	f89a 3000 	ldrb.w	r3, [sl]
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 80a2 	beq.w	8007490 <_svfiprintf_r+0x1c8>
 800734c:	2300      	movs	r3, #0
 800734e:	f04f 32ff 	mov.w	r2, #4294967295
 8007352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007356:	f10a 0a01 	add.w	sl, sl, #1
 800735a:	9304      	str	r3, [sp, #16]
 800735c:	9307      	str	r3, [sp, #28]
 800735e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007362:	931a      	str	r3, [sp, #104]	; 0x68
 8007364:	4654      	mov	r4, sl
 8007366:	2205      	movs	r2, #5
 8007368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800736c:	4851      	ldr	r0, [pc, #324]	; (80074b4 <_svfiprintf_r+0x1ec>)
 800736e:	f7f8 ff4f 	bl	8000210 <memchr>
 8007372:	9a04      	ldr	r2, [sp, #16]
 8007374:	b9d8      	cbnz	r0, 80073ae <_svfiprintf_r+0xe6>
 8007376:	06d0      	lsls	r0, r2, #27
 8007378:	bf44      	itt	mi
 800737a:	2320      	movmi	r3, #32
 800737c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007380:	0711      	lsls	r1, r2, #28
 8007382:	bf44      	itt	mi
 8007384:	232b      	movmi	r3, #43	; 0x2b
 8007386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800738a:	f89a 3000 	ldrb.w	r3, [sl]
 800738e:	2b2a      	cmp	r3, #42	; 0x2a
 8007390:	d015      	beq.n	80073be <_svfiprintf_r+0xf6>
 8007392:	9a07      	ldr	r2, [sp, #28]
 8007394:	4654      	mov	r4, sl
 8007396:	2000      	movs	r0, #0
 8007398:	f04f 0c0a 	mov.w	ip, #10
 800739c:	4621      	mov	r1, r4
 800739e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073a2:	3b30      	subs	r3, #48	; 0x30
 80073a4:	2b09      	cmp	r3, #9
 80073a6:	d94e      	bls.n	8007446 <_svfiprintf_r+0x17e>
 80073a8:	b1b0      	cbz	r0, 80073d8 <_svfiprintf_r+0x110>
 80073aa:	9207      	str	r2, [sp, #28]
 80073ac:	e014      	b.n	80073d8 <_svfiprintf_r+0x110>
 80073ae:	eba0 0308 	sub.w	r3, r0, r8
 80073b2:	fa09 f303 	lsl.w	r3, r9, r3
 80073b6:	4313      	orrs	r3, r2
 80073b8:	9304      	str	r3, [sp, #16]
 80073ba:	46a2      	mov	sl, r4
 80073bc:	e7d2      	b.n	8007364 <_svfiprintf_r+0x9c>
 80073be:	9b03      	ldr	r3, [sp, #12]
 80073c0:	1d19      	adds	r1, r3, #4
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	9103      	str	r1, [sp, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	bfbb      	ittet	lt
 80073ca:	425b      	neglt	r3, r3
 80073cc:	f042 0202 	orrlt.w	r2, r2, #2
 80073d0:	9307      	strge	r3, [sp, #28]
 80073d2:	9307      	strlt	r3, [sp, #28]
 80073d4:	bfb8      	it	lt
 80073d6:	9204      	strlt	r2, [sp, #16]
 80073d8:	7823      	ldrb	r3, [r4, #0]
 80073da:	2b2e      	cmp	r3, #46	; 0x2e
 80073dc:	d10c      	bne.n	80073f8 <_svfiprintf_r+0x130>
 80073de:	7863      	ldrb	r3, [r4, #1]
 80073e0:	2b2a      	cmp	r3, #42	; 0x2a
 80073e2:	d135      	bne.n	8007450 <_svfiprintf_r+0x188>
 80073e4:	9b03      	ldr	r3, [sp, #12]
 80073e6:	1d1a      	adds	r2, r3, #4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	9203      	str	r2, [sp, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bfb8      	it	lt
 80073f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80073f4:	3402      	adds	r4, #2
 80073f6:	9305      	str	r3, [sp, #20]
 80073f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80074c4 <_svfiprintf_r+0x1fc>
 80073fc:	7821      	ldrb	r1, [r4, #0]
 80073fe:	2203      	movs	r2, #3
 8007400:	4650      	mov	r0, sl
 8007402:	f7f8 ff05 	bl	8000210 <memchr>
 8007406:	b140      	cbz	r0, 800741a <_svfiprintf_r+0x152>
 8007408:	2340      	movs	r3, #64	; 0x40
 800740a:	eba0 000a 	sub.w	r0, r0, sl
 800740e:	fa03 f000 	lsl.w	r0, r3, r0
 8007412:	9b04      	ldr	r3, [sp, #16]
 8007414:	4303      	orrs	r3, r0
 8007416:	3401      	adds	r4, #1
 8007418:	9304      	str	r3, [sp, #16]
 800741a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800741e:	4826      	ldr	r0, [pc, #152]	; (80074b8 <_svfiprintf_r+0x1f0>)
 8007420:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007424:	2206      	movs	r2, #6
 8007426:	f7f8 fef3 	bl	8000210 <memchr>
 800742a:	2800      	cmp	r0, #0
 800742c:	d038      	beq.n	80074a0 <_svfiprintf_r+0x1d8>
 800742e:	4b23      	ldr	r3, [pc, #140]	; (80074bc <_svfiprintf_r+0x1f4>)
 8007430:	bb1b      	cbnz	r3, 800747a <_svfiprintf_r+0x1b2>
 8007432:	9b03      	ldr	r3, [sp, #12]
 8007434:	3307      	adds	r3, #7
 8007436:	f023 0307 	bic.w	r3, r3, #7
 800743a:	3308      	adds	r3, #8
 800743c:	9303      	str	r3, [sp, #12]
 800743e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007440:	4433      	add	r3, r6
 8007442:	9309      	str	r3, [sp, #36]	; 0x24
 8007444:	e767      	b.n	8007316 <_svfiprintf_r+0x4e>
 8007446:	fb0c 3202 	mla	r2, ip, r2, r3
 800744a:	460c      	mov	r4, r1
 800744c:	2001      	movs	r0, #1
 800744e:	e7a5      	b.n	800739c <_svfiprintf_r+0xd4>
 8007450:	2300      	movs	r3, #0
 8007452:	3401      	adds	r4, #1
 8007454:	9305      	str	r3, [sp, #20]
 8007456:	4619      	mov	r1, r3
 8007458:	f04f 0c0a 	mov.w	ip, #10
 800745c:	4620      	mov	r0, r4
 800745e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007462:	3a30      	subs	r2, #48	; 0x30
 8007464:	2a09      	cmp	r2, #9
 8007466:	d903      	bls.n	8007470 <_svfiprintf_r+0x1a8>
 8007468:	2b00      	cmp	r3, #0
 800746a:	d0c5      	beq.n	80073f8 <_svfiprintf_r+0x130>
 800746c:	9105      	str	r1, [sp, #20]
 800746e:	e7c3      	b.n	80073f8 <_svfiprintf_r+0x130>
 8007470:	fb0c 2101 	mla	r1, ip, r1, r2
 8007474:	4604      	mov	r4, r0
 8007476:	2301      	movs	r3, #1
 8007478:	e7f0      	b.n	800745c <_svfiprintf_r+0x194>
 800747a:	ab03      	add	r3, sp, #12
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	462a      	mov	r2, r5
 8007480:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <_svfiprintf_r+0x1f8>)
 8007482:	a904      	add	r1, sp, #16
 8007484:	4638      	mov	r0, r7
 8007486:	f3af 8000 	nop.w
 800748a:	1c42      	adds	r2, r0, #1
 800748c:	4606      	mov	r6, r0
 800748e:	d1d6      	bne.n	800743e <_svfiprintf_r+0x176>
 8007490:	89ab      	ldrh	r3, [r5, #12]
 8007492:	065b      	lsls	r3, r3, #25
 8007494:	f53f af2c 	bmi.w	80072f0 <_svfiprintf_r+0x28>
 8007498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800749a:	b01d      	add	sp, #116	; 0x74
 800749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a0:	ab03      	add	r3, sp, #12
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	462a      	mov	r2, r5
 80074a6:	4b06      	ldr	r3, [pc, #24]	; (80074c0 <_svfiprintf_r+0x1f8>)
 80074a8:	a904      	add	r1, sp, #16
 80074aa:	4638      	mov	r0, r7
 80074ac:	f000 f87a 	bl	80075a4 <_printf_i>
 80074b0:	e7eb      	b.n	800748a <_svfiprintf_r+0x1c2>
 80074b2:	bf00      	nop
 80074b4:	08007c99 	.word	0x08007c99
 80074b8:	08007ca3 	.word	0x08007ca3
 80074bc:	00000000 	.word	0x00000000
 80074c0:	08007211 	.word	0x08007211
 80074c4:	08007c9f 	.word	0x08007c9f

080074c8 <_printf_common>:
 80074c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074cc:	4616      	mov	r6, r2
 80074ce:	4699      	mov	r9, r3
 80074d0:	688a      	ldr	r2, [r1, #8]
 80074d2:	690b      	ldr	r3, [r1, #16]
 80074d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074d8:	4293      	cmp	r3, r2
 80074da:	bfb8      	it	lt
 80074dc:	4613      	movlt	r3, r2
 80074de:	6033      	str	r3, [r6, #0]
 80074e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074e4:	4607      	mov	r7, r0
 80074e6:	460c      	mov	r4, r1
 80074e8:	b10a      	cbz	r2, 80074ee <_printf_common+0x26>
 80074ea:	3301      	adds	r3, #1
 80074ec:	6033      	str	r3, [r6, #0]
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	0699      	lsls	r1, r3, #26
 80074f2:	bf42      	ittt	mi
 80074f4:	6833      	ldrmi	r3, [r6, #0]
 80074f6:	3302      	addmi	r3, #2
 80074f8:	6033      	strmi	r3, [r6, #0]
 80074fa:	6825      	ldr	r5, [r4, #0]
 80074fc:	f015 0506 	ands.w	r5, r5, #6
 8007500:	d106      	bne.n	8007510 <_printf_common+0x48>
 8007502:	f104 0a19 	add.w	sl, r4, #25
 8007506:	68e3      	ldr	r3, [r4, #12]
 8007508:	6832      	ldr	r2, [r6, #0]
 800750a:	1a9b      	subs	r3, r3, r2
 800750c:	42ab      	cmp	r3, r5
 800750e:	dc26      	bgt.n	800755e <_printf_common+0x96>
 8007510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007514:	1e13      	subs	r3, r2, #0
 8007516:	6822      	ldr	r2, [r4, #0]
 8007518:	bf18      	it	ne
 800751a:	2301      	movne	r3, #1
 800751c:	0692      	lsls	r2, r2, #26
 800751e:	d42b      	bmi.n	8007578 <_printf_common+0xb0>
 8007520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007524:	4649      	mov	r1, r9
 8007526:	4638      	mov	r0, r7
 8007528:	47c0      	blx	r8
 800752a:	3001      	adds	r0, #1
 800752c:	d01e      	beq.n	800756c <_printf_common+0xa4>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	68e5      	ldr	r5, [r4, #12]
 8007532:	6832      	ldr	r2, [r6, #0]
 8007534:	f003 0306 	and.w	r3, r3, #6
 8007538:	2b04      	cmp	r3, #4
 800753a:	bf08      	it	eq
 800753c:	1aad      	subeq	r5, r5, r2
 800753e:	68a3      	ldr	r3, [r4, #8]
 8007540:	6922      	ldr	r2, [r4, #16]
 8007542:	bf0c      	ite	eq
 8007544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007548:	2500      	movne	r5, #0
 800754a:	4293      	cmp	r3, r2
 800754c:	bfc4      	itt	gt
 800754e:	1a9b      	subgt	r3, r3, r2
 8007550:	18ed      	addgt	r5, r5, r3
 8007552:	2600      	movs	r6, #0
 8007554:	341a      	adds	r4, #26
 8007556:	42b5      	cmp	r5, r6
 8007558:	d11a      	bne.n	8007590 <_printf_common+0xc8>
 800755a:	2000      	movs	r0, #0
 800755c:	e008      	b.n	8007570 <_printf_common+0xa8>
 800755e:	2301      	movs	r3, #1
 8007560:	4652      	mov	r2, sl
 8007562:	4649      	mov	r1, r9
 8007564:	4638      	mov	r0, r7
 8007566:	47c0      	blx	r8
 8007568:	3001      	adds	r0, #1
 800756a:	d103      	bne.n	8007574 <_printf_common+0xac>
 800756c:	f04f 30ff 	mov.w	r0, #4294967295
 8007570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007574:	3501      	adds	r5, #1
 8007576:	e7c6      	b.n	8007506 <_printf_common+0x3e>
 8007578:	18e1      	adds	r1, r4, r3
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	2030      	movs	r0, #48	; 0x30
 800757e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007582:	4422      	add	r2, r4
 8007584:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800758c:	3302      	adds	r3, #2
 800758e:	e7c7      	b.n	8007520 <_printf_common+0x58>
 8007590:	2301      	movs	r3, #1
 8007592:	4622      	mov	r2, r4
 8007594:	4649      	mov	r1, r9
 8007596:	4638      	mov	r0, r7
 8007598:	47c0      	blx	r8
 800759a:	3001      	adds	r0, #1
 800759c:	d0e6      	beq.n	800756c <_printf_common+0xa4>
 800759e:	3601      	adds	r6, #1
 80075a0:	e7d9      	b.n	8007556 <_printf_common+0x8e>
	...

080075a4 <_printf_i>:
 80075a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075a8:	460c      	mov	r4, r1
 80075aa:	4691      	mov	r9, r2
 80075ac:	7e27      	ldrb	r7, [r4, #24]
 80075ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80075b0:	2f78      	cmp	r7, #120	; 0x78
 80075b2:	4680      	mov	r8, r0
 80075b4:	469a      	mov	sl, r3
 80075b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075ba:	d807      	bhi.n	80075cc <_printf_i+0x28>
 80075bc:	2f62      	cmp	r7, #98	; 0x62
 80075be:	d80a      	bhi.n	80075d6 <_printf_i+0x32>
 80075c0:	2f00      	cmp	r7, #0
 80075c2:	f000 80d8 	beq.w	8007776 <_printf_i+0x1d2>
 80075c6:	2f58      	cmp	r7, #88	; 0x58
 80075c8:	f000 80a3 	beq.w	8007712 <_printf_i+0x16e>
 80075cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075d4:	e03a      	b.n	800764c <_printf_i+0xa8>
 80075d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075da:	2b15      	cmp	r3, #21
 80075dc:	d8f6      	bhi.n	80075cc <_printf_i+0x28>
 80075de:	a001      	add	r0, pc, #4	; (adr r0, 80075e4 <_printf_i+0x40>)
 80075e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80075e4:	0800763d 	.word	0x0800763d
 80075e8:	08007651 	.word	0x08007651
 80075ec:	080075cd 	.word	0x080075cd
 80075f0:	080075cd 	.word	0x080075cd
 80075f4:	080075cd 	.word	0x080075cd
 80075f8:	080075cd 	.word	0x080075cd
 80075fc:	08007651 	.word	0x08007651
 8007600:	080075cd 	.word	0x080075cd
 8007604:	080075cd 	.word	0x080075cd
 8007608:	080075cd 	.word	0x080075cd
 800760c:	080075cd 	.word	0x080075cd
 8007610:	0800775d 	.word	0x0800775d
 8007614:	08007681 	.word	0x08007681
 8007618:	0800773f 	.word	0x0800773f
 800761c:	080075cd 	.word	0x080075cd
 8007620:	080075cd 	.word	0x080075cd
 8007624:	0800777f 	.word	0x0800777f
 8007628:	080075cd 	.word	0x080075cd
 800762c:	08007681 	.word	0x08007681
 8007630:	080075cd 	.word	0x080075cd
 8007634:	080075cd 	.word	0x080075cd
 8007638:	08007747 	.word	0x08007747
 800763c:	680b      	ldr	r3, [r1, #0]
 800763e:	1d1a      	adds	r2, r3, #4
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	600a      	str	r2, [r1, #0]
 8007644:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800764c:	2301      	movs	r3, #1
 800764e:	e0a3      	b.n	8007798 <_printf_i+0x1f4>
 8007650:	6825      	ldr	r5, [r4, #0]
 8007652:	6808      	ldr	r0, [r1, #0]
 8007654:	062e      	lsls	r6, r5, #24
 8007656:	f100 0304 	add.w	r3, r0, #4
 800765a:	d50a      	bpl.n	8007672 <_printf_i+0xce>
 800765c:	6805      	ldr	r5, [r0, #0]
 800765e:	600b      	str	r3, [r1, #0]
 8007660:	2d00      	cmp	r5, #0
 8007662:	da03      	bge.n	800766c <_printf_i+0xc8>
 8007664:	232d      	movs	r3, #45	; 0x2d
 8007666:	426d      	negs	r5, r5
 8007668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800766c:	485e      	ldr	r0, [pc, #376]	; (80077e8 <_printf_i+0x244>)
 800766e:	230a      	movs	r3, #10
 8007670:	e019      	b.n	80076a6 <_printf_i+0x102>
 8007672:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007676:	6805      	ldr	r5, [r0, #0]
 8007678:	600b      	str	r3, [r1, #0]
 800767a:	bf18      	it	ne
 800767c:	b22d      	sxthne	r5, r5
 800767e:	e7ef      	b.n	8007660 <_printf_i+0xbc>
 8007680:	680b      	ldr	r3, [r1, #0]
 8007682:	6825      	ldr	r5, [r4, #0]
 8007684:	1d18      	adds	r0, r3, #4
 8007686:	6008      	str	r0, [r1, #0]
 8007688:	0628      	lsls	r0, r5, #24
 800768a:	d501      	bpl.n	8007690 <_printf_i+0xec>
 800768c:	681d      	ldr	r5, [r3, #0]
 800768e:	e002      	b.n	8007696 <_printf_i+0xf2>
 8007690:	0669      	lsls	r1, r5, #25
 8007692:	d5fb      	bpl.n	800768c <_printf_i+0xe8>
 8007694:	881d      	ldrh	r5, [r3, #0]
 8007696:	4854      	ldr	r0, [pc, #336]	; (80077e8 <_printf_i+0x244>)
 8007698:	2f6f      	cmp	r7, #111	; 0x6f
 800769a:	bf0c      	ite	eq
 800769c:	2308      	moveq	r3, #8
 800769e:	230a      	movne	r3, #10
 80076a0:	2100      	movs	r1, #0
 80076a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076a6:	6866      	ldr	r6, [r4, #4]
 80076a8:	60a6      	str	r6, [r4, #8]
 80076aa:	2e00      	cmp	r6, #0
 80076ac:	bfa2      	ittt	ge
 80076ae:	6821      	ldrge	r1, [r4, #0]
 80076b0:	f021 0104 	bicge.w	r1, r1, #4
 80076b4:	6021      	strge	r1, [r4, #0]
 80076b6:	b90d      	cbnz	r5, 80076bc <_printf_i+0x118>
 80076b8:	2e00      	cmp	r6, #0
 80076ba:	d04d      	beq.n	8007758 <_printf_i+0x1b4>
 80076bc:	4616      	mov	r6, r2
 80076be:	fbb5 f1f3 	udiv	r1, r5, r3
 80076c2:	fb03 5711 	mls	r7, r3, r1, r5
 80076c6:	5dc7      	ldrb	r7, [r0, r7]
 80076c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076cc:	462f      	mov	r7, r5
 80076ce:	42bb      	cmp	r3, r7
 80076d0:	460d      	mov	r5, r1
 80076d2:	d9f4      	bls.n	80076be <_printf_i+0x11a>
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	d10b      	bne.n	80076f0 <_printf_i+0x14c>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	07df      	lsls	r7, r3, #31
 80076dc:	d508      	bpl.n	80076f0 <_printf_i+0x14c>
 80076de:	6923      	ldr	r3, [r4, #16]
 80076e0:	6861      	ldr	r1, [r4, #4]
 80076e2:	4299      	cmp	r1, r3
 80076e4:	bfde      	ittt	le
 80076e6:	2330      	movle	r3, #48	; 0x30
 80076e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076f0:	1b92      	subs	r2, r2, r6
 80076f2:	6122      	str	r2, [r4, #16]
 80076f4:	f8cd a000 	str.w	sl, [sp]
 80076f8:	464b      	mov	r3, r9
 80076fa:	aa03      	add	r2, sp, #12
 80076fc:	4621      	mov	r1, r4
 80076fe:	4640      	mov	r0, r8
 8007700:	f7ff fee2 	bl	80074c8 <_printf_common>
 8007704:	3001      	adds	r0, #1
 8007706:	d14c      	bne.n	80077a2 <_printf_i+0x1fe>
 8007708:	f04f 30ff 	mov.w	r0, #4294967295
 800770c:	b004      	add	sp, #16
 800770e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007712:	4835      	ldr	r0, [pc, #212]	; (80077e8 <_printf_i+0x244>)
 8007714:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	680e      	ldr	r6, [r1, #0]
 800771c:	061f      	lsls	r7, r3, #24
 800771e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007722:	600e      	str	r6, [r1, #0]
 8007724:	d514      	bpl.n	8007750 <_printf_i+0x1ac>
 8007726:	07d9      	lsls	r1, r3, #31
 8007728:	bf44      	itt	mi
 800772a:	f043 0320 	orrmi.w	r3, r3, #32
 800772e:	6023      	strmi	r3, [r4, #0]
 8007730:	b91d      	cbnz	r5, 800773a <_printf_i+0x196>
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	f023 0320 	bic.w	r3, r3, #32
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	2310      	movs	r3, #16
 800773c:	e7b0      	b.n	80076a0 <_printf_i+0xfc>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	f043 0320 	orr.w	r3, r3, #32
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	2378      	movs	r3, #120	; 0x78
 8007748:	4828      	ldr	r0, [pc, #160]	; (80077ec <_printf_i+0x248>)
 800774a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800774e:	e7e3      	b.n	8007718 <_printf_i+0x174>
 8007750:	065e      	lsls	r6, r3, #25
 8007752:	bf48      	it	mi
 8007754:	b2ad      	uxthmi	r5, r5
 8007756:	e7e6      	b.n	8007726 <_printf_i+0x182>
 8007758:	4616      	mov	r6, r2
 800775a:	e7bb      	b.n	80076d4 <_printf_i+0x130>
 800775c:	680b      	ldr	r3, [r1, #0]
 800775e:	6826      	ldr	r6, [r4, #0]
 8007760:	6960      	ldr	r0, [r4, #20]
 8007762:	1d1d      	adds	r5, r3, #4
 8007764:	600d      	str	r5, [r1, #0]
 8007766:	0635      	lsls	r5, r6, #24
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	d501      	bpl.n	8007770 <_printf_i+0x1cc>
 800776c:	6018      	str	r0, [r3, #0]
 800776e:	e002      	b.n	8007776 <_printf_i+0x1d2>
 8007770:	0671      	lsls	r1, r6, #25
 8007772:	d5fb      	bpl.n	800776c <_printf_i+0x1c8>
 8007774:	8018      	strh	r0, [r3, #0]
 8007776:	2300      	movs	r3, #0
 8007778:	6123      	str	r3, [r4, #16]
 800777a:	4616      	mov	r6, r2
 800777c:	e7ba      	b.n	80076f4 <_printf_i+0x150>
 800777e:	680b      	ldr	r3, [r1, #0]
 8007780:	1d1a      	adds	r2, r3, #4
 8007782:	600a      	str	r2, [r1, #0]
 8007784:	681e      	ldr	r6, [r3, #0]
 8007786:	6862      	ldr	r2, [r4, #4]
 8007788:	2100      	movs	r1, #0
 800778a:	4630      	mov	r0, r6
 800778c:	f7f8 fd40 	bl	8000210 <memchr>
 8007790:	b108      	cbz	r0, 8007796 <_printf_i+0x1f2>
 8007792:	1b80      	subs	r0, r0, r6
 8007794:	6060      	str	r0, [r4, #4]
 8007796:	6863      	ldr	r3, [r4, #4]
 8007798:	6123      	str	r3, [r4, #16]
 800779a:	2300      	movs	r3, #0
 800779c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077a0:	e7a8      	b.n	80076f4 <_printf_i+0x150>
 80077a2:	6923      	ldr	r3, [r4, #16]
 80077a4:	4632      	mov	r2, r6
 80077a6:	4649      	mov	r1, r9
 80077a8:	4640      	mov	r0, r8
 80077aa:	47d0      	blx	sl
 80077ac:	3001      	adds	r0, #1
 80077ae:	d0ab      	beq.n	8007708 <_printf_i+0x164>
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	079b      	lsls	r3, r3, #30
 80077b4:	d413      	bmi.n	80077de <_printf_i+0x23a>
 80077b6:	68e0      	ldr	r0, [r4, #12]
 80077b8:	9b03      	ldr	r3, [sp, #12]
 80077ba:	4298      	cmp	r0, r3
 80077bc:	bfb8      	it	lt
 80077be:	4618      	movlt	r0, r3
 80077c0:	e7a4      	b.n	800770c <_printf_i+0x168>
 80077c2:	2301      	movs	r3, #1
 80077c4:	4632      	mov	r2, r6
 80077c6:	4649      	mov	r1, r9
 80077c8:	4640      	mov	r0, r8
 80077ca:	47d0      	blx	sl
 80077cc:	3001      	adds	r0, #1
 80077ce:	d09b      	beq.n	8007708 <_printf_i+0x164>
 80077d0:	3501      	adds	r5, #1
 80077d2:	68e3      	ldr	r3, [r4, #12]
 80077d4:	9903      	ldr	r1, [sp, #12]
 80077d6:	1a5b      	subs	r3, r3, r1
 80077d8:	42ab      	cmp	r3, r5
 80077da:	dcf2      	bgt.n	80077c2 <_printf_i+0x21e>
 80077dc:	e7eb      	b.n	80077b6 <_printf_i+0x212>
 80077de:	2500      	movs	r5, #0
 80077e0:	f104 0619 	add.w	r6, r4, #25
 80077e4:	e7f5      	b.n	80077d2 <_printf_i+0x22e>
 80077e6:	bf00      	nop
 80077e8:	08007caa 	.word	0x08007caa
 80077ec:	08007cbb 	.word	0x08007cbb

080077f0 <memmove>:
 80077f0:	4288      	cmp	r0, r1
 80077f2:	b510      	push	{r4, lr}
 80077f4:	eb01 0402 	add.w	r4, r1, r2
 80077f8:	d902      	bls.n	8007800 <memmove+0x10>
 80077fa:	4284      	cmp	r4, r0
 80077fc:	4623      	mov	r3, r4
 80077fe:	d807      	bhi.n	8007810 <memmove+0x20>
 8007800:	1e43      	subs	r3, r0, #1
 8007802:	42a1      	cmp	r1, r4
 8007804:	d008      	beq.n	8007818 <memmove+0x28>
 8007806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800780a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800780e:	e7f8      	b.n	8007802 <memmove+0x12>
 8007810:	4402      	add	r2, r0
 8007812:	4601      	mov	r1, r0
 8007814:	428a      	cmp	r2, r1
 8007816:	d100      	bne.n	800781a <memmove+0x2a>
 8007818:	bd10      	pop	{r4, pc}
 800781a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800781e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007822:	e7f7      	b.n	8007814 <memmove+0x24>

08007824 <_free_r>:
 8007824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007826:	2900      	cmp	r1, #0
 8007828:	d048      	beq.n	80078bc <_free_r+0x98>
 800782a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800782e:	9001      	str	r0, [sp, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f1a1 0404 	sub.w	r4, r1, #4
 8007836:	bfb8      	it	lt
 8007838:	18e4      	addlt	r4, r4, r3
 800783a:	f000 f8d3 	bl	80079e4 <__malloc_lock>
 800783e:	4a20      	ldr	r2, [pc, #128]	; (80078c0 <_free_r+0x9c>)
 8007840:	9801      	ldr	r0, [sp, #4]
 8007842:	6813      	ldr	r3, [r2, #0]
 8007844:	4615      	mov	r5, r2
 8007846:	b933      	cbnz	r3, 8007856 <_free_r+0x32>
 8007848:	6063      	str	r3, [r4, #4]
 800784a:	6014      	str	r4, [r2, #0]
 800784c:	b003      	add	sp, #12
 800784e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007852:	f000 b8cd 	b.w	80079f0 <__malloc_unlock>
 8007856:	42a3      	cmp	r3, r4
 8007858:	d90b      	bls.n	8007872 <_free_r+0x4e>
 800785a:	6821      	ldr	r1, [r4, #0]
 800785c:	1862      	adds	r2, r4, r1
 800785e:	4293      	cmp	r3, r2
 8007860:	bf04      	itt	eq
 8007862:	681a      	ldreq	r2, [r3, #0]
 8007864:	685b      	ldreq	r3, [r3, #4]
 8007866:	6063      	str	r3, [r4, #4]
 8007868:	bf04      	itt	eq
 800786a:	1852      	addeq	r2, r2, r1
 800786c:	6022      	streq	r2, [r4, #0]
 800786e:	602c      	str	r4, [r5, #0]
 8007870:	e7ec      	b.n	800784c <_free_r+0x28>
 8007872:	461a      	mov	r2, r3
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	b10b      	cbz	r3, 800787c <_free_r+0x58>
 8007878:	42a3      	cmp	r3, r4
 800787a:	d9fa      	bls.n	8007872 <_free_r+0x4e>
 800787c:	6811      	ldr	r1, [r2, #0]
 800787e:	1855      	adds	r5, r2, r1
 8007880:	42a5      	cmp	r5, r4
 8007882:	d10b      	bne.n	800789c <_free_r+0x78>
 8007884:	6824      	ldr	r4, [r4, #0]
 8007886:	4421      	add	r1, r4
 8007888:	1854      	adds	r4, r2, r1
 800788a:	42a3      	cmp	r3, r4
 800788c:	6011      	str	r1, [r2, #0]
 800788e:	d1dd      	bne.n	800784c <_free_r+0x28>
 8007890:	681c      	ldr	r4, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	6053      	str	r3, [r2, #4]
 8007896:	4421      	add	r1, r4
 8007898:	6011      	str	r1, [r2, #0]
 800789a:	e7d7      	b.n	800784c <_free_r+0x28>
 800789c:	d902      	bls.n	80078a4 <_free_r+0x80>
 800789e:	230c      	movs	r3, #12
 80078a0:	6003      	str	r3, [r0, #0]
 80078a2:	e7d3      	b.n	800784c <_free_r+0x28>
 80078a4:	6825      	ldr	r5, [r4, #0]
 80078a6:	1961      	adds	r1, r4, r5
 80078a8:	428b      	cmp	r3, r1
 80078aa:	bf04      	itt	eq
 80078ac:	6819      	ldreq	r1, [r3, #0]
 80078ae:	685b      	ldreq	r3, [r3, #4]
 80078b0:	6063      	str	r3, [r4, #4]
 80078b2:	bf04      	itt	eq
 80078b4:	1949      	addeq	r1, r1, r5
 80078b6:	6021      	streq	r1, [r4, #0]
 80078b8:	6054      	str	r4, [r2, #4]
 80078ba:	e7c7      	b.n	800784c <_free_r+0x28>
 80078bc:	b003      	add	sp, #12
 80078be:	bd30      	pop	{r4, r5, pc}
 80078c0:	200049a8 	.word	0x200049a8

080078c4 <_malloc_r>:
 80078c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c6:	1ccd      	adds	r5, r1, #3
 80078c8:	f025 0503 	bic.w	r5, r5, #3
 80078cc:	3508      	adds	r5, #8
 80078ce:	2d0c      	cmp	r5, #12
 80078d0:	bf38      	it	cc
 80078d2:	250c      	movcc	r5, #12
 80078d4:	2d00      	cmp	r5, #0
 80078d6:	4606      	mov	r6, r0
 80078d8:	db01      	blt.n	80078de <_malloc_r+0x1a>
 80078da:	42a9      	cmp	r1, r5
 80078dc:	d903      	bls.n	80078e6 <_malloc_r+0x22>
 80078de:	230c      	movs	r3, #12
 80078e0:	6033      	str	r3, [r6, #0]
 80078e2:	2000      	movs	r0, #0
 80078e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078e6:	f000 f87d 	bl	80079e4 <__malloc_lock>
 80078ea:	4921      	ldr	r1, [pc, #132]	; (8007970 <_malloc_r+0xac>)
 80078ec:	680a      	ldr	r2, [r1, #0]
 80078ee:	4614      	mov	r4, r2
 80078f0:	b99c      	cbnz	r4, 800791a <_malloc_r+0x56>
 80078f2:	4f20      	ldr	r7, [pc, #128]	; (8007974 <_malloc_r+0xb0>)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	b923      	cbnz	r3, 8007902 <_malloc_r+0x3e>
 80078f8:	4621      	mov	r1, r4
 80078fa:	4630      	mov	r0, r6
 80078fc:	f000 f862 	bl	80079c4 <_sbrk_r>
 8007900:	6038      	str	r0, [r7, #0]
 8007902:	4629      	mov	r1, r5
 8007904:	4630      	mov	r0, r6
 8007906:	f000 f85d 	bl	80079c4 <_sbrk_r>
 800790a:	1c43      	adds	r3, r0, #1
 800790c:	d123      	bne.n	8007956 <_malloc_r+0x92>
 800790e:	230c      	movs	r3, #12
 8007910:	6033      	str	r3, [r6, #0]
 8007912:	4630      	mov	r0, r6
 8007914:	f000 f86c 	bl	80079f0 <__malloc_unlock>
 8007918:	e7e3      	b.n	80078e2 <_malloc_r+0x1e>
 800791a:	6823      	ldr	r3, [r4, #0]
 800791c:	1b5b      	subs	r3, r3, r5
 800791e:	d417      	bmi.n	8007950 <_malloc_r+0x8c>
 8007920:	2b0b      	cmp	r3, #11
 8007922:	d903      	bls.n	800792c <_malloc_r+0x68>
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	441c      	add	r4, r3
 8007928:	6025      	str	r5, [r4, #0]
 800792a:	e004      	b.n	8007936 <_malloc_r+0x72>
 800792c:	6863      	ldr	r3, [r4, #4]
 800792e:	42a2      	cmp	r2, r4
 8007930:	bf0c      	ite	eq
 8007932:	600b      	streq	r3, [r1, #0]
 8007934:	6053      	strne	r3, [r2, #4]
 8007936:	4630      	mov	r0, r6
 8007938:	f000 f85a 	bl	80079f0 <__malloc_unlock>
 800793c:	f104 000b 	add.w	r0, r4, #11
 8007940:	1d23      	adds	r3, r4, #4
 8007942:	f020 0007 	bic.w	r0, r0, #7
 8007946:	1ac2      	subs	r2, r0, r3
 8007948:	d0cc      	beq.n	80078e4 <_malloc_r+0x20>
 800794a:	1a1b      	subs	r3, r3, r0
 800794c:	50a3      	str	r3, [r4, r2]
 800794e:	e7c9      	b.n	80078e4 <_malloc_r+0x20>
 8007950:	4622      	mov	r2, r4
 8007952:	6864      	ldr	r4, [r4, #4]
 8007954:	e7cc      	b.n	80078f0 <_malloc_r+0x2c>
 8007956:	1cc4      	adds	r4, r0, #3
 8007958:	f024 0403 	bic.w	r4, r4, #3
 800795c:	42a0      	cmp	r0, r4
 800795e:	d0e3      	beq.n	8007928 <_malloc_r+0x64>
 8007960:	1a21      	subs	r1, r4, r0
 8007962:	4630      	mov	r0, r6
 8007964:	f000 f82e 	bl	80079c4 <_sbrk_r>
 8007968:	3001      	adds	r0, #1
 800796a:	d1dd      	bne.n	8007928 <_malloc_r+0x64>
 800796c:	e7cf      	b.n	800790e <_malloc_r+0x4a>
 800796e:	bf00      	nop
 8007970:	200049a8 	.word	0x200049a8
 8007974:	200049ac 	.word	0x200049ac

08007978 <_realloc_r>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	4607      	mov	r7, r0
 800797c:	4614      	mov	r4, r2
 800797e:	460e      	mov	r6, r1
 8007980:	b921      	cbnz	r1, 800798c <_realloc_r+0x14>
 8007982:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007986:	4611      	mov	r1, r2
 8007988:	f7ff bf9c 	b.w	80078c4 <_malloc_r>
 800798c:	b922      	cbnz	r2, 8007998 <_realloc_r+0x20>
 800798e:	f7ff ff49 	bl	8007824 <_free_r>
 8007992:	4625      	mov	r5, r4
 8007994:	4628      	mov	r0, r5
 8007996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007998:	f000 f830 	bl	80079fc <_malloc_usable_size_r>
 800799c:	42a0      	cmp	r0, r4
 800799e:	d20f      	bcs.n	80079c0 <_realloc_r+0x48>
 80079a0:	4621      	mov	r1, r4
 80079a2:	4638      	mov	r0, r7
 80079a4:	f7ff ff8e 	bl	80078c4 <_malloc_r>
 80079a8:	4605      	mov	r5, r0
 80079aa:	2800      	cmp	r0, #0
 80079ac:	d0f2      	beq.n	8007994 <_realloc_r+0x1c>
 80079ae:	4631      	mov	r1, r6
 80079b0:	4622      	mov	r2, r4
 80079b2:	f7ff fb55 	bl	8007060 <memcpy>
 80079b6:	4631      	mov	r1, r6
 80079b8:	4638      	mov	r0, r7
 80079ba:	f7ff ff33 	bl	8007824 <_free_r>
 80079be:	e7e9      	b.n	8007994 <_realloc_r+0x1c>
 80079c0:	4635      	mov	r5, r6
 80079c2:	e7e7      	b.n	8007994 <_realloc_r+0x1c>

080079c4 <_sbrk_r>:
 80079c4:	b538      	push	{r3, r4, r5, lr}
 80079c6:	4d06      	ldr	r5, [pc, #24]	; (80079e0 <_sbrk_r+0x1c>)
 80079c8:	2300      	movs	r3, #0
 80079ca:	4604      	mov	r4, r0
 80079cc:	4608      	mov	r0, r1
 80079ce:	602b      	str	r3, [r5, #0]
 80079d0:	f7f9 fab0 	bl	8000f34 <_sbrk>
 80079d4:	1c43      	adds	r3, r0, #1
 80079d6:	d102      	bne.n	80079de <_sbrk_r+0x1a>
 80079d8:	682b      	ldr	r3, [r5, #0]
 80079da:	b103      	cbz	r3, 80079de <_sbrk_r+0x1a>
 80079dc:	6023      	str	r3, [r4, #0]
 80079de:	bd38      	pop	{r3, r4, r5, pc}
 80079e0:	20004bec 	.word	0x20004bec

080079e4 <__malloc_lock>:
 80079e4:	4801      	ldr	r0, [pc, #4]	; (80079ec <__malloc_lock+0x8>)
 80079e6:	f000 b811 	b.w	8007a0c <__retarget_lock_acquire_recursive>
 80079ea:	bf00      	nop
 80079ec:	20004bf4 	.word	0x20004bf4

080079f0 <__malloc_unlock>:
 80079f0:	4801      	ldr	r0, [pc, #4]	; (80079f8 <__malloc_unlock+0x8>)
 80079f2:	f000 b80c 	b.w	8007a0e <__retarget_lock_release_recursive>
 80079f6:	bf00      	nop
 80079f8:	20004bf4 	.word	0x20004bf4

080079fc <_malloc_usable_size_r>:
 80079fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a00:	1f18      	subs	r0, r3, #4
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	bfbc      	itt	lt
 8007a06:	580b      	ldrlt	r3, [r1, r0]
 8007a08:	18c0      	addlt	r0, r0, r3
 8007a0a:	4770      	bx	lr

08007a0c <__retarget_lock_acquire_recursive>:
 8007a0c:	4770      	bx	lr

08007a0e <__retarget_lock_release_recursive>:
 8007a0e:	4770      	bx	lr

08007a10 <_init>:
 8007a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a12:	bf00      	nop
 8007a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a16:	bc08      	pop	{r3}
 8007a18:	469e      	mov	lr, r3
 8007a1a:	4770      	bx	lr

08007a1c <_fini>:
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1e:	bf00      	nop
 8007a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a22:	bc08      	pop	{r3}
 8007a24:	469e      	mov	lr, r3
 8007a26:	4770      	bx	lr
